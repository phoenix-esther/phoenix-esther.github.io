import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-e53dd85b.js";const e="/assets/image-20230501153130574-0fd3b5d6.png",o="/assets/image-20230501193646378-9f76cdc0.png",p={},r=t('<h1 id="kafka-broker" tabindex="-1"><a class="header-anchor" href="#kafka-broker" aria-hidden="true">#</a> Kafka Broker</h1><h2 id="一-kafka-broker-工作流程" tabindex="-1"><a class="header-anchor" href="#一-kafka-broker-工作流程" aria-hidden="true">#</a> 一：Kafka Broker 工作流程</h2><h3 id="_1-1-zookeeper存储的kafka信息结构图" tabindex="-1"><a class="header-anchor" href="#_1-1-zookeeper存储的kafka信息结构图" aria-hidden="true">#</a> 1.1 Zookeeper存储的Kafka信息结构图</h3><p><img src="'+e+`" alt="image-20230501153130574"></p><p>kafka在zookeeper中存储的信息很多，重点了解以下几点：</p><ol><li><p>/kafka/brokers/ids [0,1,2] 记录当前集群中那些服务节点还存活。</p></li><li><p>/kafka/brokers/topics/first/partitions/0/state</p><p><code>{&quot;leader&quot;:1, &quot;isr&quot;:[0,1,2]}</code> 记录谁是leader, 有哪些服务器</p></li><li><p>/kafka/controller {&quot;brokerid&quot;: 0} 辅助选举Leader</p></li></ol><h3 id="_1-2-内容详解" tabindex="-1"><a class="header-anchor" href="#_1-2-内容详解" aria-hidden="true">#</a> 1.2 内容详解</h3><h4 id="_1-2-1-topic-注册信息" tabindex="-1"><a class="header-anchor" href="#_1-2-1-topic-注册信息" aria-hidden="true">#</a> 1.2.1 topic 注册信息</h4><blockquote><p>/brokers/topics/[topic]</p></blockquote><p>存储某个topic的partitions所有分配信息</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code># Schema
<span class="token punctuation">{</span>
    <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;版本编号目前固定为数字1&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;partitions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;partitionId编号&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
            同步副本组brokerId列表
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token property">&quot;partitionId编号&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
            同步副本组brokerId列表
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
        .......
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
# Example<span class="token operator">:</span>
<span class="token punctuation">{</span>
	<span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
	<span class="token property">&quot;partitions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token property">&quot;2&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
		<span class="token property">&quot;1&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
		<span class="token property">&quot;0&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-2-2-partition状态信息" tabindex="-1"><a class="header-anchor" href="#_1-2-2-partition状态信息" aria-hidden="true">#</a> 1.2.2 partition状态信息</h4><blockquote><p>/brokers/topics/[topic]/partitions/[0...N] 其中[0..N]表示partition索引号 /brokers/topics/[topic]/partitions/[partitionId]/state</p></blockquote><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code># Schema<span class="token operator">:</span>
<span class="token punctuation">{</span>
	<span class="token property">&quot;controller_epoch&quot;</span><span class="token operator">:</span> 表示kafka集群中的中央控制器选举次数<span class="token punctuation">,</span>
	<span class="token property">&quot;leader&quot;</span><span class="token operator">:</span> 表示该partition选举leader的brokerId<span class="token punctuation">,</span>
	<span class="token property">&quot;version&quot;</span><span class="token operator">:</span> 版本编号默认为<span class="token number">1</span><span class="token punctuation">,</span>
	<span class="token property">&quot;leader_epoch&quot;</span><span class="token operator">:</span> 该partition leader选举次数<span class="token punctuation">,</span>
	<span class="token property">&quot;isr&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>同步副本组brokerId列表<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
# Example<span class="token operator">:</span>
<span class="token punctuation">{</span>
	<span class="token property">&quot;controller_epoch&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
	<span class="token property">&quot;leader&quot;</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
	<span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
	<span class="token property">&quot;leader_epoch&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
	<span class="token property">&quot;isr&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-2-3-broker注册信息" tabindex="-1"><a class="header-anchor" href="#_1-2-3-broker注册信息" aria-hidden="true">#</a> 1.2.3 Broker注册信息</h4><blockquote><p>/brokers/ids/[0...N]</p></blockquote><p>每个broker的配置文件中都需要指定一个数字类型的id(全局不可重复),此节点为临时znode(EPHEMERAL)</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># Schema:
{
    &quot;jmx_port&quot;: jmx端口号,
    &quot;timestamp&quot;: kafka broker初始启动时的时间戳,
    &quot;host&quot;: 主机名或ip地址,
    &quot;version&quot;: 版本编号默认为1,
    &quot;port&quot;: kafka broker的服务端端口号,由server.properties中参数port确定
}
 
# Example:
{
    &quot;jmx_port&quot;: -1,
    &quot;timestamp&quot;:&quot;1525741823119&quot;
    &quot;version&quot;: 1,
    &quot;host&quot;: &quot;hadoop1&quot;,
    &quot;port&quot;: 9092
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-2-4-controller-epoch" tabindex="-1"><a class="header-anchor" href="#_1-2-4-controller-epoch" aria-hidden="true">#</a> 1.2.4 Controller epoch</h4><blockquote><p>/controller_epoch --&gt; int (epoch)</p></blockquote><p>此值为一个数字,kafka集群中第一个broker第一次启动时为1，以后只要集群中center controller中央控制器所在broker变更或挂掉，就会重新选举新的center controller，每次center controller变更controller_epoch值就会 + 1;</p><h4 id="_1-2-5-controller注册信息" tabindex="-1"><a class="header-anchor" href="#_1-2-5-controller注册信息" aria-hidden="true">#</a> 1.2.5 Controller注册信息</h4><blockquote><p>/controller -&gt; int (broker id of the controller)</p></blockquote><p>存储center controller中央控制器所在kafka broker的信息</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># Schema:
{
    &quot;version&quot;: 版本编号默认为1,
    &quot;brokerid&quot;: kafka集群中broker唯一编号,
    &quot;timestamp&quot;: kafka broker中央控制器变更时的时间戳
}
 
# Example:
{
    &quot;version&quot;: 1,
    &quot;brokerid&quot;: 0,
    &quot;timestamp&quot;: &quot;1525741822769&quot;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-2-6-consumer均衡算法" tabindex="-1"><a class="header-anchor" href="#_1-2-6-consumer均衡算法" aria-hidden="true">#</a> 1.2.6 Consumer均衡算法</h4><p>当一个group中,有consumer加入或者离开时,会触发partitions均衡.均衡的最终目的,是提升topic的并发消费能力.</p><ol><li>假如topic1,具有如下partitions: P0,P1,P2,P3</li><li>加入group中,有如下consumer: C0,C1</li><li>首先根据partition索引号对partitions排序: P0,P1,P2,P3</li><li>根据(consumer.id + &#39;-&#39;+ thread序号)排序: C0,C1</li><li>计算倍数: M = [P0,P1,P2,P3].size / [C0,C1].size,本例值M=2(向上取整)</li><li>然后依次分配partitions: C0 = [P0,P1],C1=[P2,P3],即Ci = [P(i * M),P((i + 1) * M -1)]</li></ol><h4 id="_1-2-7-consumer注册信息" tabindex="-1"><a class="header-anchor" href="#_1-2-7-consumer注册信息" aria-hidden="true">#</a> 1.2.7 Consumer注册信息</h4><blockquote><p>/consumers/[groupId]/ids/[consumerIdString]</p></blockquote><p>每个consumer都有一个唯一的ID(consumerId可以通过配置文件指定,也可以由系统生成),此id用来标记消费者信息.</p><p>是一个临时的znode,此节点的值为请看consumerIdString产生规则,即表示此consumer目前所消费的topic + partitions列表.</p><p>consumerId产生规则：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> consumerUuid <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>consumerId<span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> config<span class="token punctuation">.</span>consumerId<span class="token punctuation">)</span>
  consumerUuid <span class="token operator">=</span> consumerId<span class="token punctuation">;</span>
<span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token class-name">String</span> uuid <span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  consumerUuid <span class="token operator">=</span> <span class="token string">&quot;%s-%d-%s&quot;</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>
    <span class="token class-name">InetAddress</span><span class="token punctuation">.</span>getLocalHost<span class="token punctuation">.</span>getHostName<span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">.</span>currentTimeMillis<span class="token punctuation">,</span>
    uuid<span class="token punctuation">.</span><span class="token function">getMostSignificantBits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toHexString<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token punctuation">}</span>
 <span class="token class-name">String</span> consumerIdString <span class="token operator">=</span> config<span class="token punctuation">.</span>groupId <span class="token operator">+</span> <span class="token string">&quot;_&quot;</span> <span class="token operator">+</span> consumerUuid<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>Schema<span class="token operator">:</span>
<span class="token punctuation">{</span>
    <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> 版本编号默认为<span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token property">&quot;subscription&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">//订阅topic列表</span>
    	<span class="token property">&quot;topic名称&quot;</span><span class="token operator">:</span> consumer中topic消费者线程数
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;pattern&quot;</span><span class="token operator">:</span> <span class="token string">&quot;static&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;timestamp&quot;</span><span class="token operator">:</span> <span class="token string">&quot;consumer启动时的时间戳&quot;</span>
<span class="token punctuation">}</span>
 
Example<span class="token operator">:</span>
<span class="token punctuation">{</span>
    <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token property">&quot;subscription&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    	<span class="token property">&quot;topic2&quot;</span><span class="token operator">:</span> <span class="token number">1</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;pattern&quot;</span><span class="token operator">:</span> <span class="token string">&quot;white_list&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;timestamp&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1525747915336&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-2-8-consumer-owner" tabindex="-1"><a class="header-anchor" href="#_1-2-8-consumer-owner" aria-hidden="true">#</a> 1.2.8 Consumer owner</h4><blockquote><p>/consumers/[groupId]/owners/[topic]/[partitionId] -&gt; consumerIdString + threadId索引编号</p></blockquote><p>a) 首先进行&quot;Consumer Id注册&quot;;</p><p>b) 然后在&quot;Consumer id 注册&quot;节点下注册一个watch用来监听当前group中其他consumer的&quot;退出&quot;和&quot;加入&quot;;只要此znode path下节点列表变更,都会触发此group下consumer的负载均衡.(比如一个consumer失效,那么其他consumer接管partitions).</p><p>c) 在&quot;Broker id 注册&quot;节点下,注册一个watch用来监听broker的存活情况;如果broker列表变更,将会触发所有的groups下的consumer重新balance.</p><h4 id="_1-2-9-consumer-offset" tabindex="-1"><a class="header-anchor" href="#_1-2-9-consumer-offset" aria-hidden="true">#</a> 1.2.9 Consumer offset</h4><blockquote><p>/consumers/[groupId]/offsets/[topic]/[partitionId] -&gt; long (offset)</p></blockquote><p>用来跟踪每个consumer目前所消费的partition中最大的offset</p><p>此znode为持久节点,可以看出offset跟group_id有关,以表明当消费者组(consumer group)中一个消费者失效,</p><p>重新触发balance,其他consumer可以继续消费.</p><h3 id="_1-3-kafka-broker-总体工作流程" tabindex="-1"><a class="header-anchor" href="#_1-3-kafka-broker-总体工作流程" aria-hidden="true">#</a> 1.3 Kafka Broker 总体工作流程</h3><p><img src="`+o+'" alt="image-20230501193646378"></p><h3 id="_1-4-broker重要参数" tabindex="-1"><a class="header-anchor" href="#_1-4-broker重要参数" aria-hidden="true">#</a> 1.4 Broker重要参数</h3><table><thead><tr><th>参数名称</th><th>描述</th></tr></thead><tbody><tr><td>replica.lag.time.max.ms</td><td>ISR 中，如果 Follower 长时间未向 Leader 发送通信请求或同步数据，则该 Follower 将被踢出 ISR。该时间阈值，默认 30s。</td></tr><tr><td>auto.leader.rebalance.enable</td><td>默认是 true。 自动 Leader Partition 平衡。</td></tr><tr><td>leader.imbalance.per.broker.percentage</td><td>默认是 10%。每个 broker 允许的不平衡的 leader的比率。如果每个 broker 超过了这个值，控制器会触发 leader 的平衡。</td></tr><tr><td>leader.imbalance.check.interval.seconds</td><td>默认值 300 秒。检查 leader 负载是否平衡的间隔时间。</td></tr><tr><td>log.segment.bytes</td><td>Kafka 中 log 日志是分成一块块存储的，此配置是指 log 日志划分成块的大小，默认值 1G。</td></tr><tr><td>log.index.interval.bytes</td><td>默认 4kb，kafka 里面每当写入了 4kb 大小的日志（.log），然后就往 index 文件里面记录一个索引。</td></tr><tr><td>log.retention.hours</td><td>Kafka 中数据保存的时间，默认 7 天。</td></tr><tr><td>log.retention.minutes</td><td>Kafka 中数据保存的时间，分钟级别，默认关闭。</td></tr><tr><td>log.retention.ms</td><td>Kafka 中数据保存的时间，毫秒级别，默认关闭。</td></tr><tr><td>log.retention.check.interval.ms</td><td>检查数据是否保存超时的间隔，默认是 5 分钟。</td></tr><tr><td>log.retention.bytes</td><td>默认等于-1，表示无穷大。超过设置的所有日志总大小，删除最早的 segment。</td></tr><tr><td>log.cleanup.policy</td><td>默认是 delete，表示所有数据启用删除策略；如果设置值为 compact，表示所有数据启用压缩策略。</td></tr><tr><td>num.io.threads</td><td>默认是 8。负责写磁盘的线程数。整个参数值要占总核数的 50%。</td></tr><tr><td>num.replica.fetchers</td><td>副本拉取线程数，这个参数占总核数的 50%的 1/3</td></tr><tr><td>num.network.threads</td><td>默认是 3。数据传输线程数，这个参数占总核数的50%的 2/3 。</td></tr><tr><td>log.flush.interval.messages</td><td>强制页缓存刷写到磁盘的条数，默认是 long 的最大值，9223372036854775807。一般不建议修改，交给系统自己管理。</td></tr><tr><td>log.flush.interval.ms</td><td>每隔多久，刷数据到磁盘，默认是 null。一般不建议修改，交给系统自己管理。</td></tr></tbody></table>',49),i=[r];function c(l,u){return s(),a("div",null,i)}const m=n(p,[["render",c],["__file","kafka-broker.html.vue"]]);export{m as default};
