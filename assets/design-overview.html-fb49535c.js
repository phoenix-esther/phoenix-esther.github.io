const l=JSON.parse('{"key":"v-627fe3d7","path":"/quality/design-mode/design-overview.html","title":"设计模式概述","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"一、软件设计模式的产生背景","slug":"一、软件设计模式的产生背景","link":"#一、软件设计模式的产生背景","children":[]},{"level":2,"title":"二、软件设计模式的概念","slug":"二、软件设计模式的概念","link":"#二、软件设计模式的概念","children":[]},{"level":2,"title":"三、学习设计模式的必要性","slug":"三、学习设计模式的必要性","link":"#三、学习设计模式的必要性","children":[]},{"level":2,"title":"四、设计模式分类","slug":"四、设计模式分类","link":"#四、设计模式分类","children":[]},{"level":2,"title":"五、UML图","slug":"五、uml图","link":"#五、uml图","children":[{"level":3,"title":"5.1 类图概述","slug":"_5-1-类图概述","link":"#_5-1-类图概述","children":[]},{"level":3,"title":"5.2 类图的作用","slug":"_5-2-类图的作用","link":"#_5-2-类图的作用","children":[]},{"level":3,"title":"5.3 类图表示法","slug":"_5-3-类图表示法","link":"#_5-3-类图表示法","children":[]}]},{"level":2,"title":"六、设计模式的六大原则","slug":"六、设计模式的六大原则","link":"#六、设计模式的六大原则","children":[{"level":3,"title":"6.1、单一职责原则","slug":"_6-1、单一职责原则","link":"#_6-1、单一职责原则","children":[]},{"level":3,"title":"6.2、里式替换原则","slug":"_6-2、里式替换原则","link":"#_6-2、里式替换原则","children":[]},{"level":3,"title":"6.3、依赖倒置原则","slug":"_6-3、依赖倒置原则","link":"#_6-3、依赖倒置原则","children":[]},{"level":3,"title":"6.4、接口隔离原则","slug":"_6-4、接口隔离原则","link":"#_6-4、接口隔离原则","children":[]},{"level":3,"title":"6.5、迪米特法则","slug":"_6-5、迪米特法则","link":"#_6-5、迪米特法则","children":[]},{"level":3,"title":"6.6、开闭原则","slug":"_6-6、开闭原则","link":"#_6-6、开闭原则","children":[]},{"level":3,"title":"6.7、合成复用原则（总结）","slug":"_6-7、合成复用原则-总结","link":"#_6-7、合成复用原则-总结","children":[]}]},{"level":2,"title":"七、设计模式分类","slug":"七、设计模式分类","link":"#七、设计模式分类","children":[]},{"level":2,"title":"八、创建者模式对比","slug":"八、创建者模式对比","link":"#八、创建者模式对比","children":[{"level":3,"title":"1、工厂方法模式VS建造者模式","slug":"_1、工厂方法模式vs建造者模式","link":"#_1、工厂方法模式vs建造者模式","children":[]},{"level":3,"title":"2、抽象工厂模式VS建造者模式","slug":"_2、抽象工厂模式vs建造者模式","link":"#_2、抽象工厂模式vs建造者模式","children":[]}]}],"git":{"createdTime":1653582123000,"updatedTime":1673767263000,"contributors":[{"name":"xuliang","email":"895252461@qq.com","commits":3},{"name":"诗人都藏在水底","email":"895252461@qq.com","commits":1}]},"readingTime":{"minutes":23.83,"words":7150},"filePathRelative":"quality/design-mode/design-overview.md","localizedDate":"2022年5月27日","excerpt":"<h1> 设计模式概述</h1>\\n<p>设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</p>\\n<h2> 一、软件设计模式的产生背景</h2>\\n<p>\\"设计模式\\"最初并不是出现在软件设计中，而是被用于建筑领域的设计中。</p>\\n<p>1977年美国著名建筑大师、加利福尼亚大学伯克利分校环境结构中心主任<code>克里斯托夫·亚历山大（Christopher Alexander）</code>在他的著作《建筑模式语言：城镇、建筑、构造》中描述了一些常见的建筑设计问题，并提出了 253 种关于对城镇、邻里、住宅、花园和房间等进行设计的基本模式。</p>"}');export{l as data};
