const e=JSON.parse('{"key":"v-1f8b9517","path":"/quality/design-mode/design-flyweight.html","title":"享元模式","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"一、概述","slug":"一、概述","link":"#一、概述","children":[]},{"level":2,"title":"二、结构","slug":"二、结构","link":"#二、结构","children":[]},{"level":2,"title":"三、案例实现","slug":"三、案例实现","link":"#三、案例实现","children":[]},{"level":2,"title":"四、优缺点和使用场景","slug":"四、优缺点和使用场景","link":"#四、优缺点和使用场景","children":[]},{"level":2,"title":"五、JDK源码解析","slug":"五、jdk源码解析","link":"#五、jdk源码解析","children":[]}],"git":{"createdTime":1673767263000,"updatedTime":1673767263000,"contributors":[{"name":"xuliang","email":"895252461@qq.com","commits":1}]},"readingTime":{"minutes":5.21,"words":1564},"filePathRelative":"quality/design-mode/design-flyweight.md","localizedDate":"2023年1月15日","excerpt":"<h1> 享元模式</h1>\\n<h2> 一、概述</h2>\\n<p><strong>定义：</strong></p>\\n<p>​\\t运用共享技术来有效地支持大量细粒度对象的复用。它通过共享已经存在的对象来大幅度减少需要创建的对象数量、避免大量相似对象的开销，从而提高系统资源的利用率。</p>\\n<h2> 二、结构</h2>\\n<p>享元（Flyweight ）模式中存在以下两种状态：</p>\\n<ol>\\n<li>内部状态，即不会随着环境的改变而改变的可共享部分。</li>\\n<li>外部状态，指随环境改变而改变的不可以共享的部分。享元模式的实现要领就是区分应用中的这两种状态，并将外部状态外部化。</li>\\n</ol>"}');export{e as data};
