const e=JSON.parse('{"key":"v-fa408bda","path":"/quality/docker/docker.html","title":"Docker 详解","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"一、Docker简介","slug":"一、docker简介","link":"#一、docker简介","children":[{"level":3,"title":"1.1 Docker是什么？","slug":"_1-1-docker是什么","link":"#_1-1-docker是什么","children":[]},{"level":3,"title":"1.2 容器与虚拟机比较","slug":"_1-2-容器与虚拟机比较","link":"#_1-2-容器与虚拟机比较","children":[]},{"level":3,"title":"1.3 docker底层实现","slug":"_1-3-docker底层实现","link":"#_1-3-docker底层实现","children":[]}]},{"level":2,"title":"二、Docker 安装","slug":"二、docker-安装","link":"#二、docker-安装","children":[]},{"level":2,"title":"三、Docker 常用命令","slug":"三、docker-常用命令","link":"#三、docker-常用命令","children":[{"level":3,"title":"3.1 帮助启动类命令","slug":"_3-1-帮助启动类命令","link":"#_3-1-帮助启动类命令","children":[]},{"level":3,"title":"3.2 镜像命令","slug":"_3-2-镜像命令","link":"#_3-2-镜像命令","children":[]},{"level":3,"title":"3.3 容器命令","slug":"_3-3-容器命令","link":"#_3-3-容器命令","children":[]}]},{"level":2,"title":"四、Docker镜像","slug":"四、docker镜像","link":"#四、docker镜像","children":[{"level":3,"title":"4.1 Docker镜像是什么","slug":"_4-1-docker镜像是什么","link":"#_4-1-docker镜像是什么","children":[]},{"level":3,"title":"4.2 重点概念","slug":"_4-2-重点概念","link":"#_4-2-重点概念","children":[]},{"level":3,"title":"4.3 Docker镜像操作案例","slug":"_4-3-docker镜像操作案例","link":"#_4-3-docker镜像操作案例","children":[]}]},{"level":2,"title":"五、数据容器卷","slug":"五、数据容器卷","link":"#五、数据容器卷","children":[{"level":3,"title":"5.1 什么是容器数据卷","slug":"_5-1-什么是容器数据卷","link":"#_5-1-什么是容器数据卷","children":[]},{"level":3,"title":"5.2 为什么需要容器数据卷","slug":"_5-2-为什么需要容器数据卷","link":"#_5-2-为什么需要容器数据卷","children":[]},{"level":3,"title":"5.3 数据卷持久化的三种方式比较","slug":"_5-3-数据卷持久化的三种方式比较","link":"#_5-3-数据卷持久化的三种方式比较","children":[]},{"level":3,"title":"5.4 数据的覆盖问题","slug":"_5-4-数据的覆盖问题","link":"#_5-4-数据的覆盖问题","children":[]},{"level":3,"title":"5.5 使用数据卷","slug":"_5-5-使用数据卷","link":"#_5-5-使用数据卷","children":[]},{"level":3,"title":"5.6 数据卷容器","slug":"_5-6-数据卷容器","link":"#_5-6-数据卷容器","children":[]}]},{"level":2,"title":"六、Docker Net","slug":"六、docker-net","link":"#六、docker-net","children":[{"level":3,"title":"6.1 docker网络","slug":"_6-1-docker网络","link":"#_6-1-docker网络","children":[]},{"level":3,"title":"6.2 常用基本命令","slug":"_6-2-常用基本命令","link":"#_6-2-常用基本命令","children":[]},{"level":3,"title":"6.3 Docker 的网络模型","slug":"_6-3-docker-的网络模型","link":"#_6-3-docker-的网络模型","children":[]}]},{"level":2,"title":"七、Dockerfile","slug":"七、dockerfile","link":"#七、dockerfile","children":[]},{"level":2,"title":"八、Docker Compose","slug":"八、docker-compose","link":"#八、docker-compose","children":[]}],"git":{"createdTime":1676449013000,"updatedTime":1697014956000,"contributors":[{"name":"诗人都藏在水底","email":"895252461@qq.com","commits":4},{"name":"xuliang","email":"895252461@qq.com","commits":3}]},"readingTime":{"minutes":24.39,"words":7316},"filePathRelative":"quality/docker/docker.md","localizedDate":"2023年2月15日","excerpt":"<h1> Docker 详解</h1>\\n<h2> 一、Docker简介</h2>\\n<h3> 1.1 Docker是什么？</h3>\\n<p>Docker是基于Go语言实现的云开源项目。</p>\\n<p>Docker的主要目标是“Build，Ship and Run Any App,Anywhere”，也就是通过对应用组件的封装、分发、部署、运行等生命周期的管理，使用户的APP（可以是一个WEB应用或数据库应用等等）及其运行环境能够做到“一次镜像，处处运行”。</p>\\n\\n<p>Linux容器技术的出现就解决了这样一个问题，而 Docker 就是在它的基础上发展过来的。将应用打成镜像，通过镜像成为运行在Docker容器上面的实例，而 Docker容器在任何操作系统上都是一致的，这就实现了跨平台、跨服务器。只需要一次配置好环境，换到别的机子上就可以一键部署好，大大简化了操作。</p>"}');export{e as data};
