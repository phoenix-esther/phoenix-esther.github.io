import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as i,c as p,a as n,b as s,d as t,e as a}from"./app-9aa256ea.js";const l="/assets/up-9307fefa65470e5c36ae6044631b5416aef-9692e028.png",r="/assets/up-c3c672a675d9b06f03ea29cb31f6ed5d012-0f168ae9.png",d="/assets/up-e9d8ae8fdd3b02b2279376303e3eae4cf2f-87544f1c.png",u="/assets/up-44d1ade26f0cb667425b0dd99d82666877f-8fe122aa.png",m="/assets/up-664780be9dfef73c12a3f163b349e7e54d8-5e4a64db.png",v="/assets/up-1b617cf7edda29c652a7661d4be3779ec85-2ce4fc57.png",b="/assets/up-0c6368478258f8b9f76b47fc1c85b02f13f-b3bde329.png",k="/assets/up-a493061fbd4b4066f9a4d91e91ff61e8c4e-d1c8001b.png",g="/assets/up-8cebcb82f5a8754fd1bb4bb3eb3c57dda2d-be53c4c1.png",f="/assets/up-baa09e51272baa384418cb2c82b9dfb079b-3b9f892a.png",h="/assets/up-68b1ee71e468ef8cf839230c07b64c45563-26459cca.png",y={},_=a(`<h1 id="spring-启动流程概览" tabindex="-1"><a class="header-anchor" href="#spring-启动流程概览" aria-hidden="true">#</a> Spring 启动流程概览</h1><h2 id="_1-spring-启动流程概览" tabindex="-1"><a class="header-anchor" href="#_1-spring-启动流程概览" aria-hidden="true">#</a> 1. spring 启动流程概览</h2><p>在前面 demo 的 <code>main()</code> 方法中，有这么一行：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span>
        <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token string">&quot;org.springframework.learn.demo01&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这短短的一行就是 spring 的整个启动流程了。上面的代码中，声明了一个 <code>ApplicationContext</code> 类型的对象 <code>context</code>，右边使用其子类 <code>AnnotationConfigApplicationContext</code> 实例化，并在构造方法中传入了包名 <code>org.springframework.learn.demo01</code>，这个包名就表明了接下来要扫描哪些包。</p>`,5),x=n("code",null,"ApplicationContext",-1),F=n("code",null,"ApplicationContext",-1),A={href:"https://my.oschina.net/funcy/blog/4597456",target:"_blank",rel:"noopener noreferrer"},B=a(`<p>进入到 <code>AnnotationConfigApplicationContext</code>，代码如下：</p><blockquote><p>AnnotationConfigApplicationContext#AnnotationConfigApplicationContext(String...)</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> basePackages<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token comment">// 1. 调用无参构造函数，会先调用父类GenericApplicationContext的构造函数</span>
     <span class="token comment">// 2. 父类的构造函数里面就是初始化DefaultListableBeanFactory，并且赋值给beanFactory</span>
     <span class="token comment">// 3. 本类的构造函数里面，初始化了一个读取器：AnnotatedBeanDefinitionReader read，</span>
     <span class="token comment">//    一个扫描器ClassPathBeanDefinitionScanner scanner</span>
     <span class="token comment">// 4. 这个scanner，就是下面 scan(basePackages) 调用的对象</span>
     <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

     <span class="token comment">//对传入的包进行扫描，扫描完成后，会得到一个 BeanDefinition 的集合</span>
     <span class="token function">scan</span><span class="token punctuation">(</span>basePackages<span class="token punctuation">)</span><span class="token punctuation">;</span>

     <span class="token comment">//启动spring，在这里完成spring容器的初始化操作，</span>
     <span class="token comment">//包括bean的实例化、属性注入，将bean保存到spring容器中等</span>
     <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个类就三行，相关操作都已在代码中注释了，这里稍微再总结下，这段代码主要做了三件事：</p><ol><li>调用无参构造，进行属性初始化</li><li>进行包扫描，得到 BeanDefinition</li><li>启用 spring 容器。</li></ol><p>接着，我们再来看看 spring 启动流程中，做了哪些事：</p><blockquote><p>AbstractApplicationContext#refresh</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalStateException</span> <span class="token punctuation">{</span>
    <span class="token comment">// 使用synchronized是为了避免refresh() 还没结束，再次发起启动或者销毁容器引起的冲突</span>
    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>startupShutdownMonitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 做一些准备工作，记录容器的启动时间、标记“已启动”状态、检查环境变量等</span>
        <span class="token function">prepareRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 初始化BeanFactory容器、注册BeanDefinition, 最终获得了DefaultListableBeanFactory</span>
        <span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory <span class="token operator">=</span> <span class="token function">obtainFreshBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 还是一些准备工作:</span>
        <span class="token comment">// 1. 设置了一个类加载器</span>
        <span class="token comment">// 2. 设置了bean表达式解析器</span>
        <span class="token comment">// 3. 添加了属性编辑器的支持</span>
        <span class="token comment">// 4. 添加了一个后置处理器：ApplicationContextAwareProcessor</span>
        <span class="token comment">// 5. 设置了一些忽略自动装配的接口</span>
        <span class="token comment">// 6. 设置了一些允许自动装配的接口，并且进行了赋值操作</span>
        <span class="token comment">// 7. 在容器中还没有XX的bean的时候，帮我们注册beanName为XX的singleton bean</span>
        <span class="token function">prepareBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// Spring的一个扩展点. 如果有Bean实现了BeanFactoryPostProcessor接口，</span>
            <span class="token comment">// 那么在容器初始化以后，Spring 会负责调用里面的 postProcessBeanFactory 方法。</span>
            <span class="token comment">// 具体的子类可以在这步的时候添加特殊的 BeanFactoryPostProcessor 的实现类，来做些事</span>
            <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 调用BeanFactoryPostProcessor各个实现类的postProcessBeanFactory(factory) 方法</span>
            <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 扩展点,注册 BeanPostProcessor 的实现类，注意不是BeanFactoryPostProcessor</span>
            <span class="token function">registerBeanPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 初始化当前 ApplicationContext 的 MessageSource，用在国际化操作中</span>
            <span class="token function">initMessageSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 这个方法主要为初始化当前 ApplicationContext 的事件广播器</span>
            <span class="token function">initApplicationEventMulticaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 这也是spring的一个扩展点</span>
            <span class="token function">onRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// Check for listener beans and register them.</span>
            <span class="token comment">// 注册事件监听器</span>
            <span class="token function">registerListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 初始化所有的 singleton beans</span>
            <span class="token function">finishBeanFactoryInitialization</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 完成启动，</span>
            <span class="token function">finishRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeansException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isWarnEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;Exception encountered during context initialization - &quot;</span> <span class="token operator">+</span>
                    <span class="token string">&quot;cancelling refresh attempt: &quot;</span> <span class="token operator">+</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// Destroy already created singletons to avoid dangling resources.</span>
            <span class="token comment">// 销毁已经初始化的的Bean</span>
            <span class="token function">destroyBeans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// Reset &#39;active&#39; flag.</span>
            <span class="token comment">// 重置 &#39;active&#39; 状态</span>
            <span class="token function">cancelRefresh</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// Propagate exception to caller.</span>
            <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token comment">// Reset common introspection caches in Spring&#39;s core, since we</span>
            <span class="token comment">// might not ever need metadata for singleton beans anymore...</span>
            <span class="token comment">// 清除缓存</span>
            <span class="token function">resetCommonCaches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个方法虽然代码不多，但包含了 spring bean 的整个创建过程，每个方法做了些什么，在代码中都有注释，这里就不赘述了。</p><p>实际上，<code>refresh()</code> 涵盖了 spring 整个创建 bean 的流程，在后面的文章中，我们也将重点展开这里面的方法来分析，在现阶段只需要大致了解这些方法做了什么事即可。</p><p>整个流程总结如下：</p><p><img src="`+l+'" alt="img"></p><h2 id="_2-spring-启动中-beanfactory-的变化" tabindex="-1"><a class="header-anchor" href="#_2-spring-启动中-beanfactory-的变化" aria-hidden="true">#</a> 2. Spring 启动中 <code>beanFactory</code> 的变化</h2><p>本文中的源码解读就到这里了，接下来我们来看看，spring 启动中 <code>beanFactory</code> 有些什么变化。</p>',14),C=n("code",null,"beanFactory",-1),P=n("code",null,"beanFactory",-1),w={href:"https://my.oschina.net/funcy/blog/4597529",target:"_blank",rel:"noopener noreferrer"},S=a('<p>我们将断点打在 <code>AnnotationConfigApplicationContext#AnnotationConfigApplicationContext(String...)</code> 的 <code>this()</code> 方法上，然后运行 demo01 的 <code>main()</code> 方法：</p><p><img src="'+r+'" alt="img"></p><p>此时的变量中，并没有 <code>beanFactory</code>，我们自己添加 <code>beanFactory</code> 到调度窗口的变量列表中：</p><p><img src="'+d+'" alt="img"></p><p>这样就能看到对应的值了：</p><p><img src="'+u+'" alt="img"></p><p>可以看到，此时的 <code>beanFactory</code> 为 null，表明 <code>beanFactory</code> 并未实例化，我们继续运行：</p><p><img src="'+m+'" alt="img"></p><p>当运行完 <code>this()</code> 后，发现 <code>beanFactory</code> 已经有值了，类型为 <code>DefaultListableBeanFactory</code>。但是，在查看 <code>beanFactory</code> 对象时，发现 <code>beanFactory</code> 的属性太多了，我们应该重点关注啥呢？</p><p><img src="'+v+'" alt="img"></p><p>我们这部分主要关注 spring bean 的创建，因此只需要关注 <code>beanFactory</code> 的两个属性就可以了：</p><ul><li>beanDefinitionMap：存放 beanDefinition 的 map.</li><li>singletonObjects：存放 spring bean 的 map，spring bean 创建后都存放在这里，也即直观上理解的 <code>spring 容器</code>.</li></ul>',12),j=n("code",null,"BeanDefinition",-1),D=n("code",null,"BeanDefinition",-1),q={href:"https://my.oschina.net/funcy/blog/4597536",target:"_blank",rel:"noopener noreferrer"},E=a('<p>我们手动添加变量，如下：</p><p><img src="'+b+'" alt="img"></p><p>可以看到，此时的 <code>beanDefinitionMap</code> 中已经有 4 个对象了，显然是在 <code>this()</code> 方法中添加的，关于这块我们后面会分析。</p><p>接着运行，发现 <code>beanDefinitionMap</code> 又多了两个：</p><p><img src="'+k+'" alt="img"></p><p>这里的 <code>beanObj1</code> 与 <code>beanObj2</code> 就是我们自己的类了，由此可以判断出 <strong>spring 就是在 <code>AnnotationConfigApplicationContext#scan</code> 方法中对包进行扫描的</strong>。</p><p>接下来，代码执行进入 <code>AbstractApplicationContext#refresh</code> 方法，我们一行行运行下去，发现运行到 <code>prepareBeanFactory(beanFactory);</code> 时，<code>singletonObjects</code> 中第一次出现了对象：</p><p><img src="'+g+'" alt="img"></p><p>可以看到，这里出现了 3 个类，基本都跟系统、环境相关，如 <code>environment</code> 是 spring 当前使用的环境 (<code>profile</code>)，<code>systemProperties</code> 当前系统的属性（操作系统、操作系统版本等）。</p><p>继续往下运行，发现代码运行到 <code>invokeBeanFactoryPostProcessors(beanFactory)</code> 时，又多了 4 个类：</p><p><img src="'+f+`" alt="img"></p><p>关于这几个类的作用，我们后面的文章中会分析，这里先不必管。继续往下运行，发现在 <code>registerBeanPostProcessors(beanFactory);</code> 中，又多了一个对象：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>internalAutowiredAnnotationProcessor
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里我们依旧不用管这个对象，接着运行下去，可以看到在运行 <code>initMessageSource()</code> 时，又多了一个对象：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>messageSource -&gt; {DelegatingMessageSource@1847} &quot;Empty MessageSource&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>显然，这个对象是用来处理国际化问题的，不过由于 demo01 中并没有用到国际化，所以这里显示 <code>Empty MessageSource</code>。继续运行，发现运行到 <code>initApplicationEventMulticaster();</code> 时，又多了一个对象：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>applicationEventMulticaster -&gt; {SimpleApplicationEventMulticaster@1869} 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>显然，这个对象是用来处理 <code>ApplicationContext</code> 的广播事件的，我们的 demo 中并没有用到，暂时不必理会。继续下去，发现在运行完 <code>finishBeanFactoryInitialization(beanFactory);</code>，<code>singletonObjects</code> 中终于出现了我们期待的对象：</p><p><img src="`+h+'" alt="img"></p><p>由此可见，对象就是在该方法中创建的。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ol><li>spring 包的描述：<code>AnnotationConfigApplicationContext#scan</code></li><li>spring bean 的创建：<code>AbstractApplicationContext#finishBeanFactoryInitialization</code></li></ol><p>本文主要是了解 spring 启动流程，从整体上把握 spring 启动过程中的 beanFactory 的变化。本文意在了解 spring 的整体启动流程，后续的分析中，我们将对这些流程进行展开分析。</p>',23);function M(L,R){const e=c("ExternalLinkIcon");return i(),p("div",null,[_,n("blockquote",null,[n("p",null,[s("这里我们接触到了 spring 的第一个组件："),x,s("，关于 "),F,s(" 的分析，可以参考我的文章 "),n("a",A,[s("spring 组件（一）：ApplicationContext"),t(e)]),s("。")])]),B,n("blockquote",null,[n("p",null,[C,s(" 是 spring 的重要组件之一，直译为 spring bean 工厂，是 spring 生产 bean 与保存 bean 的地方，关于 "),P,s(" 的详细分析，可以查看 "),n("a",w,[s("spring BeanFactory 分析"),t(e)]),s("。")])]),S,n("blockquote",null,[n("p",null,[j,s(" 是 spring 重要组件之一，为‘spring bean 的描述’，简单来说，就是说明了一个 spring bean 应该如何创建。关于 "),D,s(" 的详细分析，可以查看 "),n("a",q,[s("spring BeanDefinition 分析"),t(e)]),s("。")])]),E])}const O=o(y,[["render",M],["__file","starting-overview.html.vue"]]);export{O as default};
