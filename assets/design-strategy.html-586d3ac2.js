const e=JSON.parse('{"key":"v-090dda1d","path":"/quality/design-mode/design-strategy.html","title":"策略模式","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"适用的场景","slug":"适用的场景","link":"#适用的场景","children":[]},{"level":2,"title":"缺点","slug":"缺点","link":"#缺点","children":[]}],"git":{"createdTime":1657704523000,"updatedTime":1657704523000,"contributors":[{"name":"诗人都藏在水底","email":"895252461@qq.com","commits":1}]},"readingTime":{"minutes":1.25,"words":375},"filePathRelative":"quality/design-mode/design-strategy.md","localizedDate":"2022年7月13日","excerpt":"<h1> 策略模式</h1>\\n<p>策略模式定义了算法族，分别封装起来，让他们之间可以户型替换，此模式让算法的变化独立于使用算法的客户。</p>\\n<p>在使用策略模式进行设计开发时需要注意一些几点：</p>\\n<ul>\\n<li>找出应用中可能需要变化之处，把他们独立出来，不要和那些不需要变化的代码混在一起。例如某一个功能在不同的场景中会有不同的实现，那么这个功能就可以独立出来。</li>\\n<li>针对接口编程，而不是针对实现变成。就是分离出来的功能先定义一个接口，使用接口来编写代码。有利于程序的扩展和代码服用。</li>\\n<li>多用组合，少用继承。</li>\\n</ul>\\n<h2> 适用的场景</h2>"}');export{e as data};
