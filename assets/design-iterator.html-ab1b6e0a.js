const e=JSON.parse('{"key":"v-11905a02","path":"/quality/design-mode/design-iterator.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"迭代器模式","slug":"迭代器模式","link":"#迭代器模式","children":[{"level":3,"title":"6.8.1 概述","slug":"_6-8-1-概述","link":"#_6-8-1-概述","children":[]},{"level":3,"title":"6.8.2 结构","slug":"_6-8-2-结构","link":"#_6-8-2-结构","children":[]},{"level":3,"title":"6.8.3 案例实现","slug":"_6-8-3-案例实现","link":"#_6-8-3-案例实现","children":[]},{"level":3,"title":"6.8.4 优缺点","slug":"_6-8-4-优缺点","link":"#_6-8-4-优缺点","children":[]},{"level":3,"title":"6.8.5 使用场景","slug":"_6-8-5-使用场景","link":"#_6-8-5-使用场景","children":[]},{"level":3,"title":"6.8.6 JDK源码解析","slug":"_6-8-6-jdk源码解析","link":"#_6-8-6-jdk源码解析","children":[]}]}],"git":{"createdTime":1673767263000,"updatedTime":1673767263000,"contributors":[{"name":"xuliang","email":"895252461@qq.com","commits":1}]},"readingTime":{"minutes":3.81,"words":1143},"filePathRelative":"quality/design-mode/design-iterator.md","localizedDate":"2023年1月15日","excerpt":"<h2> 迭代器模式</h2>\\n<h3> 6.8.1 概述</h3>\\n<p><strong>定义：</strong></p>\\n<p>提供一个对象来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示。</p>\\n<h3> 6.8.2 结构</h3>\\n<p>迭代器模式主要包含以下角色：</p>\\n<ul>\\n<li>\\n<p>抽象聚合（Aggregate）角色：定义存储、添加、删除聚合元素以及创建迭代器对象的接口。</p>\\n</li>\\n<li>\\n<p>具体聚合（ConcreteAggregate）角色：实现抽象聚合类，返回一个具体迭代器的实例。</p>\\n</li>\\n<li>\\n<p>抽象迭代器（Iterator）角色：定义访问和遍历聚合元素的接口，通常包含 hasNext()、next() 等方法。</p>\\n</li>\\n<li>\\n<p>具体迭代器（Concretelterator）角色：实现抽象迭代器接口中所定义的方法，完成对聚合对象的遍历，记录遍历的当前位置。</p>\\n</li>\\n</ul>"}');export{e as data};
