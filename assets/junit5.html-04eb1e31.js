import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as s,e as t}from"./app-e53dd85b.js";const e={},p=t(`<h1 id="junit5使用" tabindex="-1"><a class="header-anchor" href="#junit5使用" aria-hidden="true">#</a> JUnit5使用</h1><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h2><p>JUnit5由三个不同的子项目组成：</p><p>JUnit 5 = JUnit Platform + JUnit Jupiter + JUnit Vintage</p><h3 id="引入" tabindex="-1"><a class="header-anchor" href="#引入" aria-hidden="true">#</a> 引入</h3><p>基于maven的引入：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit-bom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.8.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="junit基础" tabindex="-1"><a class="header-anchor" href="#junit基础" aria-hidden="true">#</a> Junit基础</h2><p>首先来一个hello world</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JUnitTest</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="注解" tabindex="-1"><a class="header-anchor" href="#注解" aria-hidden="true">#</a> 注解</h3><p>JUnit Jupiter支持一下注解来配置测试和扩展框架</p><p>核心注解都位于<code>junit-jupiter-api</code>的<code>org.junit.jupiter.api</code>包中。</p><table><thead><tr><th>注解</th><th>描述</th></tr></thead><tbody><tr><td>@Test</td><td></td></tr><tr><td>@ParameterizedTest</td><td></td></tr><tr><td>@RepeatedTest</td><td></td></tr><tr><td>@TestFactory</td><td></td></tr><tr><td>@TestTemplate</td><td></td></tr><tr><td>@TestClassOrder</td><td></td></tr><tr><td>@TestMethodOrder</td><td></td></tr><tr><td>@TestInstance</td><td></td></tr><tr><td>@DisplayName</td><td></td></tr><tr><td>@DisplayNameGeneration</td><td></td></tr><tr><td>@BeforeEach</td><td></td></tr><tr><td>@AfterEach</td><td></td></tr><tr><td>@BeforeAll</td><td></td></tr><tr><td>@AfterAll</td><td></td></tr><tr><td>@Nested</td><td></td></tr><tr><td>@Tag</td><td></td></tr><tr><td>@Disabled</td><td></td></tr><tr><td>@Timeout</td><td></td></tr><tr><td>@ExtendWith</td><td></td></tr><tr><td>@RegisterExtension</td><td></td></tr><tr><td>@TempDir</td><td></td></tr></tbody></table><h3 id="元注解和组合注解" tabindex="-1"><a class="header-anchor" href="#元注解和组合注解" aria-hidden="true">#</a> 元注解和组合注解</h3><p>junit中的注解可以当做元注解使用。这意味着你可以使用元标注的方式定义自己的组合注解，这一点类似于Spring中的注解派生类似。</p><h3 id="displayname" tabindex="-1"><a class="header-anchor" href="#displayname" aria-hidden="true">#</a> @DisplayName</h3><p>就是用来给测试类和测试方法起名字的，在生成测试报告时可以展示出来。</p><h3 id="displaynamegeneration" tabindex="-1"><a class="header-anchor" href="#displaynamegeneration" aria-hidden="true">#</a> @DisplayNameGeneration</h3><p>用于配置测试类或测试方法的名称生成器，如果配置了@DisplayName，则优先使用@DisplayName，否则通过配置的名称生成器来生成。</p><p>junit为我们为提供了几个模式实现，</p><table><thead><tr><th>显示名称生成器</th><th>行为</th></tr></thead><tbody><tr><td><code>Standard</code></td><td>匹配自 JUnit Jupiter 5.0 发布以来的标准显示名称生成行为。</td></tr><tr><td><code>Simple</code></td><td>删除没有参数的方法的尾括号。</td></tr><tr><td><code>ReplaceUnderscores</code></td><td>用空格替换下划线。</td></tr><tr><td><code>IndicativeSentences</code></td><td>通过连接测试名称和封闭类来生成完整的句子。</td></tr></tbody></table><h3 id="断言" tabindex="-1"><a class="header-anchor" href="#断言" aria-hidden="true">#</a> 断言</h3><p>Junit中提供了很多强大且好用的断言方法，这些方法在Assertions中定义。</p><p>TODO 断言中的内容，在这里补充一下。</p><h3 id="第三方断言库" tabindex="-1"><a class="header-anchor" href="#第三方断言库" aria-hidden="true">#</a> 第三方断言库</h3><h3 id="disabled" tabindex="-1"><a class="header-anchor" href="#disabled" aria-hidden="true">#</a> @Disabled</h3><p>禁用测试，就是取消运行某个测试类或测试方法。</p><h3 id="条件执行" tabindex="-1"><a class="header-anchor" href="#条件执行" aria-hidden="true">#</a> 条件执行</h3><p>根据注解条件来判断一个测试方法或测试类是否执行。</p><h4 id="enabledonos-disabledonos" tabindex="-1"><a class="header-anchor" href="#enabledonos-disabledonos" aria-hidden="true">#</a> @EnabledOnOs/@DisabledOnOs</h4><p>判定在特定操作系统上启用或禁用测试方法或测试类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@EnabledOnOs</span><span class="token punctuation">(</span><span class="token constant">MAC</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@EnabledOnOs</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token constant">LINUX</span><span class="token punctuation">,</span> <span class="token constant">MAC</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@DisabledOnOs</span><span class="token punctuation">(</span><span class="token constant">WINDOWS</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="判定java运行时环境" tabindex="-1"><a class="header-anchor" href="#判定java运行时环境" aria-hidden="true">#</a> 判定Java运行时环境</h4><p>@EnabledOnJre/@DisabledOnJre</p><p>@EnabledForJreRange/@DisabledForJreRange</p><h4 id="判定系统属性" tabindex="-1"><a class="header-anchor" href="#判定系统属性" aria-hidden="true">#</a> 判定系统属性</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token annotation punctuation">@EnabledIfSystemProperty</span><span class="token punctuation">(</span>named <span class="token operator">=</span> <span class="token string">&quot;os.arch&quot;</span><span class="token punctuation">,</span> matches <span class="token operator">=</span> <span class="token string">&quot;.*64.*&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">onlyOn64BitArchitectures</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Test</span>
<span class="token annotation punctuation">@DisabledIfSystemProperty</span><span class="token punctuation">(</span>named <span class="token operator">=</span> <span class="token string">&quot;ci-server&quot;</span><span class="token punctuation">,</span> matches <span class="token operator">=</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">notOnCiServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="判定环境变量" tabindex="-1"><a class="header-anchor" href="#判定环境变量" aria-hidden="true">#</a> 判定环境变量</h4><p>matchs属性中可以使用正则</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token annotation punctuation">@EnabledIfEnvironmentVariable</span><span class="token punctuation">(</span>named <span class="token operator">=</span> <span class="token string">&quot;ENV&quot;</span><span class="token punctuation">,</span> matches <span class="token operator">=</span> <span class="token string">&quot;staging-server&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">onlyOnStagingServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Test</span>
<span class="token annotation punctuation">@DisabledIfEnvironmentVariable</span><span class="token punctuation">(</span>named <span class="token operator">=</span> <span class="token string">&quot;ENV&quot;</span><span class="token punctuation">,</span> matches <span class="token operator">=</span> <span class="token string">&quot;.*development.*&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">notOnDeveloperWorkstation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="自定义配置" tabindex="-1"><a class="header-anchor" href="#自定义配置" aria-hidden="true">#</a> 自定义配置</h4><p>@EnabledIf/@DisabledIf会基于方法返回的布尔来启用或禁用测试用例。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token annotation punctuation">@EnabledIf</span><span class="token punctuation">(</span><span class="token string">&quot;customCondition&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">enabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Test</span>
<span class="token annotation punctuation">@DisabledIf</span><span class="token punctuation">(</span><span class="token string">&quot;customCondition&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">disabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token keyword">boolean</span> <span class="token function">customCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果方法位于测试一类之外，则需要指定全限定类名来引用。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">example</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span>condition<span class="token punctuation">.</span></span><span class="token class-name">EnabledIf</span></span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">ExternalCustomConditionDemo</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token annotation punctuation">@EnabledIf</span><span class="token punctuation">(</span><span class="token string">&quot;example.ExternalCondition#customCondition&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">void</span> <span class="token function">enabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">ExternalCondition</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">customCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tag" tabindex="-1"><a class="header-anchor" href="#tag" aria-hidden="true">#</a> @Tag</h3><p>该注解主要用于对类或方法进行一个标记，通常需要配合其他注解一起使用。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Tag</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Tag</span><span class="token punctuation">(</span><span class="token string">&quot;fast&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Tag</span><span class="token punctuation">(</span><span class="token string">&quot;model&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">TaggingDemo</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token annotation punctuation">@Tag</span><span class="token punctuation">(</span><span class="token string">&quot;taxes&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">void</span> <span class="token function">testingTaxCalculation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="测试的执行顺序" tabindex="-1"><a class="header-anchor" href="#测试的执行顺序" aria-hidden="true">#</a> 测试的执行顺序</h3><p>通常情况下不建议指定测试的执行顺序。除非必要！</p><h4 id="方法的执行顺序" tabindex="-1"><a class="header-anchor" href="#方法的执行顺序" aria-hidden="true">#</a> 方法的执行顺序</h4><p>通过@TestMethodOrder注解来指定测试执行顺序，junit给我们提供了几个默认的实现：</p><ul><li><p>MethodOrderer.DisplayName：根据显示名称按字母数字对测试方法进行排序（请参阅显示名称生成优先规则）</p></li><li><p>MethodOrderer.MethodName：根据名称和形式参数列表按字母数字对测试方法进行排序</p></li><li><p>MethodOrderer.OrderAnnotation：根据通过注解指定的值对测试方法进行数字排序@Order</p></li><li><p>MethodOrderer.Random:伪随机排序测试方法并支持自定义种子的配置</p></li><li><p>MethodOrderer.Alphanumeric：根据名称和形式参数列表按字母数字对测试方法进行排序；</p></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">MethodOrderer</span><span class="token punctuation">.</span><span class="token class-name">OrderAnnotation</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Order</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">TestMethodOrder</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@TestMethodOrder</span><span class="token punctuation">(</span><span class="token class-name">OrderAnnotation</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">OrderedTestsDemo</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">void</span> <span class="token function">nullValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// perform assertions against null values</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token keyword">void</span> <span class="token function">emptyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// perform assertions against empty values</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
    <span class="token keyword">void</span> <span class="token function">validValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// perform assertions against valid values</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="类的执行顺序" tabindex="-1"><a class="header-anchor" href="#类的执行顺序" aria-hidden="true">#</a> 类的执行顺序</h4><p>略</p><h3 id="测试实例的生命周期" tabindex="-1"><a class="header-anchor" href="#测试实例的生命周期" aria-hidden="true">#</a> 测试实例的生命周期</h3><p>默认情况下，Junit在执行每个测试方法之前，都会创建一个全新的实例。这主要是为了避免由于可变测试实例状态导致意外情况发生。如果希望使用同一个实例运行所有测试方法，可以使用<code>@TestInstance</code>注解，该注解中需要提供一个参数，Lifecycle.PER_CLASS 表示只创建一个实例来执行所有测试，Lifecycle.PER_METHOD表示执行每个测试方法都创建一个实例。</p><h4 id="aftereach-beforeeach" tabindex="-1"><a class="header-anchor" href="#aftereach-beforeeach" aria-hidden="true">#</a> @AfterEach/@BeforeEach</h4><p>在每个测试方法开始前/结束后，执行该方法</p><h4 id="afterall-beforeall" tabindex="-1"><a class="header-anchor" href="#afterall-beforeall" aria-hidden="true">#</a> @AfterAll/@BeforeAll</h4><p>在每个实例初始化后，销毁前执行一次。这里需要注意一下，如果生命周期指定为了Lifecycle.PER_METHOD，则方法必须为static方法，如果是其他的，则没有此要求。</p><h3 id="构造函数和方法的依赖注入" tabindex="-1"><a class="header-anchor" href="#构造函数和方法的依赖注入" aria-hidden="true">#</a> 构造函数和方法的依赖注入</h3><p>从Junit5开始，支持一些构造函数和方法的依赖注入。目前有三个内置的解析器</p><ul><li>TestInfoParameterResolver：用于主持TestInfo类型的参数</li><li>RepetitionInfoParameterResolver：用于支持RepetitionInfo类型参数</li><li>TestReporterParameterResolver：用于支持TextReporter类型参数</li></ul><p>测试的时候，通过构造函数进行注入，会报错，在测试方法上进行注入则没有问题。</p><h3 id="测试接口和默认方法" tabindex="-1"><a class="header-anchor" href="#测试接口和默认方法" aria-hidden="true">#</a> 测试接口和默认方法</h3><h3 id="重复测试" tabindex="-1"><a class="header-anchor" href="#重复测试" aria-hidden="true">#</a> 重复测试</h3><p>@RepeatedTest， 该注解中有两个属性，value指定重复执行次数，name用来指定展示信息的格式。在重复测试用例中，我们还可以注入一个RepetitionInfo类型的参数，来查询当前重复次数以及重复总数的信息。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestJunit</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@RepeatedTest</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token class-name">RepeatedTest</span><span class="token punctuation">.</span><span class="token constant">LONG_DISPLAY_NAME</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token class-name">TestReporter</span> reporter<span class="token punctuation">,</span> <span class="token class-name">TestInfo</span> info<span class="token punctuation">,</span> <span class="token class-name">RepetitionInfo</span> repetitionInfo<span class="token punctuation">)</span><span class="token punctuation">{</span>
        reporter<span class="token punctuation">.</span><span class="token function">publishEntry</span><span class="token punctuation">(</span>repetitionInfo<span class="token punctuation">.</span><span class="token function">getCurrentRepetition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="参数化测试" tabindex="-1"><a class="header-anchor" href="#参数化测试" aria-hidden="true">#</a> 参数化测试</h3><p>@ParameterizedTest</p><p>针对同一个测试方法，我们可能会需要不同的测试参数时，就可以使用该注解。</p><h4 id="参数来源" tabindex="-1"><a class="header-anchor" href="#参数来源" aria-hidden="true">#</a> 参数来源</h4><h5 id="valuesource" tabindex="-1"><a class="header-anchor" href="#valuesource" aria-hidden="true">#</a> @ValueSource</h5><p>最简单的参数来源</p><h5 id="nullsource" tabindex="-1"><a class="header-anchor" href="#nullsource" aria-hidden="true">#</a> @NullSource</h5><p>传入一个null值</p><h5 id="emptysource" tabindex="-1"><a class="header-anchor" href="#emptysource" aria-hidden="true">#</a> @EmptySource</h5><p>传入一个空值，该注解主要针对String，List，Set，Map，数组等类型。</p><h5 id="nullandemptysource" tabindex="-1"><a class="header-anchor" href="#nullandemptysource" aria-hidden="true">#</a> @NullAndEmptySource</h5><p>@NullSource和@EmptySource的组合</p><h5 id="enumsource" tabindex="-1"><a class="header-anchor" href="#enumsource" aria-hidden="true">#</a> @EnumSource</h5><p>枚举参数，会遍历枚举中的值进行传入</p><h5 id="methodsource" tabindex="-1"><a class="header-anchor" href="#methodsource" aria-hidden="true">#</a> @MethodSource</h5><p>指定一个方法，并返回参数集合</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@ParameterizedTest</span>
<span class="token annotation punctuation">@MethodSource</span><span class="token punctuation">(</span><span class="token string">&quot;stringProvider&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">testWithExplicitLocalMethodSource</span><span class="token punctuation">(</span><span class="token class-name">String</span> argument<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assertNotNull</span><span class="token punctuation">(</span>argument<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">stringProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;banana&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="csvsource" tabindex="-1"><a class="header-anchor" href="#csvsource" aria-hidden="true">#</a> @CsvSource</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@ParameterizedTest</span>
<span class="token annotation punctuation">@CsvSource</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token string">&quot;apple,         1&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;banana,        2&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;&#39;lemon, lime&#39;, 0xF1&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;strawberry,    700_000&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">testWithCsvSource</span><span class="token punctuation">(</span><span class="token class-name">String</span> fruit<span class="token punctuation">,</span> <span class="token keyword">int</span> rank<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assertNotNull</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertNotEquals</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> rank<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="csvfilesource" tabindex="-1"><a class="header-anchor" href="#csvfilesource" aria-hidden="true">#</a> @CsvFileSource</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@ParameterizedTest</span>
<span class="token annotation punctuation">@CsvFileSource</span><span class="token punctuation">(</span>resources <span class="token operator">=</span> <span class="token string">&quot;/two-column.csv&quot;</span><span class="token punctuation">,</span> numLinesToSkip <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">testWithCsvFileSourceFromClasspath</span><span class="token punctuation">(</span><span class="token class-name">String</span> country<span class="token punctuation">,</span> <span class="token keyword">int</span> reference<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assertNotNull</span><span class="token punctuation">(</span>country<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertNotEquals</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> reference<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@ParameterizedTest</span>
<span class="token annotation punctuation">@CsvFileSource</span><span class="token punctuation">(</span>files <span class="token operator">=</span> <span class="token string">&quot;src/test/resources/two-column.csv&quot;</span><span class="token punctuation">,</span> numLinesToSkip <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">testWithCsvFileSourceFromFile</span><span class="token punctuation">(</span><span class="token class-name">String</span> country<span class="token punctuation">,</span> <span class="token keyword">int</span> reference<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assertNotNull</span><span class="token punctuation">(</span>country<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertNotEquals</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> reference<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@ParameterizedTest</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;[{index}] {arguments}&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@CsvFileSource</span><span class="token punctuation">(</span>resources <span class="token operator">=</span> <span class="token string">&quot;/two-column.csv&quot;</span><span class="token punctuation">,</span> useHeadersInDisplayName <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">testWithCsvFileSourceAndHeaders</span><span class="token punctuation">(</span><span class="token class-name">String</span> country<span class="token punctuation">,</span> <span class="token keyword">int</span> reference<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assertNotNull</span><span class="token punctuation">(</span>country<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertNotEquals</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> reference<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="参数转换" tabindex="-1"><a class="header-anchor" href="#参数转换" aria-hidden="true">#</a> 参数转换</h4><h4 id="参数聚合" tabindex="-1"><a class="header-anchor" href="#参数聚合" aria-hidden="true">#</a> 参数聚合</h4><p>TODO</p><h2 id="extendwith" tabindex="-1"><a class="header-anchor" href="#extendwith" aria-hidden="true">#</a> @ExtendWith</h2><p>该注解是Junit5中提供的扩展SPI，目前典型的实现有<code>MockitoExtension</code>、<code>SpringExtension</code>。</p><p>--</p>`,98),o=[p];function i(c,l){return a(),s("div",null,o)}const r=n(e,[["render",i],["__file","junit5.html.vue"]]);export{r as default};
