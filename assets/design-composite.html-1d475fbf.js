const e=JSON.parse('{"key":"v-5d65d8bb","path":"/quality/design-mode/design-composite.html","title":"组合模式","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":2,"title":"实现","slug":"实现","link":"#实现","children":[]}],"git":{"createdTime":1653582123000,"updatedTime":1653582123000,"contributors":[{"name":"xuliang","email":"895252461@qq.com","commits":1}]},"readingTime":{"minutes":1.77,"words":530},"localizedDate":"2022年5月27日","filePathRelative":"quality/design-mode/design-composite.md","excerpt":"<h1> 组合模式</h1>\\n<p>组合模式（Composite Pattern），又叫部分整体模式，是用于把一组相似的对象当作一个单一的对象。组合模式依据树形结构来组合对象，用来表示部分以及整体层次。这种类型的设计模式属于结构型模式，它创建了对象组的树形结构。</p>\\n<p>这种模式创建了一个包含自己对象组的类。该类提供了修改相同对象组的方式。</p>\\n<h2> 介绍</h2>\\n<p>**意图：**将对象组合成树形结构以表示\\"部分-整体\\"的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。</p>\\n<p>**主要解决：**它在我们树型结构的问题中，模糊了简单元素和复杂元素的概念，客户程序可以像处理简单元素一样来处理复杂元素，从而使得客户程序与复杂元素的内部结构解耦。</p>"}');export{e as data};
