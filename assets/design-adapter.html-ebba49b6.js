const e=JSON.parse('{"key":"v-20ffd333","path":"/quality/design-mode/design-adapter.html","title":"适配器模式","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]}],"git":{"createdTime":1653582123000,"updatedTime":1671609043000,"contributors":[{"name":"xuliang","email":"895252461@qq.com","commits":1},{"name":"诗人都藏在水底","email":"895252461@qq.com","commits":1}]},"readingTime":{"minutes":2.67,"words":800},"filePathRelative":"quality/design-mode/design-adapter.md","localizedDate":"2022年5月27日","excerpt":"<h1> 适配器模式</h1>\\n<p>适配器模式（Adapter Pattern）是作为两个不兼容的接口之间的桥梁。这种类型的设计模式属于结构型模式，它结合了两个独立接口的功能。</p>\\n<p>这种模式涉及到一个单一的类，该类负责加入独立的或不兼容的接口功能。举个真实的例子，读卡器是作为内存卡和笔记本之间的适配器。您将内存卡插入读卡器，再将读卡器插入笔记本，这样就可以通过笔记本来读取内存卡。</p>\\n<h2> 介绍</h2>\\n<p><strong>意图：</strong> 将一个类的接口转换成客户希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</p>\\n"}');export{e as data};
