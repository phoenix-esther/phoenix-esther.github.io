const l=JSON.parse('{"key":"v-1bb87274","path":"/quality/data-structure/data-structure-tree.html","title":"树","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"基础知识","slug":"基础知识","link":"#基础知识","children":[{"level":3,"title":"树的定义","slug":"树的定义","link":"#树的定义","children":[]},{"level":3,"title":"树的实现","slug":"树的实现","link":"#树的实现","children":[]},{"level":3,"title":"树的遍历","slug":"树的遍历","link":"#树的遍历","children":[]}]},{"level":2,"title":"二叉树","slug":"二叉树","link":"#二叉树","children":[{"level":3,"title":"二叉树定义","slug":"二叉树定义","link":"#二叉树定义","children":[]},{"level":3,"title":"相关术语","slug":"相关术语","link":"#相关术语","children":[]},{"level":3,"title":"特殊类型","slug":"特殊类型","link":"#特殊类型","children":[]},{"level":3,"title":"二叉树性质","slug":"二叉树性质","link":"#二叉树性质","children":[]}]},{"level":2,"title":"二叉搜索树","slug":"二叉搜索树","link":"#二叉搜索树","children":[{"level":3,"title":"定义","slug":"定义","link":"#定义","children":[]},{"level":3,"title":"复杂度","slug":"复杂度","link":"#复杂度","children":[]},{"level":3,"title":"实现","slug":"实现","link":"#实现","children":[]}]},{"level":2,"title":"平衡二叉树","slug":"平衡二叉树","link":"#平衡二叉树","children":[]},{"level":2,"title":"红黑树","slug":"红黑树","link":"#红黑树","children":[]}],"git":{"createdTime":1654958186000,"updatedTime":1661090677000,"contributors":[{"name":"xuliang","email":"895252461@qq.com","commits":2},{"name":"诗人都藏在水底","email":"895252461@qq.com","commits":2}]},"readingTime":{"minutes":6.26,"words":1879},"filePathRelative":"quality/data-structure/data-structure-tree.md","localizedDate":"2022年6月11日","excerpt":"<h1> 树</h1>\\n<h2> 基础知识</h2>\\n<h3> 树的定义</h3>\\n<h3> 树的实现</h3>\\n<h3> 树的遍历</h3>\\n<p>先序遍历</p>\\n<p>中序遍历</p>\\n<p>后序遍历</p>\\n<h2> 二叉树</h2>\\n<p>二叉树（Binary tree）是树形结构的一个重要类型。许多实际问题抽象出来的数据结构往往是二叉树形式，即使是一般的树也能简单地转换为二叉树，而且二叉树的存储结构及其算法都较为简单，因此二叉树显得特别重要。二叉树特点是每个节点最多只能有两棵子树，且有左右之分 。</p>\\n<p>二叉树是n个有限元素的集合，该集合或者为空、或者由一个称为根（root）的元素及两个不相交的、被分别称为左子树和右子树的二叉树组成，是有序树。当集合为空时，称该二叉树为空二叉树。在二叉树中，一个元素也称作一个节点</p>"}');export{l as data};
