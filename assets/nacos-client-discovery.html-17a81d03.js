const e=JSON.parse('{"key":"v-ff7d10c0","path":"/spring-cloud/spring-cloud-nacos/nacos-client-discovery.html","title":"Nacos服务注册发现原理","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"服务注册流程","slug":"服务注册流程","link":"#服务注册流程","children":[{"level":3,"title":"Spring CLoud 中的接口抽象","slug":"spring-cloud-中的接口抽象","link":"#spring-cloud-中的接口抽象","children":[]},{"level":3,"title":"Nacos中的实现","slug":"nacos中的实现","link":"#nacos中的实现","children":[]}]},{"level":2,"title":"服务发现源码分析","slug":"服务发现源码分析","link":"#服务发现源码分析","children":[]}],"git":{"createdTime":1654872324000,"updatedTime":1654872324000,"contributors":[{"name":"xuliang","email":"895252461@qq.com","commits":1}]},"readingTime":{"minutes":1.99,"words":598},"localizedDate":"2022年6月10日","filePathRelative":"spring-cloud/spring-cloud-nacos/nacos-client-discovery.md","excerpt":"<h1> Nacos服务注册发现原理</h1>\\n<h2> 服务注册流程</h2>\\n<h3> Spring CLoud 中的接口抽象</h3>\\n<p>我们都知道，Nacos是基于Spring CLoud 来完成的服务注册发现，那么Spring Cloud又是如何定义的接口呢，下面我们来一探究竟</p>\\n<p>Spring CLoud 定义的抽象接口在<code>AbstractAutoServiceRegistration</code>中，它是通过监听<code>WebServerInitializedEvent</code>事件来完成接口的调用链。下面我们来看一看源码实现（这里只粘了注册流程相关的代码）：</p>"}');export{e as data};
