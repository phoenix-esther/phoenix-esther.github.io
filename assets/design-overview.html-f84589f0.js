const l=JSON.parse('{"key":"v-627fe3d7","path":"/quality/design-mode/design-overview.html","title":"设计模式概览","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"一、设计模式的六大原则","slug":"一、设计模式的六大原则","link":"#一、设计模式的六大原则","children":[{"level":3,"title":"1、单一职责原则","slug":"_1、单一职责原则","link":"#_1、单一职责原则","children":[]},{"level":3,"title":"2、里式替换原则","slug":"_2、里式替换原则","link":"#_2、里式替换原则","children":[]},{"level":3,"title":"3、依赖倒置原则","slug":"_3、依赖倒置原则","link":"#_3、依赖倒置原则","children":[]},{"level":3,"title":"4、接口隔离原则","slug":"_4、接口隔离原则","link":"#_4、接口隔离原则","children":[]},{"level":3,"title":"5、迪米特法则","slug":"_5、迪米特法则","link":"#_5、迪米特法则","children":[]},{"level":3,"title":"6、开闭原则","slug":"_6、开闭原则","link":"#_6、开闭原则","children":[]}]},{"level":2,"title":"设计模式分类","slug":"设计模式分类","link":"#设计模式分类","children":[]},{"level":2,"title":"设计模式详解","slug":"设计模式详解","link":"#设计模式详解","children":[{"level":3,"title":"创建型模式","slug":"创建型模式","link":"#创建型模式","children":[]},{"level":3,"title":"结构性模式","slug":"结构性模式","link":"#结构性模式","children":[]},{"level":3,"title":"行为模式","slug":"行为模式","link":"#行为模式","children":[]}]}],"git":{"createdTime":1653582123000,"updatedTime":1671609033000,"contributors":[{"name":"xuliang","email":"895252461@qq.com","commits":2},{"name":"诗人都藏在水底","email":"895252461@qq.com","commits":1}]},"readingTime":{"minutes":7.55,"words":2264},"filePathRelative":"quality/design-mode/design-overview.md","localizedDate":"2022年5月27日","excerpt":"<h1> 设计模式概览</h1>\\n<p>设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</p>\\n<h2> 一、设计模式的六大原则</h2>\\n<h3> 1、单一职责原则</h3>\\n<ul>\\n<li>一个方法尽可能做一件事情，一般来说不应该让一个方法承担多个职责。</li>\\n</ul>\\n<p>单一职责原则的英文名称是Single Responsibility Principle，简称是SRP。单一职责原则的定义是：应该有且仅有一个原因引起类的变更。</p>"}');export{l as data};
