import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as i,c as o,a as n,b as a,d as e,e as p}from"./app-e53dd85b.js";const r="/assets/362d22168bf344687ec0c206aa115807-844a4732.jpg",u="/assets/image-20220804223138651-d4a51eb7.png",d="/assets/6e7d7bd54d7a4eb67918080863d354d7-d9e56280.png",k="/assets/2ccafe41de9bd7f8dec4658f004310d6-7489f071.png",v="/assets/71f41d46cc5c0405f4d4dc944b4350c9-32068474.jpg",m="/assets/image-20220804221855449-e997b714.png",b="/assets/136bc2f01919edcb8271df6f7e71af40-48c6c6a1.jpg",g="/assets/image-20220804222212087-650991ff.png",h="/assets/image-20220804223321167-fbb6710b.png",y="/assets/f8d538f9201e3ebee37dfdcd1922e9df-cdff05e3.jpg",_="/assets/2a2dba7f07581fd055d9cd5a3aa8388e-cfb57e85.jpg",w="/assets/image-20220804195402870-1406b13e.png",f="/assets/image-20220804195432673-4d74878d.png",x="/assets/image-20220714133617856-24c0de1c.png",S="/assets/image-20220807183231101-1cd87cd0.png",I="/assets/0.08703112216569037-f31f2cf7.png",T="/assets/image-20220804191852164-34c1740a.png",q="/assets/image-20220715000533951-1e74439a.png",A="/assets/image-20220714235426120-9d9bef0d.png",E="/assets/image-20220715004850504-babaa767.png",L="/assets/image-20220807232456342-826a59e6.png",M="/assets/image-20220810163534068-ce00f181.png",j="/assets/image-20220808033239206-2395791f.png",t="/assets/image-20220819152009158-5402c0ce.png",R="/assets/image-20220819151154763-2af49181.png",N={},O=p('<h1 id="sharding-sphere" tabindex="-1"><a class="header-anchor" href="#sharding-sphere" aria-hidden="true">#</a> Sharding-Sphere</h1><h2 id="第01章-高性能架构模式" tabindex="-1"><a class="header-anchor" href="#第01章-高性能架构模式" aria-hidden="true">#</a> 第01章 高性能架构模式</h2><p>互联网业务兴起之后，海量用户加上海量数据的特点，单个数据库服务器已经难以满足业务需要，必须考虑数据库集群的方式来提升性能。高性能数据库集群的<code>第一种方式是“读写分离”</code>，<code>第二种方式是“数据库分片”</code>。</p><h3 id="_1、读写分离架构" tabindex="-1"><a class="header-anchor" href="#_1、读写分离架构" aria-hidden="true">#</a> 1、读写分离架构</h3><p>**读写分离原理：**读写分离的基本原理是将数据库读写操作分散到不同的节点上，下面是其基本架构图：</p><p><img src="'+r+'" alt="img"></p><p><strong>读写分离的基本实现：</strong></p><ul><li><code>主库负责处理事务性的增删改操作，从库负责处理查询操作</code>，能够有效的避免由数据更新导致的行锁，使得整个系统的查询性能得到极大的改善。</li><li>读写分离是<code>根据 SQL 语义的分析</code>，<code>将读操作和写操作分别路由至主库与从库</code>。</li><li>通过<code>一主多从</code>的配置方式，可以将查询请求均匀的分散到多个数据副本，能够进一步的提升系统的处理能力。</li><li>使用<code>多主多从</code>的方式，不但能够提升系统的吞吐量，还能够提升系统的可用性，可以达到在任何一个数据库宕机，甚至磁盘物理损坏的情况下仍然不影响系统的正常运行。</li></ul><p><strong>下图展示了根据业务需要，将用户表的写操作和读操路由到不同的数据库的方案：</strong></p><p><img src="'+u+'" alt="image-20220804223138651"></p><p><strong>CAP 理论：</strong></p><p>CAP 定理（CAP theorem）又被称作布鲁尔定理（Brewer&#39;s theorem），是加州大学伯克利分校的计算机科学家埃里克·布鲁尔（Eric Brewer）在 2000 年的 ACM PODC 上提出的一个猜想。<code>对于设计分布式系统的架构师来说，CAP 是必须掌握的理论。</code></p><p>在一个<code>分布式系统中</code>，当涉及读写操作时，只能保证一致性（Consistence）、可用性（Availability）、分区容错性（Partition Tolerance）三者中的两个，另外一个必须被牺牲。</p><ul><li>C 一致性（Consistency）：对某个指定的客户端来说，读操作保证能够返回最新的写操作结果</li><li>A 可用性（Availability）：非故障的节点在合理的时间内返回合理的响应<code>（不是错误和超时的响应）</code></li><li>P 分区容忍性（Partition Tolerance）：当出现网络分区后<code>（可能是丢包，也可能是连接中断，还可能是拥塞）</code>，系统能够继续“履行职责”</li></ul><p><strong>CAP特点：</strong></p><ul><li><p>在实际设计过程中，每个系统不可能只处理一种数据，而是包含多种类型的数据，<code>有的数据必须选择 CP，有的数据必须选择 AP，分布式系统理论上不可能选择 CA 架构。</code></p><ul><li>CP：如下图所示，<code>为了保证一致性</code>，当发生分区现象后，N1 节点上的数据已经更新到 y，但由于 N1 和 N2 之间的复制通道中断，数据 y 无法同步到 N2，N2 节点上的数据还是 x。<code>这时客户端 C 访问 N2 时，N2 需要返回 Error，提示客户端 C“系统现在发生了错误”，</code>这种处理方式<code>违背了可用性</code>（Availability）的要求，因此 CAP 三者只能满足 CP。</li></ul><p><img src="'+d+'" alt="img"></p><ul><li>AP：如下图所示，<code>为了保证可用性</code>，当发生分区现象后，N1 节点上的数据已经更新到 y，但由于 N1 和 N2 之间的复制通道中断，数据 y 无法同步到 N2，N2 节点上的数据还是 x。<code>这时客户端 C 访问 N2 时，N2 将当前自己拥有的数据 x 返回给客户端 C 了</code>，而实际上当前最新的数据已经是 y 了，这就<code>不满足一致性</code>（Consistency）的要求了，因此 CAP 三者只能满足 AP。注意：这里 N2 节点返回 x，虽然不是一个“正确”的结果，但是一个“合理”的结果，因为 x 是旧的数据，并不是一个错乱的值，只是不是最新的数据而已。</li></ul></li></ul><p><img src="'+k+'" alt="img"></p><ul><li><p>CAP 理论中的 <code>C 在实践中是不可能完美实现的</code>，在数据复制的过程中，节点N1 和节点 N2 的数据并不一致（强一致性）。即使无法做到<code>强一致性</code>，但应用可以采用适合的方式达到<code>最终一致性</code>。具有如下特点：</p><ul><li>基本可用（Basically Available）：分布式系统在出现故障时，允许损失部分可用性，即保证核心可用。</li><li>软状态（Soft State）：允许系统存在中间状态，而该中间状态不会影响系统整体可用性。这里的中间状态就是 CAP 理论中的数据不一致。</li><li><code>最终一致性（Eventual Consistency）：系统中的所有数据副本经过一定时间后，最终能够达到一致的状态。</code></li></ul></li></ul><h3 id="_2、数据库分片架构" tabindex="-1"><a class="header-anchor" href="#_2、数据库分片架构" aria-hidden="true">#</a> 2、数据库分片架构</h3><p><strong>读写分离的问题：</strong></p><p>读写分离分散了数据库读写操作的压力，但没有分散存储压力，为了满足业务数据存储的需求，就需要<code>将存储分散到多台数据库服务器上</code>。</p><p><strong>数据分片：</strong></p><p>将存放在单一数据库中的数据分散地存放至多个数据库或表中，以达到提升性能瓶颈以及可用性的效果。 数据分片的有效手段是对关系型数据库进行<code>分库和分表</code>。数据分片的拆分方式又分为<code>垂直分片和水平分片</code>。</p><h4 id="_2-1、垂直分片" tabindex="-1"><a class="header-anchor" href="#_2-1、垂直分片" aria-hidden="true">#</a> 2.1、垂直分片</h4><p><strong>垂直分库：</strong></p><p><code>按照业务拆分的方式称为垂直分片，又称为纵向拆分</code>，它的核心理念是专库专用。 在拆分之前，一个数据库由多个数据表构成，每个表对应着不同的业务。而拆分之后，则是按照业务将表进行归类，分布到不同的数据库中，从而将压力分散至不同的数据库。</p><p><img src="'+v+'" alt="img"></p><p>下图展示了根据业务需要，将用户表和订单表垂直分片到不同的数据库的方案：</p><p><img src="'+m+'" alt="image-20220804221855449"></p><p>垂直拆分可以缓解数据量和访问量带来的问题，但无法根治。<code>如果垂直拆分之后，表中的数据量依然超过单节点所能承载的阈值，则需要水平分片来进一步处理。</code></p><p><strong>垂直分表：</strong></p><p><code>垂直分表适合将表中某些不常用的列，或者是占了大量空间的列拆分出去。</code></p><p>假设我们是一个婚恋网站，用户在筛选其他用户的时候，主要是用 age 和 sex 两个字段进行查询，而 nickname 和 description 两个字段主要用于展示，一般不会在业务查询中用到。description 本身又比较长，因此我们可以将这两个字段独立到另外一张表中，这样在查询 age 和 sex 时，就能带来一定的性能提升。</p><p>垂直分表引入的复杂性主要体现在表操作的数量要增加。例如，原来只要一次查询就可以获取 name、age、sex、nickname、description，现在需要两次查询，一次查询获取 name、age、sex，另外一次查询获取 nickname、description。</p><p><img src="'+b+'" alt="img"></p><p><code>水平分表适合表行数特别大的表，水平分表属于水平分片</code>。</p><h4 id="_2-2、水平分片" tabindex="-1"><a class="header-anchor" href="#_2-2、水平分片" aria-hidden="true">#</a> 2.2、水平分片</h4><p><code>水平分片又称为横向拆分。</code> 相对于垂直分片，它不再将数据根据业务逻辑分类，而是通过某个字段（或某几个字段），根据某种规则将数据分散至多个库或表中，每个分片仅包含数据的一部分。 例如：根据主键分片，偶数主键的记录放入 0 库（或表），奇数主键的记录放入 1 库（或表），如下图所示。</p><p><img src="'+g+'" alt="image-20220804222212087"></p><p><code>单表进行切分后，是否将多个表分散在不同的数据库服务器中，可以根据实际的切分效果来确定。</code></p><ul><li><p>**水平分表：**单表切分为多表后，新的表即使在同一个数据库服务器中，也可能带来可观的性能提升，如果性能能够满足业务要求，可以不拆分到多台数据库服务器，毕竟业务分库也会引入很多复杂性；</p></li><li><p>**水平分库：**如果单表拆分为多表后，单台服务器依然无法满足性能要求，那就需要将多个表分散在不同的数据库服务器中。</p></li></ul><blockquote><p><strong>阿里巴巴Java开发手册：</strong></p><p>【推荐】单表行数超过 500 万行或者单表容量超过 2GB，才推荐进行分库分表。</p><p>说明：如果预计三年后的数据量根本达不到这个级别，<code>请不要在创建表时就分库分表</code>。</p></blockquote><h3 id="_3、读写分离和数据分片架构" tabindex="-1"><a class="header-anchor" href="#_3、读写分离和数据分片架构" aria-hidden="true">#</a> 3、读写分离和数据分片架构</h3><p>下图展现了将数据分片与读写分离一同使用时，应用程序与数据库集群之间的复杂拓扑关系。</p><p><img src="'+h+'" alt="image-20220804223321167"></p><h3 id="_4、实现方式" tabindex="-1"><a class="header-anchor" href="#_4、实现方式" aria-hidden="true">#</a> 4、实现方式</h3><p>读写分离和数据分片具体的实现方式一般有两种： <code>程序代码封装</code>和<code>中间件封装</code>。</p><h4 id="_4-1、程序代码封装" tabindex="-1"><a class="header-anchor" href="#_4-1、程序代码封装" aria-hidden="true">#</a> 4.1、程序代码封装</h4><p>程序代码封装指在代码中抽象一个<code>数据访问层（或中间层封装）</code>，实现读写操作分离和数据库服务器连接的管理。</p><p>**其基本架构是：**以读写分离为例</p><p><img src="'+y+'" alt="img"></p><h4 id="_4-2、中间件封装" tabindex="-1"><a class="header-anchor" href="#_4-2、中间件封装" aria-hidden="true">#</a> 4.2、中间件封装</h4><p>中间件封装指的是<code>独立一套系统出来</code>，实现读写操作分离和数据库服务器连接的管理。对于业务服务器来说，访问中间件和访问数据库没有区别，在业务服务器看来，中间件就是一个数据库服务器。</p><p>**基本架构是：**以读写分离为例</p><p><img src="'+_+'" alt="img"></p><h4 id="_4-3、常用解决方案" tabindex="-1"><a class="header-anchor" href="#_4-3、常用解决方案" aria-hidden="true">#</a> 4.3、常用解决方案</h4><p>Apache ShardingSphere（程序级别和中间件级别）</p><p>MyCat（数据库中间件）</p><h2 id="第02章-shardingsphere" tabindex="-1"><a class="header-anchor" href="#第02章-shardingsphere" aria-hidden="true">#</a> 第02章 ShardingSphere</h2><h3 id="_1、简介" tabindex="-1"><a class="header-anchor" href="#_1、简介" aria-hidden="true">#</a> 1、简介</h3><p>官网：https://shardingsphere.apache.org/index_zh.html</p><p>文档：https://shardingsphere.apache.org/document/5.1.1/cn/overview/</p><p>Apache ShardingSphere 由 JDBC、Proxy 和 Sidecar（规划中）这 3 款既能够独立部署，又支持混合部署配合使用的产品组成。</p><h3 id="_2、shardingsphere-jdbc" tabindex="-1"><a class="header-anchor" href="#_2、shardingsphere-jdbc" aria-hidden="true">#</a> 2、ShardingSphere-JDBC</h3><p><strong>程序代码封装</strong></p><p>定位为轻量级 Java 框架，<code>在 Java 的 JDBC 层提供的额外服务</code>。 它使用客户端直连数据库，<code>以 jar 包形式提供服务</code>，无需额外部署和依赖，可理解为增强版的 JDBC 驱动，完全兼容 JDBC 和各种 ORM 框架。</p><p><img src="'+w+'" alt="image-20220804195402870"></p><h3 id="_3、shardingsphere-proxy" tabindex="-1"><a class="header-anchor" href="#_3、shardingsphere-proxy" aria-hidden="true">#</a> 3、ShardingSphere-Proxy</h3><p><strong>中间件封装</strong></p><p>定位为透明化的<code>数据库代理端</code>，提供封装了数据库二进制协议的服务端版本，用于完成对异构语言的支持。 目前提供 MySQL 和 PostgreSQL版本，它可以使用任何兼容 MySQL/PostgreSQL 协议的访问客户端（如：MySQL Command Client, MySQL Workbench, Navicat 等）操作数据，对 DBA 更加友好。</p><p><img src="'+f+'" alt="image-20220804195432673"></p><h2 id="第03章-mysql主从同步" tabindex="-1"><a class="header-anchor" href="#第03章-mysql主从同步" aria-hidden="true">#</a> 第03章 MySQL主从同步</h2><h3 id="_1、mysql主从同步原理" tabindex="-1"><a class="header-anchor" href="#_1、mysql主从同步原理" aria-hidden="true">#</a> 1、MySQL主从同步原理</h3><p><img src="'+x+'" alt="img"></p><p><strong>基本原理：</strong></p><p>slave会从master读取binlog来进行数据同步</p><p><strong>具体步骤：</strong></p><ul><li><code>step1：</code>master将数据改变记录到<code>二进制日志（binary log）</code>中。</li><li><code>step2：</code> 当slave上执行 <code>start slave</code> 命令之后，slave会创建一个 <code>IO 线程</code>用来连接master，请求master中的binlog。</li><li><code>step3：</code>当slave连接master时，master会创建一个 <code>log dump 线程</code>，用于发送 binlog 的内容。在读取 binlog 的内容的操作中，会对主节点上的 binlog 加锁，当读取完成并发送给从服务器后解锁。</li><li><code>step4：</code>IO 线程接收主节点 binlog dump 进程发来的更新之后，保存到 <code>中继日志（relay log）</code> 中。</li><li><code>step5：</code>slave的<code>SQL线程</code>，读取relay log日志，并解析成具体操作，从而实现主从操作一致，最终数据一致。</li></ul><h3 id="_2、一主多从配置" tabindex="-1"><a class="header-anchor" href="#_2、一主多从配置" aria-hidden="true">#</a> 2、一主多从配置</h3><p>服务器规划：使用<code>docker</code>方式创建，<code>主从服务器IP一致，端口号不一致</code></p><p><img src="'+S+`" alt="image-20220807183231101"></p><ul><li>主服务器：容器名<code>atguigu-mysql-master</code>，端口<code>3306</code></li><li>从服务器：容器名<code>atguigu-mysql-slave1</code>，端口<code>3307</code></li><li>从服务器：容器名<code>atguigu-mysql-slave2</code>，端口<code>3308</code></li></ul><p>**注意：**如果此时防火墙是开启的，<code>则先关闭防火墙，并重启docker</code>，否则后续安装的MySQL无法启动</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#关闭docker</span>
systemctl stop <span class="token function">docker</span>
<span class="token comment">#关闭防火墙</span>
systemctl stop firewalld
<span class="token comment">#启动docker</span>
systemctl start <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-1、准备主服务器" tabindex="-1"><a class="header-anchor" href="#_2-1、准备主服务器" aria-hidden="true">#</a> 2.1、准备主服务器</h4><ul><li><strong>step1：在docker中创建并启动MySQL主服务器：</strong><code>端口3306</code></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\\</span>
<span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306 <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /atguigu/mysql/master/conf:/etc/mysql/conf.d <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /atguigu/mysql/master/data:/var/lib/mysql <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> <span class="token punctuation">\\</span>
<span class="token parameter variable">--name</span> atguigu-mysql-master <span class="token punctuation">\\</span>
mysql:8.0.29
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>step2：创建MySQL主服务器配置文件：</strong></li></ul><p>默认情况下MySQL的binlog日志是自动开启的，可以通过如下配置定义一些可选配置</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">vim</span> /atguigu/mysql/master/conf/my.cnf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>配置如下内容</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code>[mysqld]
<span class="token comment"># 服务器唯一id，默认值1</span>
<span class="token key attr-name">server-id</span><span class="token punctuation">=</span><span class="token value attr-value">1</span>
<span class="token comment"># 设置日志格式，默认值ROW</span>
<span class="token key attr-name">binlog_format</span><span class="token punctuation">=</span><span class="token value attr-value">STATEMENT</span>
<span class="token comment"># 二进制日志名，默认binlog</span>
<span class="token comment"># log-bin=binlog</span>
<span class="token comment"># 设置需要复制的数据库，默认复制全部数据库</span>
<span class="token comment"># binlog-do-db=mytestdb</span>
<span class="token comment"># 设置不需要复制的数据库</span>
<span class="token comment"># binlog-ignore-db=mysql</span>
<span class="token comment"># binlog-ignore-db=infomation_schema</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重启MySQL容器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> restart atguigu-mysql-master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>binlog格式说明：</code></p><ul><li>binlog_format=STATEMENT：日志记录的是主机数据库的<code>写指令</code>，性能高，但是now()之类的函数以及获取系统参数的操作会出现主从数据不同步的问题。</li><li>binlog_format=ROW（默认）：日志记录的是主机数据库的<code>写后的数据</code>，批量操作时性能较差，解决now()或者 user()或者 @@hostname 等操作在主从机器上不一致的问题。</li><li>binlog_format=MIXED：是以上两种level的混合使用，有函数用ROW，没函数用STATEMENT，但是无法识别系统变量</li></ul><p><code>binlog-ignore-db和binlog-do-db的优先级问题：</code></p><p><img src="`+I+`" alt="img"></p><ul><li><strong>step3：使用命令行登录MySQL主服务器：</strong></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#进入容器：env LANG=C.UTF-8 避免容器中显示中文乱码</span>
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> atguigu-mysql-master <span class="token function">env</span> <span class="token assign-left variable"><span class="token environment constant">LANG</span></span><span class="token operator">=</span>C.UTF-8 /bin/bash
<span class="token comment">#进入容器内的mysql命令行</span>
mysql <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-p</span>
<span class="token comment">#修改默认密码校验方式</span>
ALTER <span class="token environment constant">USER</span> <span class="token string">&#39;root&#39;</span>@<span class="token string">&#39;%&#39;</span> IDENTIFIED WITH mysql_native_password BY <span class="token string">&#39;123456&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>step4：主机中创建slave用户：</strong></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 创建slave用户</span>
<span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token string">&#39;atguigu_slave&#39;</span><span class="token variable">@&#39;%&#39;</span><span class="token punctuation">;</span>
<span class="token comment">-- 设置密码</span>
<span class="token keyword">ALTER</span> <span class="token keyword">USER</span> <span class="token string">&#39;atguigu_slave&#39;</span><span class="token variable">@&#39;%&#39;</span> IDENTIFIED <span class="token keyword">WITH</span> mysql_native_password <span class="token keyword">BY</span> <span class="token string">&#39;123456&#39;</span><span class="token punctuation">;</span>
<span class="token comment">-- 授予复制权限</span>
<span class="token keyword">GRANT</span> <span class="token keyword">REPLICATION</span> SLAVE <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">&#39;atguigu_slave&#39;</span><span class="token variable">@&#39;%&#39;</span><span class="token punctuation">;</span>
<span class="token comment">-- 刷新权限</span>
FLUSH <span class="token keyword">PRIVILEGES</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>step5：主机中查询master状态：</strong></li></ul><p>执行完此步骤后<code>不要再操作主服务器MYSQL</code>，防止主服务器状态值变化</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SHOW</span> MASTER <span class="token keyword">STATUS</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>记下<code>File</code>和<code>Position</code>的值。执行完此步骤后不要再操作主服务器MYSQL，防止主服务器状态值变化。</p><p><img src="`+T+`" alt="image-20220804191852164"></p><h4 id="_2-2、准备从服务器" tabindex="-1"><a class="header-anchor" href="#_2-2、准备从服务器" aria-hidden="true">#</a> 2.2、准备从服务器</h4><p>可以配置多台从机slave1、slave2...，这里以配置slave1为例</p><ul><li><strong>step1：在docker中创建并启动MySQL从服务器：</strong><code>端口3307</code></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\\</span>
<span class="token parameter variable">-p</span> <span class="token number">3307</span>:3306 <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /atguigu/mysql/slave1/conf:/etc/mysql/conf.d <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /atguigu/mysql/slave1/data:/var/lib/mysql <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> <span class="token punctuation">\\</span>
<span class="token parameter variable">--name</span> atguigu-mysql-slave1 <span class="token punctuation">\\</span>
mysql:8.0.29
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>step2：创建MySQL从服务器配置文件：</strong></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">vim</span> /atguigu/mysql/slave1/conf/my.cnf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>配置如下内容：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code>[mysqld]
<span class="token comment"># 服务器唯一id，每台服务器的id必须不同，如果配置其他从机，注意修改id</span>
<span class="token key attr-name">server-id</span><span class="token punctuation">=</span><span class="token value attr-value">2</span>
<span class="token comment"># 中继日志名，默认xxxxxxxxxxxx-relay-bin</span>
<span class="token comment">#relay-log=relay-bin</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重启MySQL容器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> restart atguigu-mysql-slave1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><strong>step3：使用命令行登录MySQL从服务器：</strong></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#进入容器：</span>
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> atguigu-mysql-slave1 <span class="token function">env</span> <span class="token assign-left variable"><span class="token environment constant">LANG</span></span><span class="token operator">=</span>C.UTF-8 /bin/bash
<span class="token comment">#进入容器内的mysql命令行</span>
mysql <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-p</span>
<span class="token comment">#修改默认密码校验方式</span>
ALTER <span class="token environment constant">USER</span> <span class="token string">&#39;root&#39;</span>@<span class="token string">&#39;%&#39;</span> IDENTIFIED WITH mysql_native_password BY <span class="token string">&#39;123456&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>step4：在从机上配置主从关系：</strong></li></ul><p>在<strong>从机</strong>上执行以下SQL操作</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>CHANGE MASTER <span class="token keyword">TO</span> MASTER_HOST<span class="token operator">=</span><span class="token string">&#39;192.168.100.201&#39;</span><span class="token punctuation">,</span> 
MASTER_USER<span class="token operator">=</span><span class="token string">&#39;atguigu_slave&#39;</span><span class="token punctuation">,</span>MASTER_PASSWORD<span class="token operator">=</span><span class="token string">&#39;123456&#39;</span><span class="token punctuation">,</span> MASTER_PORT<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>
MASTER_LOG_FILE<span class="token operator">=</span><span class="token string">&#39;binlog.000003&#39;</span><span class="token punctuation">,</span>MASTER_LOG_POS<span class="token operator">=</span><span class="token number">1357</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3、启动主从同步" tabindex="-1"><a class="header-anchor" href="#_2-3、启动主从同步" aria-hidden="true">#</a> 2.3、启动主从同步</h4><p>启动从机的复制功能，执行SQL：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">START</span> SLAVE<span class="token punctuation">;</span>
<span class="token comment">-- 查看状态（不需要分号）</span>
<span class="token keyword">SHOW</span> SLAVE <span class="token keyword">STATUS</span>\\G
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>**两个关键进程：**下面两个参数都是Yes，则说明主从配置成功！</p><p><img src="`+q+`" alt="img"></p><h4 id="_2-4、实现主从同步" tabindex="-1"><a class="header-anchor" href="#_2-4、实现主从同步" aria-hidden="true">#</a> 2.4、实现主从同步</h4><p>在主机中执行以下SQL，在从机中查看数据库、表和数据是否已经被同步</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> db_user<span class="token punctuation">;</span>
<span class="token keyword">USE</span> db_user<span class="token punctuation">;</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> t_user <span class="token punctuation">(</span>
 id <span class="token keyword">BIGINT</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
 uname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
 <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t_user<span class="token punctuation">(</span>uname<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;zhang3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t_user<span class="token punctuation">(</span>uname<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span>@<span class="token variable">@hostname</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-5、停止和重置" tabindex="-1"><a class="header-anchor" href="#_2-5、停止和重置" aria-hidden="true">#</a> 2.5、停止和重置</h4><p>需要的时候，可以使用如下SQL语句</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 在从机上执行。功能说明：停止I/O 线程和SQL线程的操作。</span>
stop slave<span class="token punctuation">;</span> 

<span class="token comment">-- 在从机上执行。功能说明：用于删除SLAVE数据库的relaylog日志文件，并重新启用新的relaylog文件。</span>
reset slave<span class="token punctuation">;</span>

<span class="token comment">-- 在主机上执行。功能说明：删除所有的binglog日志文件，并将日志索引文件清空，重新开始所有新的日志文件。</span>
<span class="token comment">-- 用于第一次进行搭建主从库时，进行主库binlog初始化工作；</span>
reset master<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-6、常见问题" tabindex="-1"><a class="header-anchor" href="#_2-6、常见问题" aria-hidden="true">#</a> <strong>2.6、常见问题</strong></h4><h4 id="问题1" tabindex="-1"><a class="header-anchor" href="#问题1" aria-hidden="true">#</a> 问题1</h4><p>启动主从同步后，常见错误是<code>Slave_IO_Running： No 或者 Connecting</code> 的情况，此时查看下方的 <code>Last_IO_ERROR</code>错误日志，根据日志中显示的错误信息在网上搜索解决方案即可</p><p><img src="`+A+`" alt="img"></p><p><strong>典型的错误例如：</strong><code>Last_IO_Error: Got fatal error 1236 from master when reading data from binary log: &#39;Client requested master to start replication from position &gt; file size&#39;</code></p><p><strong>解决方案：</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 在从机停止slave</span>
SLAVE STOP<span class="token punctuation">;</span>

<span class="token comment">-- 在主机查看mater状态</span>
<span class="token keyword">SHOW</span> MASTER <span class="token keyword">STATUS</span><span class="token punctuation">;</span>
<span class="token comment">-- 在主机刷新日志</span>
FLUSH LOGS<span class="token punctuation">;</span>
<span class="token comment">-- 再次在主机查看mater状态（会发现File和Position发生了变化）</span>
<span class="token keyword">SHOW</span> MASTER <span class="token keyword">STATUS</span><span class="token punctuation">;</span>
<span class="token comment">-- 修改从机连接主机的SQL，并重新连接即可</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="问题2" tabindex="-1"><a class="header-anchor" href="#问题2" aria-hidden="true">#</a> 问题2</h4><p>启动docker容器后提示 <code>WARNING: IPv4 forwarding is disabled. Networking will not work.</code></p><p><img src="`+E+`" alt="img"></p><p>此错误，虽然不影响主从同步的搭建，但是如果想从远程客户端通过以下方式连接docker中的MySQL则没法连接</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>C:<span class="token punctuation">\\</span>Users<span class="token punctuation">\\</span>administrator<span class="token operator">&gt;</span>mysql <span class="token parameter variable">-h</span> <span class="token number">192.168</span>.100.201 <span class="token parameter variable">-P</span> <span class="token number">3306</span> <span class="token parameter variable">-u</span> root <span class="token parameter variable">-p</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>解决方案：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#修改配置文件：</span>
<span class="token function">vim</span> /usr/lib/sysctl.d/00-system.conf
<span class="token comment">#追加</span>
<span class="token assign-left variable">net.ipv4.ip_forward</span><span class="token operator">=</span><span class="token number">1</span>
<span class="token comment">#接着重启网络</span>
systemctl restart network
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第04章-shardingsphere-jdbc读写分离" tabindex="-1"><a class="header-anchor" href="#第04章-shardingsphere-jdbc读写分离" aria-hidden="true">#</a> 第04章 ShardingSphere-JDBC读写分离</h2><h3 id="_1、创建springboot程序" tabindex="-1"><a class="header-anchor" href="#_1、创建springboot程序" aria-hidden="true">#</a> 1、创建SpringBoot程序</h3><h4 id="_1-1、创建项目" tabindex="-1"><a class="header-anchor" href="#_1-1、创建项目" aria-hidden="true">#</a> 1.1、创建项目</h4><p>项目类型：Spring Initializr</p><p>SpringBoot脚手架：http://start.aliyun.com</p><p>项目名：sharding-jdbc-demo</p><p>SpringBoot版本：2.3.7.RELEASE</p><h4 id="_1-2、添加依赖" tabindex="-1"><a class="header-anchor" href="#_1-2、添加依赖" aria-hidden="true">#</a> 1.2、添加依赖</h4><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.shardingsphere<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>shardingsphere-jdbc-core-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.junit.vintage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit-vintage-engine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-3、创建实体类" tabindex="-1"><a class="header-anchor" href="#_1-3、创建实体类" aria-hidden="true">#</a> 1.3、创建实体类</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>shardingjdbcdemo<span class="token punctuation">.</span>entity</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@TableName</span><span class="token punctuation">(</span><span class="token string">&quot;t_user&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@TableId</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">IdType</span><span class="token punctuation">.</span><span class="token constant">AUTO</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> uname<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-4、创建mapper" tabindex="-1"><a class="header-anchor" href="#_1-4、创建mapper" aria-hidden="true">#</a> 1.4、创建Mapper</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>shardingjdbcdemo<span class="token punctuation">.</span>mapper</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Mapper</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-5、配置读写分离" tabindex="-1"><a class="header-anchor" href="#_1-5、配置读写分离" aria-hidden="true">#</a> 1.5、配置读写分离</h4><p>application.properties：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment"># 应用名称</span>
<span class="token key attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token value attr-value">sharging-jdbc-demo</span>
<span class="token comment"># 开发环境设置</span>
<span class="token key attr-name">spring.profiles.active</span><span class="token punctuation">=</span><span class="token value attr-value">dev</span>
<span class="token comment"># 内存模式</span>
<span class="token key attr-name">spring.shardingsphere.mode.type</span><span class="token punctuation">=</span><span class="token value attr-value">Memory</span>

<span class="token comment"># 配置真实数据源</span>
<span class="token key attr-name">spring.shardingsphere.datasource.names</span><span class="token punctuation">=</span><span class="token value attr-value">master,slave1,slave2</span>

<span class="token comment"># 配置第 1 个数据源</span>
<span class="token key attr-name">spring.shardingsphere.datasource.master.type</span><span class="token punctuation">=</span><span class="token value attr-value">com.zaxxer.hikari.HikariDataSource</span>
<span class="token key attr-name">spring.shardingsphere.datasource.master.driver-class-name</span><span class="token punctuation">=</span><span class="token value attr-value">com.mysql.jdbc.Driver</span>
<span class="token key attr-name">spring.shardingsphere.datasource.master.jdbc-url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql://192.168.100.201:3306/db_user</span>
<span class="token key attr-name">spring.shardingsphere.datasource.master.username</span><span class="token punctuation">=</span><span class="token value attr-value">root</span>
<span class="token key attr-name">spring.shardingsphere.datasource.master.password</span><span class="token punctuation">=</span><span class="token value attr-value">123456</span>

<span class="token comment"># 配置第 2 个数据源</span>
<span class="token key attr-name">spring.shardingsphere.datasource.slave1.type</span><span class="token punctuation">=</span><span class="token value attr-value">com.zaxxer.hikari.HikariDataSource</span>
<span class="token key attr-name">spring.shardingsphere.datasource.slave1.driver-class-name</span><span class="token punctuation">=</span><span class="token value attr-value">com.mysql.jdbc.Driver</span>
<span class="token key attr-name">spring.shardingsphere.datasource.slave1.jdbc-url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql://192.168.100.201:3307/db_user</span>
<span class="token key attr-name">spring.shardingsphere.datasource.slave1.username</span><span class="token punctuation">=</span><span class="token value attr-value">root</span>
<span class="token key attr-name">spring.shardingsphere.datasource.slave1.password</span><span class="token punctuation">=</span><span class="token value attr-value">123456</span>

<span class="token comment"># 配置第 3 个数据源</span>
<span class="token key attr-name">spring.shardingsphere.datasource.slave2.type</span><span class="token punctuation">=</span><span class="token value attr-value">com.zaxxer.hikari.HikariDataSource</span>
<span class="token key attr-name">spring.shardingsphere.datasource.slave2.driver-class-name</span><span class="token punctuation">=</span><span class="token value attr-value">com.mysql.jdbc.Driver</span>
<span class="token key attr-name">spring.shardingsphere.datasource.slave2.jdbc-url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql://192.168.100.201:3308/db_user</span>
<span class="token key attr-name">spring.shardingsphere.datasource.slave2.username</span><span class="token punctuation">=</span><span class="token value attr-value">root</span>
<span class="token key attr-name">spring.shardingsphere.datasource.slave2.password</span><span class="token punctuation">=</span><span class="token value attr-value">123456</span>

<span class="token comment"># 读写分离类型，如: Static，Dynamic</span>
<span class="token key attr-name">spring.shardingsphere.rules.readwrite-splitting.data-sources.myds.type</span><span class="token punctuation">=</span><span class="token value attr-value">Static</span>
<span class="token comment"># 写数据源名称</span>
<span class="token key attr-name">spring.shardingsphere.rules.readwrite-splitting.data-sources.myds.props.write-data-source-name</span><span class="token punctuation">=</span><span class="token value attr-value">master</span>
<span class="token comment"># 读数据源名称，多个从数据源用逗号分隔</span>
<span class="token key attr-name">spring.shardingsphere.rules.readwrite-splitting.data-sources.myds.props.read-data-source-names</span><span class="token punctuation">=</span><span class="token value attr-value">slave1,slave2</span>

<span class="token comment"># 负载均衡算法名称</span>
<span class="token key attr-name">spring.shardingsphere.rules.readwrite-splitting.data-sources.myds.load-balancer-name</span><span class="token punctuation">=</span><span class="token value attr-value">alg_round</span>

<span class="token comment"># 负载均衡算法配置</span>
<span class="token comment"># 负载均衡算法类型</span>
<span class="token key attr-name">spring.shardingsphere.rules.readwrite-splitting.load-balancers.alg_round.type</span><span class="token punctuation">=</span><span class="token value attr-value">ROUND_ROBIN</span>
<span class="token key attr-name">spring.shardingsphere.rules.readwrite-splitting.load-balancers.alg_random.type</span><span class="token punctuation">=</span><span class="token value attr-value">RANDOM</span>
<span class="token key attr-name">spring.shardingsphere.rules.readwrite-splitting.load-balancers.alg_weight.type</span><span class="token punctuation">=</span><span class="token value attr-value">WEIGHT</span>
<span class="token key attr-name">spring.shardingsphere.rules.readwrite-splitting.load-balancers.alg_weight.props.slave1</span><span class="token punctuation">=</span><span class="token value attr-value">1</span>
<span class="token key attr-name">spring.shardingsphere.rules.readwrite-splitting.load-balancers.alg_weight.props.slave2</span><span class="token punctuation">=</span><span class="token value attr-value">2</span>

<span class="token comment"># 打印SQl</span>
<span class="token key attr-name">spring.shardingsphere.props.sql-show</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、测试" tabindex="-1"><a class="header-anchor" href="#_2、测试" aria-hidden="true">#</a> 2、测试</h3><h4 id="_2-1、读写分离测试" tabindex="-1"><a class="header-anchor" href="#_2-1、读写分离测试" aria-hidden="true">#</a> 2.1、读写分离测试</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>shardingjdbcdemo</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">class</span> <span class="token class-name">ReadwriteTest</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">UserMapper</span> userMapper<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 写入数据的测试
     */</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        user<span class="token punctuation">.</span><span class="token function">setUname</span><span class="token punctuation">(</span><span class="token string">&quot;张三丰&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2、事务测试" tabindex="-1"><a class="header-anchor" href="#_2-2、事务测试" aria-hidden="true">#</a> 2.2、事务测试</h4><p>为了保证主从库间的事务一致性，避免跨服务的分布式事务，ShardingSphere-JDBC的<code>主从模型中，事务中的数据读写均用主库</code>。</p><ul><li>不添加@Transactional：insert对主库操作，select对从库操作</li><li>添加@Transactional：则insert和select均对主库操作</li><li>**注意：**在JUnit环境下的@Transactional注解，默认情况下就会对事务进行回滚（即使在没加注解@Rollback，也会对事务回滚）</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 事务测试
 */</span>
<span class="token annotation punctuation">@Transactional</span><span class="token comment">//开启事务</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testTrans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    user<span class="token punctuation">.</span><span class="token function">setUname</span><span class="token punctuation">(</span><span class="token string">&quot;铁锤&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    userMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3、负载均衡测试" tabindex="-1"><a class="header-anchor" href="#_2-3、负载均衡测试" aria-hidden="true">#</a> 2.3、负载均衡测试</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 读数据测试
 */</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//执行第二次测试负载均衡</span>
    users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以在web请求中测试负载均衡</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>shardingjdbcdemo<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/userController&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">UserMapper</span> userMapper<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 测试负载均衡策略
     */</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;selectAll&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第05章-shardingsphere-jdbc垂直分片" tabindex="-1"><a class="header-anchor" href="#第05章-shardingsphere-jdbc垂直分片" aria-hidden="true">#</a> 第05章 ShardingSphere-JDBC垂直分片</h2><h3 id="_1、准备服务器" tabindex="-1"><a class="header-anchor" href="#_1、准备服务器" aria-hidden="true">#</a> 1、准备服务器</h3><p>服务器规划：使用<code>docker</code>方式创建如下容器</p><p><img src="`+L+`" alt="image-20220807232456342"></p><ul><li><p>服务器：容器名<code>server-user</code>，端口<code>3301</code></p></li><li><p>服务器：容器名<code>server-order</code>，端口<code>3302</code></p></li></ul><h4 id="_1-1、创建server-user容器" tabindex="-1"><a class="header-anchor" href="#_1-1、创建server-user容器" aria-hidden="true">#</a> 1.1、创建server-user容器</h4><ul><li><strong>step1：创建容器：</strong></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\\</span>
<span class="token parameter variable">-p</span> <span class="token number">3301</span>:3306 <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /atguigu/server/user/conf:/etc/mysql/conf.d <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /atguigu/server/user/data:/var/lib/mysql <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> <span class="token punctuation">\\</span>
<span class="token parameter variable">--name</span> server-user <span class="token punctuation">\\</span>
mysql:8.0.29
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>step2：登录MySQL服务器：</strong></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#进入容器：</span>
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> server-user <span class="token function">env</span> <span class="token assign-left variable"><span class="token environment constant">LANG</span></span><span class="token operator">=</span>C.UTF-8 /bin/bash
<span class="token comment">#进入容器内的mysql命令行</span>
mysql <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-p</span>
<span class="token comment">#修改默认密码插件</span>
ALTER <span class="token environment constant">USER</span> <span class="token string">&#39;root&#39;</span>@<span class="token string">&#39;%&#39;</span> IDENTIFIED WITH mysql_native_password BY <span class="token string">&#39;123456&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>step3：创建数据库：</strong></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> db_user<span class="token punctuation">;</span>
<span class="token keyword">USE</span> db_user<span class="token punctuation">;</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> t_user <span class="token punctuation">(</span>
 id <span class="token keyword">BIGINT</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
 uname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
 <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-2、创建server-order容器" tabindex="-1"><a class="header-anchor" href="#_1-2、创建server-order容器" aria-hidden="true">#</a> 1.2、创建server-order容器</h4><ul><li><strong>step1：创建容器：</strong></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\\</span>
<span class="token parameter variable">-p</span> <span class="token number">3302</span>:3306 <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /atguigu/server/order/conf:/etc/mysql/conf.d <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /atguigu/server/order/data:/var/lib/mysql <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> <span class="token punctuation">\\</span>
<span class="token parameter variable">--name</span> server-order <span class="token punctuation">\\</span>
mysql:8.0.29
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>step2：登录MySQL服务器：</strong></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#进入容器：</span>
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> server-order <span class="token function">env</span> <span class="token assign-left variable"><span class="token environment constant">LANG</span></span><span class="token operator">=</span>C.UTF-8 /bin/bash
<span class="token comment">#进入容器内的mysql命令行</span>
mysql <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-p</span>
<span class="token comment">#修改默认密码插件</span>
ALTER <span class="token environment constant">USER</span> <span class="token string">&#39;root&#39;</span>@<span class="token string">&#39;%&#39;</span> IDENTIFIED WITH mysql_native_password BY <span class="token string">&#39;123456&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>step3：创建数据库：</strong></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> db_order<span class="token punctuation">;</span>
<span class="token keyword">USE</span> db_order<span class="token punctuation">;</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> t_order <span class="token punctuation">(</span>
  id <span class="token keyword">BIGINT</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
  order_no <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  user_id <span class="token keyword">BIGINT</span><span class="token punctuation">,</span>
  amount <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> 
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、程序实现" tabindex="-1"><a class="header-anchor" href="#_2、程序实现" aria-hidden="true">#</a> 2、程序实现</h3><h4 id="_2-1、创建实体类" tabindex="-1"><a class="header-anchor" href="#_2-1、创建实体类" aria-hidden="true">#</a> 2.1、创建实体类</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>shardingjdbcdemo<span class="token punctuation">.</span>entity</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@TableName</span><span class="token punctuation">(</span><span class="token string">&quot;t_order&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@TableId</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">IdType</span><span class="token punctuation">.</span><span class="token constant">AUTO</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> orderNo<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> userId<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">BigDecimal</span> amount<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2、创建mapper" tabindex="-1"><a class="header-anchor" href="#_2-2、创建mapper" aria-hidden="true">#</a> 2.2、创建Mapper</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>shardingjdbcdemo<span class="token punctuation">.</span>mapper</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Mapper</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OrderMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Order</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3、配置垂直分片" tabindex="-1"><a class="header-anchor" href="#_2-3、配置垂直分片" aria-hidden="true">#</a> 2.3、配置垂直分片</h4><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment"># 应用名称</span>
<span class="token key attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token value attr-value">sharding-jdbc-demo</span>
<span class="token comment"># 环境设置</span>
<span class="token key attr-name">spring.profiles.active</span><span class="token punctuation">=</span><span class="token value attr-value">dev</span>

<span class="token comment"># 配置真实数据源</span>
<span class="token key attr-name">spring.shardingsphere.datasource.names</span><span class="token punctuation">=</span><span class="token value attr-value">server-user,server-order</span>

<span class="token comment"># 配置第 1 个数据源</span>
<span class="token key attr-name">spring.shardingsphere.datasource.server-user.type</span><span class="token punctuation">=</span><span class="token value attr-value">com.zaxxer.hikari.HikariDataSource</span>
<span class="token key attr-name">spring.shardingsphere.datasource.server-user.driver-class-name</span><span class="token punctuation">=</span><span class="token value attr-value">com.mysql.jdbc.Driver</span>
<span class="token key attr-name">spring.shardingsphere.datasource.server-user.jdbc-url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql://192.168.100.201:3301/db_user</span>
<span class="token key attr-name">spring.shardingsphere.datasource.server-user.username</span><span class="token punctuation">=</span><span class="token value attr-value">root</span>
<span class="token key attr-name">spring.shardingsphere.datasource.server-user.password</span><span class="token punctuation">=</span><span class="token value attr-value">123456</span>

<span class="token comment"># 配置第 2 个数据源</span>
<span class="token key attr-name">spring.shardingsphere.datasource.server-order.type</span><span class="token punctuation">=</span><span class="token value attr-value">com.zaxxer.hikari.HikariDataSource</span>
<span class="token key attr-name">spring.shardingsphere.datasource.server-order.driver-class-name</span><span class="token punctuation">=</span><span class="token value attr-value">com.mysql.jdbc.Driver</span>
<span class="token key attr-name">spring.shardingsphere.datasource.server-order.jdbc-url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql://192.168.100.201:3302/db_order</span>
<span class="token key attr-name">spring.shardingsphere.datasource.server-order.username</span><span class="token punctuation">=</span><span class="token value attr-value">root</span>
<span class="token key attr-name">spring.shardingsphere.datasource.server-order.password</span><span class="token punctuation">=</span><span class="token value attr-value">123456</span>

<span class="token comment"># 标准分片表配置（数据节点）</span>
<span class="token comment"># spring.shardingsphere.rules.sharding.tables.&lt;table-name&gt;.actual-data-nodes=值</span>
<span class="token comment"># 值由数据源名 + 表名组成，以小数点分隔。</span>
<span class="token comment"># &lt;table-name&gt;：逻辑表名</span>
<span class="token key attr-name">spring.shardingsphere.rules.sharding.tables.t_user.actual-data-nodes</span><span class="token punctuation">=</span><span class="token value attr-value">server-user.t_user</span>
<span class="token key attr-name">spring.shardingsphere.rules.sharding.tables.t_order.actual-data-nodes</span><span class="token punctuation">=</span><span class="token value attr-value">server-order.t_order</span>


<span class="token comment"># 打印SQL</span>
<span class="token key attr-name">spring.shardingsphere.props.sql-show</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、测试垂直分片" tabindex="-1"><a class="header-anchor" href="#_3、测试垂直分片" aria-hidden="true">#</a> 3、测试垂直分片</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>shardingjdbcdemo</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShardingTest</span> <span class="token punctuation">{</span>


    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">UserMapper</span> userMapper<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">OrderMapper</span> orderMapper<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 垂直分片：插入数据测试
     */</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsertOrderAndUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        user<span class="token punctuation">.</span><span class="token function">setUname</span><span class="token punctuation">(</span><span class="token string">&quot;强哥&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Order</span> order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        order<span class="token punctuation">.</span><span class="token function">setOrderNo</span><span class="token punctuation">(</span><span class="token string">&quot;ATGUIGU001&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        order<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        order<span class="token punctuation">.</span><span class="token function">setAmount</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        orderMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 垂直分片：查询数据测试
     */</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectFromOrderAndUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Order</span> order <span class="token operator">=</span> orderMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="常见错误" tabindex="-1"><a class="header-anchor" href="#常见错误" aria-hidden="true">#</a> 常见错误</h4><p><img src="`+M+`" alt="image-20220810163534068"></p><p>ShardingSphere-JDBC远程连接的方式默认的密码加密规则是：mysql_native_password</p><p>因此需要在服务器端修改服务器的密码加密规则，如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">USER</span> <span class="token string">&#39;root&#39;</span><span class="token variable">@&#39;%&#39;</span> IDENTIFIED <span class="token keyword">WITH</span> mysql_native_password <span class="token keyword">BY</span> <span class="token string">&#39;123456&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="第06章-shardingsphere-jdbc水平分片" tabindex="-1"><a class="header-anchor" href="#第06章-shardingsphere-jdbc水平分片" aria-hidden="true">#</a> 第06章 ShardingSphere-JDBC水平分片</h2><h3 id="_1、准备服务器-1" tabindex="-1"><a class="header-anchor" href="#_1、准备服务器-1" aria-hidden="true">#</a> 1、准备服务器</h3><p>服务器规划：使用<code>docker</code>方式创建如下容器</p><p><img src="`+j+`" alt="image-20220808033239206"></p><ul><li><p>服务器：容器名<code>server-order0</code>，端口<code>3310</code></p></li><li><p>服务器：容器名<code>server-order1</code>，端口<code>3311</code></p></li></ul><h4 id="_1-1、创建server-order0容器" tabindex="-1"><a class="header-anchor" href="#_1-1、创建server-order0容器" aria-hidden="true">#</a> 1.1、创建server-order0容器</h4><ul><li><strong>step1：创建容器：</strong></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\\</span>
<span class="token parameter variable">-p</span> <span class="token number">3310</span>:3306 <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /atguigu/server/order0/conf:/etc/mysql/conf.d <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /atguigu/server/order0/data:/var/lib/mysql <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> <span class="token punctuation">\\</span>
<span class="token parameter variable">--name</span> server-order0 <span class="token punctuation">\\</span>
mysql:8.0.29
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>step2：登录MySQL服务器：</strong></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#进入容器：</span>
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> server-order0 <span class="token function">env</span> <span class="token assign-left variable"><span class="token environment constant">LANG</span></span><span class="token operator">=</span>C.UTF-8 /bin/bash
<span class="token comment">#进入容器内的mysql命令行</span>
mysql <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-p</span>
<span class="token comment">#修改默认密码插件</span>
ALTER <span class="token environment constant">USER</span> <span class="token string">&#39;root&#39;</span>@<span class="token string">&#39;%&#39;</span> IDENTIFIED WITH mysql_native_password BY <span class="token string">&#39;123456&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>step3：创建数据库：</strong></li></ul><p><code>注意：</code>水平分片的id需要在业务层实现，<code>不能依赖数据库的主键自增</code></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> db_order<span class="token punctuation">;</span>
<span class="token keyword">USE</span> db_order<span class="token punctuation">;</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> t_order0 <span class="token punctuation">(</span>
  id <span class="token keyword">BIGINT</span><span class="token punctuation">,</span>
  order_no <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  user_id <span class="token keyword">BIGINT</span><span class="token punctuation">,</span>
  amount <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> 
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> t_order1 <span class="token punctuation">(</span>
  id <span class="token keyword">BIGINT</span><span class="token punctuation">,</span>
  order_no <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  user_id <span class="token keyword">BIGINT</span><span class="token punctuation">,</span>
  amount <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> 
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2、创建server-order1容器" tabindex="-1"><a class="header-anchor" href="#_1-2、创建server-order1容器" aria-hidden="true">#</a> 1.2、创建server-order1容器</h3><ul><li><strong>step1：创建容器：</strong></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\\</span>
<span class="token parameter variable">-p</span> <span class="token number">3311</span>:3306 <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /atguigu/server/order1/conf:/etc/mysql/conf.d <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /atguigu/server/order1/data:/var/lib/mysql <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> <span class="token punctuation">\\</span>
<span class="token parameter variable">--name</span> server-order1 <span class="token punctuation">\\</span>
mysql:8.0.29
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>step2：登录MySQL服务器：</strong></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#进入容器：</span>
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> server-order1 <span class="token function">env</span> <span class="token assign-left variable"><span class="token environment constant">LANG</span></span><span class="token operator">=</span>C.UTF-8 /bin/bash
<span class="token comment">#进入容器内的mysql命令行</span>
mysql <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-p</span>
<span class="token comment">#修改默认密码插件</span>
ALTER <span class="token environment constant">USER</span> <span class="token string">&#39;root&#39;</span>@<span class="token string">&#39;%&#39;</span> IDENTIFIED WITH mysql_native_password BY <span class="token string">&#39;123456&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>**step3：创建数据库：**和server-order0相同</li></ul><p><code>注意：</code>水平分片的id需要在业务层实现，不能依赖数据库的主键自增</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> db_order<span class="token punctuation">;</span>
<span class="token keyword">USE</span> db_order<span class="token punctuation">;</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> t_order0 <span class="token punctuation">(</span>
  id <span class="token keyword">BIGINT</span><span class="token punctuation">,</span>
  order_no <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  user_id <span class="token keyword">BIGINT</span><span class="token punctuation">,</span>
  amount <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> 
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> t_order1 <span class="token punctuation">(</span>
  id <span class="token keyword">BIGINT</span><span class="token punctuation">,</span>
  order_no <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  user_id <span class="token keyword">BIGINT</span><span class="token punctuation">,</span>
  amount <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> 
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、基本水平分片" tabindex="-1"><a class="header-anchor" href="#_2、基本水平分片" aria-hidden="true">#</a> 2、基本水平分片</h3><h4 id="_2-1、基本配置" tabindex="-1"><a class="header-anchor" href="#_2-1、基本配置" aria-hidden="true">#</a> 2.1、基本配置</h4><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment">#========================基本配置</span>
<span class="token comment"># 应用名称</span>
<span class="token key attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token value attr-value">sharging-jdbc-demo</span>
<span class="token comment"># 开发环境设置</span>
<span class="token key attr-name">spring.profiles.active</span><span class="token punctuation">=</span><span class="token value attr-value">dev</span>
<span class="token comment"># 内存模式</span>
<span class="token key attr-name">spring.shardingsphere.mode.type</span><span class="token punctuation">=</span><span class="token value attr-value">Memory</span>
<span class="token comment"># 打印SQl</span>
<span class="token key attr-name">spring.shardingsphere.props.sql-show</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2、数据源配置" tabindex="-1"><a class="header-anchor" href="#_2-2、数据源配置" aria-hidden="true">#</a> 2.2、数据源配置</h4><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment">#========================数据源配置</span>
<span class="token comment"># 配置真实数据源</span>
<span class="token key attr-name">spring.shardingsphere.datasource.names</span><span class="token punctuation">=</span><span class="token value attr-value">server-user,server-order0,server-order1</span>

<span class="token comment"># 配置第 1 个数据源</span>
<span class="token key attr-name">spring.shardingsphere.datasource.server-user.type</span><span class="token punctuation">=</span><span class="token value attr-value">com.zaxxer.hikari.HikariDataSource</span>
<span class="token key attr-name">spring.shardingsphere.datasource.server-user.driver-class-name</span><span class="token punctuation">=</span><span class="token value attr-value">com.mysql.jdbc.Driver</span>
<span class="token key attr-name">spring.shardingsphere.datasource.server-user.jdbc-url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql://192.168.100.201:3301/db_user</span>
<span class="token key attr-name">spring.shardingsphere.datasource.server-user.username</span><span class="token punctuation">=</span><span class="token value attr-value">root</span>
<span class="token key attr-name">spring.shardingsphere.datasource.server-user.password</span><span class="token punctuation">=</span><span class="token value attr-value">123456</span>

<span class="token comment"># 配置第 2 个数据源</span>
<span class="token key attr-name">spring.shardingsphere.datasource.server-order.type</span><span class="token punctuation">=</span><span class="token value attr-value">com.zaxxer.hikari.HikariDataSource</span>
<span class="token key attr-name">spring.shardingsphere.datasource.server-order.driver-class-name</span><span class="token punctuation">=</span><span class="token value attr-value">com.mysql.jdbc.Driver</span>
<span class="token key attr-name">spring.shardingsphere.datasource.server-order.jdbc-url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql://192.168.100.201:3310/db_order</span>
<span class="token key attr-name">spring.shardingsphere.datasource.server-order.username</span><span class="token punctuation">=</span><span class="token value attr-value">root</span>
<span class="token key attr-name">spring.shardingsphere.datasource.server-order.password</span><span class="token punctuation">=</span><span class="token value attr-value">123456</span>

<span class="token comment"># 配置第 3 个数据源</span>
<span class="token key attr-name">spring.shardingsphere.datasource.server-order.type</span><span class="token punctuation">=</span><span class="token value attr-value">com.zaxxer.hikari.HikariDataSource</span>
<span class="token key attr-name">spring.shardingsphere.datasource.server-order.driver-class-name</span><span class="token punctuation">=</span><span class="token value attr-value">com.mysql.jdbc.Driver</span>
<span class="token key attr-name">spring.shardingsphere.datasource.server-order.jdbc-url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql://192.168.100.201:3311/db_order</span>
<span class="token key attr-name">spring.shardingsphere.datasource.server-order.username</span><span class="token punctuation">=</span><span class="token value attr-value">root</span>
<span class="token key attr-name">spring.shardingsphere.datasource.server-order.password</span><span class="token punctuation">=</span><span class="token value attr-value">123456</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3、标椎分片表配置" tabindex="-1"><a class="header-anchor" href="#_2-3、标椎分片表配置" aria-hidden="true">#</a> 2.3、标椎分片表配置</h4><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment">#========================标准分片表配置（数据节点配置）</span>
<span class="token comment"># spring.shardingsphere.rules.sharding.tables.&lt;table-name&gt;.actual-data-nodes=值</span>
<span class="token comment"># 值由数据源名 + 表名组成，以小数点分隔。多个表以逗号分隔，支持 inline 表达式。</span>
<span class="token comment"># &lt;table-name&gt;：逻辑表名</span>
<span class="token key attr-name">spring.shardingsphere.rules.sharding.tables.t_user.actual-data-nodes</span><span class="token punctuation">=</span><span class="token value attr-value">server-user.t_user</span>
<span class="token key attr-name">spring.shardingsphere.rules.sharding.tables.t_order.actual-data-nodes</span><span class="token punctuation">=</span><span class="token value attr-value">server-order0.t_order0,server-order0.t_order1,server-order1.t_order0,server-order1.t_order1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改Order实体类的主键策略：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//@TableId(type = IdType.AUTO)//依赖数据库的主键自增策略</span>
<span class="token annotation punctuation">@TableId</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">IdType</span><span class="token punctuation">.</span><span class="token constant">ASSIGN_ID</span><span class="token punctuation">)</span><span class="token comment">//分布式id</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>测试：保留上面配置中的一个分片表节点分别进行测试，检查每个分片节点是否可用</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
     * 水平分片：插入数据测试
     */</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsertOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

    <span class="token class-name">Order</span> order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    order<span class="token punctuation">.</span><span class="token function">setOrderNo</span><span class="token punctuation">(</span><span class="token string">&quot;ATGUIGU001&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    order<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    order<span class="token punctuation">.</span><span class="token function">setAmount</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    orderMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4、行表达式" tabindex="-1"><a class="header-anchor" href="#_2-4、行表达式" aria-hidden="true">#</a> 2.4、行表达式</h3><p>优化上一步的分片表配置</p><p>https://shardingsphere.apache.org/document/5.1.1/cn/features/sharding/concept/inline-expression/</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment">#========================标准分片表配置（数据节点配置）</span>
<span class="token comment"># spring.shardingsphere.rules.sharding.tables.&lt;table-name&gt;.actual-data-nodes=值</span>
<span class="token comment"># 值由数据源名 + 表名组成，以小数点分隔。多个表以逗号分隔，支持 inline 表达式。</span>
<span class="token comment"># &lt;table-name&gt;：逻辑表名</span>
<span class="token key attr-name">spring.shardingsphere.rules.sharding.tables.t_user.actual-data-nodes</span><span class="token punctuation">=</span><span class="token value attr-value">server-user.t_user</span>
<span class="token key attr-name">spring.shardingsphere.rules.sharding.tables.t_order.actual-data-nodes</span><span class="token punctuation">=</span><span class="token value attr-value">server-order$-&gt;{0..1}.t_order$-&gt;{0..1}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-5、分片算法配置" tabindex="-1"><a class="header-anchor" href="#_2-5、分片算法配置" aria-hidden="true">#</a> 2.5、分片算法配置</h3><p><strong>水平分库：</strong></p><p>分片规则：order表中<code>user_id</code>为偶数时，数据插入<code>server-order0服务器</code>，<code>user_id</code>为奇数时，数据插入<code>server-order1服务器</code>。这样分片的好处是，同一个用户的订单数据，一定会被插入到同一台服务器上，查询一个用户的订单时效率较高。</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment">#------------------------分库策略</span>
<span class="token comment"># 分片列名称</span>
<span class="token key attr-name">spring.shardingsphere.rules.sharding.tables.t_order.database-strategy.standard.sharding-column</span><span class="token punctuation">=</span><span class="token value attr-value">user_id</span>
<span class="token comment"># 分片算法名称</span>
<span class="token key attr-name">spring.shardingsphere.rules.sharding.tables.t_order.database-strategy.standard.sharding-algorithm-name</span><span class="token punctuation">=</span><span class="token value attr-value">alg_inline_userid</span>

<span class="token comment">#------------------------分片算法配置</span>
<span class="token comment"># 行表达式分片算法</span>
<span class="token comment"># 分片算法类型</span>
<span class="token key attr-name">spring.shardingsphere.rules.sharding.sharding-algorithms.alg_inline_userid.type</span><span class="token punctuation">=</span><span class="token value attr-value">INLINE</span>
<span class="token comment"># 分片算法属性配置</span>
<span class="token key attr-name">spring.shardingsphere.rules.sharding.sharding-algorithms.alg_inline_userid.props.algorithm-expression</span><span class="token punctuation">=</span><span class="token value attr-value">server-order$-&gt;{user_id % 2}</span>

<span class="token comment"># 取模分片算法</span>
<span class="token comment"># 分片算法类型</span>
<span class="token key attr-name">spring.shardingsphere.rules.sharding.sharding-algorithms.alg_mod.type</span><span class="token punctuation">=</span><span class="token value attr-value">MOD</span>
<span class="token comment"># 分片算法属性配置</span>
<span class="token key attr-name">spring.shardingsphere.rules.sharding.sharding-algorithms.alg_mod.props.sharding-count</span><span class="token punctuation">=</span><span class="token value attr-value">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了方便测试，先设置只在 <code>t_order0</code>表上进行测试</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">xxx.actual-data-nodes</span><span class="token punctuation">=</span><span class="token value attr-value">server-order$-&gt;{0..1}.t_order0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>测试：可以分别测试行表达式分片算法和取模分片算法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
     * 水平分片：分库插入数据测试
     */</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsertOrderDatabaseStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Order</span> order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        order<span class="token punctuation">.</span><span class="token function">setOrderNo</span><span class="token punctuation">(</span><span class="token string">&quot;ATGUIGU001&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        order<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        order<span class="token punctuation">.</span><span class="token function">setAmount</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        orderMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>水平分表：</strong></p><p>分片规则：order表中<code>order_no的哈希值为偶数时</code>，数据插入对应服务器的<code>t_order0表</code>，<code>order_no的哈希值为奇数时</code>，数据插入对应服务器的<code>t_order1表</code>。因为order_no是字符串形式，因此不能直接取模。</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment">#------------------------分表策略</span>
<span class="token comment"># 分片列名称</span>
<span class="token key attr-name">spring.shardingsphere.rules.sharding.tables.t_order.table-strategy.standard.sharding-column</span><span class="token punctuation">=</span><span class="token value attr-value">order_no</span>
<span class="token comment"># 分片算法名称</span>
<span class="token key attr-name">spring.shardingsphere.rules.sharding.tables.t_order.table-strategy.standard.sharding-algorithm-name</span><span class="token punctuation">=</span><span class="token value attr-value">alg_hash_mod</span>


<span class="token comment">#------------------------分片算法配置</span>
<span class="token comment"># 哈希取模分片算法</span>
<span class="token comment"># 分片算法类型</span>
<span class="token key attr-name">spring.shardingsphere.rules.sharding.sharding-algorithms.alg_hash_mod.type</span><span class="token punctuation">=</span><span class="token value attr-value">HASH_MOD</span>
<span class="token comment"># 分片算法属性配置</span>
<span class="token key attr-name">spring.shardingsphere.rules.sharding.sharding-algorithms.alg_hash_mod.props.sharding-count</span><span class="token punctuation">=</span><span class="token value attr-value">2</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试前不要忘记将如下节点改回原来的状态</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">xxx.actual-data-nodes</span><span class="token punctuation">=</span><span class="token value attr-value">server-order$-&gt;{0..1}.t_order$-&gt;{0..1}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>测试：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
     * 水平分片：分表插入数据测试
     */</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsertOrderTableStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">Order</span> order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        order<span class="token punctuation">.</span><span class="token function">setOrderNo</span><span class="token punctuation">(</span><span class="token string">&quot;ATGUIGU&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        order<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        order<span class="token punctuation">.</span><span class="token function">setAmount</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        orderMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">Order</span> order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        order<span class="token punctuation">.</span><span class="token function">setOrderNo</span><span class="token punctuation">(</span><span class="token string">&quot;ATGUIGU&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        order<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span><span class="token number">2L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        order<span class="token punctuation">.</span><span class="token function">setAmount</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        orderMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
     * 测试哈希取模
     */</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

    <span class="token comment">//注意hash取模的结果是整个字符串hash后再取模，和数值后缀是奇数还是偶数无关</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;ATGUIGU001&quot;</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;ATGUIGU0011&quot;</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>查询测试：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
     * 水平分片：查询所有记录
     * 查询了两个数据源，每个数据源中使用UNION ALL连接两个表
     */</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testShardingSelectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Order</span><span class="token punctuation">&gt;</span></span> orders <span class="token operator">=</span> orderMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    orders<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
     * 水平分片：根据user_id查询记录
     * 查询了一个数据源，每个数据源中使用UNION ALL连接两个表
     */</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testShardingSelectByUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

    <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Order</span><span class="token punctuation">&gt;</span></span> orderQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    orderQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">&quot;user_id&quot;</span><span class="token punctuation">,</span> <span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Order</span><span class="token punctuation">&gt;</span></span> orders <span class="token operator">=</span> orderMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>orderQueryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
    orders<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-6、分布式序列算法" tabindex="-1"><a class="header-anchor" href="#_2-6、分布式序列算法" aria-hidden="true">#</a> 2.6、分布式序列算法</h3><p><strong>雪花算法：</strong></p><p>https://shardingsphere.apache.org/document/5.1.1/cn/features/sharding/concept/key-generator/</p><p>水平分片需要关注全局序列，因为不能简单的使用基于数据库的主键自增。</p><p>这里有两种方案：一种是基于MyBatisPlus的id策略；一种是ShardingSphere-JDBC的全局序列配置。</p><p><code>基于MyBatisPlus的id策略：</code>将Order类的id设置成如下形式</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@TableId</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">IdType</span><span class="token punctuation">.</span><span class="token constant">ASSIGN_ID</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>基于ShardingSphere-JDBC的全局序列配置</code>：和前面的MyBatisPlus的策略二选一</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment">#------------------------分布式序列策略配置</span>
<span class="token comment"># 分布式序列列名称</span>
<span class="token key attr-name">spring.shardingsphere.rules.sharding.tables.t_order.key-generate-strategy.column</span><span class="token punctuation">=</span><span class="token value attr-value">id</span>
<span class="token comment"># 分布式序列算法名称</span>
<span class="token key attr-name">spring.shardingsphere.rules.sharding.tables.t_order.key-generate-strategy.key-generator-name</span><span class="token punctuation">=</span><span class="token value attr-value">alg_snowflake</span>

<span class="token comment"># 分布式序列算法配置</span>
<span class="token comment"># 分布式序列算法类型</span>
<span class="token key attr-name">spring.shardingsphere.rules.sharding.key-generators.alg_snowflake.type</span><span class="token punctuation">=</span><span class="token value attr-value">SNOWFLAKE</span>
<span class="token comment"># 分布式序列算法属性配置</span>
<span class="token comment">#spring.shardingsphere.rules.sharding.key-generators.alg_snowflake.props.xxx=</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时，需要将实体类中的id策略修改成以下形式：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//当配置了shardingsphere-jdbc的分布式序列时，自动使用shardingsphere-jdbc的分布式序列</span>
<span class="token comment">//当没有配置shardingsphere-jdbc的分布式序列时，自动依赖数据库的主键自增策略</span>
<span class="token annotation punctuation">@TableId</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">IdType</span><span class="token punctuation">.</span><span class="token constant">AUTO</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、多表关联" tabindex="-1"><a class="header-anchor" href="#_3、多表关联" aria-hidden="true">#</a> 3、多表关联</h3><h4 id="_3-1、创建关联表" tabindex="-1"><a class="header-anchor" href="#_3-1、创建关联表" aria-hidden="true">#</a> 3.1、创建关联表</h4><p>在<code>server-order0、server-order1</code>服务器中分别创建两张订单详情表<code>t_order_item0、t_order_item1</code></p><p>我们希望<code>同一个用户的订单表和订单详情表中的数据都在同一个数据源中，避免跨库关联</code>，因此这两张表我们使用相同的分片策略。</p><p>那么在<code>t_order_item</code>中我们也需要创建<code>order_no</code>和<code>user_id</code>这两个分片键</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> t_order_item0<span class="token punctuation">(</span>
    id <span class="token keyword">BIGINT</span><span class="token punctuation">,</span>
    order_no <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    user_id <span class="token keyword">BIGINT</span><span class="token punctuation">,</span>
    price <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token identifier"><span class="token punctuation">\`</span>count<span class="token punctuation">\`</span></span> <span class="token keyword">INT</span><span class="token punctuation">,</span>
    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> t_order_item1<span class="token punctuation">(</span>
    id <span class="token keyword">BIGINT</span><span class="token punctuation">,</span>
    order_no <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    user_id <span class="token keyword">BIGINT</span><span class="token punctuation">,</span>
    price <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token identifier"><span class="token punctuation">\`</span>count<span class="token punctuation">\`</span></span> <span class="token keyword">INT</span><span class="token punctuation">,</span>
    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-2、创建实体类" tabindex="-1"><a class="header-anchor" href="#_3-2、创建实体类" aria-hidden="true">#</a> 3.2、创建实体类</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>shardingjdbcdemo<span class="token punctuation">.</span>entity</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@TableName</span><span class="token punctuation">(</span><span class="token string">&quot;t_order_item&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderItem</span> <span class="token punctuation">{</span>
    <span class="token comment">//当配置了shardingsphere-jdbc的分布式序列时，自动使用shardingsphere-jdbc的分布式序列</span>
    <span class="token annotation punctuation">@TableId</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">IdType</span><span class="token punctuation">.</span><span class="token constant">AUTO</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> orderNo<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> userId<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">BigDecimal</span> price<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> count<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-3、创建mapper" tabindex="-1"><a class="header-anchor" href="#_3-3、创建mapper" aria-hidden="true">#</a> 3.3、创建Mapper</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>shargingjdbcdemo<span class="token punctuation">.</span>mapper</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Mapper</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OrderItemMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderItem</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-4、配置关联表" tabindex="-1"><a class="header-anchor" href="#_3-4、配置关联表" aria-hidden="true">#</a> 3.4、配置关联表</h4><p>t_order_item的分片表、分片策略、分布式序列策略和t_order一致</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment">#------------------------标准分片表配置（数据节点配置）</span>
<span class="token key attr-name">spring.shardingsphere.rules.sharding.tables.t_order_item.actual-data-nodes</span><span class="token punctuation">=</span><span class="token value attr-value">server-order$-&gt;{0..1}.t_order_item$-&gt;{0..1}</span>

<span class="token comment">#------------------------分库策略</span>
<span class="token comment"># 分片列名称</span>
<span class="token key attr-name">spring.shardingsphere.rules.sharding.tables.t_order_item.database-strategy.standard.sharding-column</span><span class="token punctuation">=</span><span class="token value attr-value">user_id</span>
<span class="token comment"># 分片算法名称</span>
<span class="token key attr-name">spring.shardingsphere.rules.sharding.tables.t_order_item.database-strategy.standard.sharding-algorithm-name</span><span class="token punctuation">=</span><span class="token value attr-value">alg_mod</span>

<span class="token comment">#------------------------分表策略</span>
<span class="token comment"># 分片列名称</span>
<span class="token key attr-name">spring.shardingsphere.rules.sharding.tables.t_order_item.table-strategy.standard.sharding-column</span><span class="token punctuation">=</span><span class="token value attr-value">order_no</span>
<span class="token comment"># 分片算法名称</span>
<span class="token key attr-name">spring.shardingsphere.rules.sharding.tables.t_order_item.table-strategy.standard.sharding-algorithm-name</span><span class="token punctuation">=</span><span class="token value attr-value">alg_hash_mod</span>

<span class="token comment">#------------------------分布式序列策略配置</span>
<span class="token comment"># 分布式序列列名称</span>
<span class="token key attr-name">spring.shardingsphere.rules.sharding.tables.t_order_item.key-generate-strategy.column</span><span class="token punctuation">=</span><span class="token value attr-value">id</span>
<span class="token comment"># 分布式序列算法名称</span>
<span class="token key attr-name">spring.shardingsphere.rules.sharding.tables.t_order_item.key-generate-strategy.key-generator-name</span><span class="token punctuation">=</span><span class="token value attr-value">alg_snowflake</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-5、测试插入数据" tabindex="-1"><a class="header-anchor" href="#_3-5、测试插入数据" aria-hidden="true">#</a> 3.5、测试插入数据</h4><p>同一个用户的订单表和订单详情表中的数据都在同一个数据源中，避免跨库关联</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
     * 测试关联表插入
     */</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsertOrderAndOrderItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">Order</span> order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        order<span class="token punctuation">.</span><span class="token function">setOrderNo</span><span class="token punctuation">(</span><span class="token string">&quot;ATGUIGU&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        order<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        orderMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">OrderItem</span> orderItem <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            orderItem<span class="token punctuation">.</span><span class="token function">setOrderNo</span><span class="token punctuation">(</span><span class="token string">&quot;ATGUIGU&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            orderItem<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            orderItem<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            orderItem<span class="token punctuation">.</span><span class="token function">setCount</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            orderItemMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>orderItem<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">Order</span> order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        order<span class="token punctuation">.</span><span class="token function">setOrderNo</span><span class="token punctuation">(</span><span class="token string">&quot;ATGUIGU&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        order<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span><span class="token number">2L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        orderMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">OrderItem</span> orderItem <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            orderItem<span class="token punctuation">.</span><span class="token function">setOrderNo</span><span class="token punctuation">(</span><span class="token string">&quot;ATGUIGU&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            orderItem<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span><span class="token number">2L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            orderItem<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            orderItem<span class="token punctuation">.</span><span class="token function">setCount</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            orderItemMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>orderItem<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4、绑定表" tabindex="-1"><a class="header-anchor" href="#_4、绑定表" aria-hidden="true">#</a> 4、绑定表</h3><p>**需求：**查询每个订单的订单号和总订单金额</p><h4 id="_4-1、创建vo对象" tabindex="-1"><a class="header-anchor" href="#_4-1、创建vo对象" aria-hidden="true">#</a> 4.1、创建VO对象</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>shardingjdbcdemo<span class="token punctuation">.</span>entity</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderVo</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> orderNo<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">BigDecimal</span> amount<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-2、添加mapper方法" tabindex="-1"><a class="header-anchor" href="#_4-2、添加mapper方法" aria-hidden="true">#</a> 4.2、添加Mapper方法</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>shardingjdbcdemo<span class="token punctuation">.</span>mapper</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Mapper</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OrderMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Order</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;SELECT o.order_no, SUM(i.price * i.count) AS amount&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;FROM t_order o JOIN t_order_item i ON o.order_no = i.order_no&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;GROUP BY o.order_no&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderVo</span><span class="token punctuation">&gt;</span></span> <span class="token function">getOrderAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-3、测试关联查询" tabindex="-1"><a class="header-anchor" href="#_4-3、测试关联查询" aria-hidden="true">#</a> 4.3、测试关联查询</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 测试关联表查询
 */</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetOrderAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderVo</span><span class="token punctuation">&gt;</span></span> orderAmountList <span class="token operator">=</span> orderMapper<span class="token punctuation">.</span><span class="token function">getOrderAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    orderAmountList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-4、配置绑定表" tabindex="-1"><a class="header-anchor" href="#_4-4、配置绑定表" aria-hidden="true">#</a> 4.4、配置绑定表</h4><p>在原来水平分片配置的基础上添加如下配置：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment">#------------------------绑定表</span>
<span class="token key attr-name">spring.shardingsphere.rules.sharding.binding-tables[0]</span><span class="token punctuation">=</span><span class="token value attr-value">t_order,t_order_item</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>配置完绑定表后再次进行关联查询的测试：</p><ul><li><p>**如果不配置绑定表：测试的结果为8个SQL。**多表关联查询会出现笛卡尔积关联。</p></li><li><p><strong>如果配置绑定表：测试的结果为4个SQL。</strong> 多表关联查询不会出现笛卡尔积关联，关联查询效率将大大提升。</p></li></ul><p><code>绑定表：</code>指分片规则一致的一组分片表。 使用绑定表进行多表关联查询时，必须使用分片键进行关联，否则会出现笛卡尔积关联或跨库关联，从而影响查询效率。</p><h3 id="_5、广播表" tabindex="-1"><a class="header-anchor" href="#_5、广播表" aria-hidden="true">#</a> 5、广播表</h3><h4 id="_5-1、什么是广播表" tabindex="-1"><a class="header-anchor" href="#_5-1、什么是广播表" aria-hidden="true">#</a> 5.1、什么是广播表</h4><p>指所有的分片数据源中都存在的表，表结构及其数据在每个数据库中均完全一致。 适用于数据量不大且需要与海量数据的表进行关联查询的场景，例如：字典表。</p><p>广播具有以下特性：</p><p>（1）插入、更新操作会实时在所有节点上执行，保持各个分片的数据一致性</p><p>（2）查询操作，只从一个节点获取</p><p>（3）可以跟任何一个表进行 JOIN 操作</p><h4 id="_5-2、创建广播表" tabindex="-1"><a class="header-anchor" href="#_5-2、创建广播表" aria-hidden="true">#</a> 5.2、创建广播表</h4><p>在server-order0、server-order1和server-user服务器中分别创建t_dict表</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> t_dict<span class="token punctuation">(</span>
    id <span class="token keyword">BIGINT</span><span class="token punctuation">,</span>
    dict_type <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-3、程序实现" tabindex="-1"><a class="header-anchor" href="#_4-3、程序实现" aria-hidden="true">#</a> 4.3、程序实现</h4><h5 id="_4-3-1、创建实体类" tabindex="-1"><a class="header-anchor" href="#_4-3-1、创建实体类" aria-hidden="true">#</a> 4.3.1、创建实体类</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>shardingjdbcdemo<span class="token punctuation">.</span>entity</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@TableName</span><span class="token punctuation">(</span><span class="token string">&quot;t_dict&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dict</span> <span class="token punctuation">{</span>
    <span class="token comment">//可以使用MyBatisPlus的雪花算法</span>
    <span class="token annotation punctuation">@TableId</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">IdType</span><span class="token punctuation">.</span><span class="token constant">ASSIGN_ID</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> dictType<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-3-2、创建mapper" tabindex="-1"><a class="header-anchor" href="#_4-3-2、创建mapper" aria-hidden="true">#</a> 4.3.2、创建Mapper</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>shardingjdbcdemo<span class="token punctuation">.</span>mapper</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Mapper</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DictMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Dict</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-3-3、配置广播表" tabindex="-1"><a class="header-anchor" href="#_4-3-3、配置广播表" aria-hidden="true">#</a> 4.3.3、配置广播表</h5><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment">#数据节点可不配置，默认情况下，向所有数据源广播</span>
<span class="token key attr-name">spring.shardingsphere.rules.sharding.tables.t_dict.actual-data-nodes</span><span class="token punctuation">=</span><span class="token value attr-value">server-user.t_dict,server-order$-&gt;{0..1}.t_dict</span>

<span class="token comment"># 广播表</span>
<span class="token key attr-name">spring.shardingsphere.rules.sharding.broadcast-tables[0]</span><span class="token punctuation">=</span><span class="token value attr-value">t_dict</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-4、测试广播表" tabindex="-1"><a class="header-anchor" href="#_4-4、测试广播表" aria-hidden="true">#</a> 4.4、测试广播表</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> <span class="token class-name">DictMapper</span> dictMapper<span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
     * 广播表：每个服务器中的t_dict同时添加了新数据
     */</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testBroadcast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

    <span class="token class-name">Dict</span> dict <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dict<span class="token punctuation">.</span><span class="token function">setDictType</span><span class="token punctuation">(</span><span class="token string">&quot;type1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dictMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>dict<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
     * 查询操作，只从一个节点获取数据
     * 随机负载均衡规则
     */</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectBroadcast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Dict</span><span class="token punctuation">&gt;</span></span> dicts <span class="token operator">=</span> dictMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dicts<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第07章-启动shardingsphere-proxy" tabindex="-1"><a class="header-anchor" href="#第07章-启动shardingsphere-proxy" aria-hidden="true">#</a> 第07章 启动ShardingSphere-Proxy</h2><h3 id="_1、获取" tabindex="-1"><a class="header-anchor" href="#_1、获取" aria-hidden="true">#</a> 1、获取</h3><p>目前 ShardingSphere-Proxy 提供了 3 种获取方式：</p>`,323),U={href:"https://shardingsphere.apache.org/document/5.1.1/cn/user-manual/shardingsphere-proxy/startup/bin/",target:"_blank",rel:"noopener noreferrer"},D={href:"https://shardingsphere.apache.org/document/5.1.1/cn/user-manual/shardingsphere-proxy/startup/docker/",target:"_blank",rel:"noopener noreferrer"},C={href:"https://shardingsphere.apache.org/document/5.1.1/cn/user-manual/shardingsphere-proxy/startup/helm/",target:"_blank",rel:"noopener noreferrer"},B=p(`<h3 id="_2、使用二进制发布包安装" tabindex="-1"><a class="header-anchor" href="#_2、使用二进制发布包安装" aria-hidden="true">#</a> 2、使用二进制发布包安装</h3><p>二进制包既可以Linux系统运行，又可以在windows系统运行</p><p><strong>step1：解压二进制包</strong></p><p><code>apache-shardingsphere-5.1.1-shardingsphere-proxy-bin.tar.gz</code></p><p>windows：使用解压软件解压文件</p><p>Linux：将文件上传至/opt目录，并解压</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> apache-shardingsphere-5.1.1-shardingsphere-proxy-bin.tar.gz
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>step2：MySQL驱动</strong></p><p><code>mysql-connector-java-8.0.22.jar</code></p><p>将MySQl驱动放至解压目录中的<code>ext-lib</code>目录</p><p><strong>spte3：修改配置conf/server.yaml</strong></p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">rules</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token tag">!AUTHORITY</span>
    <span class="token key atrule">users</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> root@%<span class="token punctuation">:</span>root
    <span class="token key atrule">provider</span><span class="token punctuation">:</span>
      <span class="token key atrule">type</span><span class="token punctuation">:</span> ALL_PRIVILEGES_PERMITTED

<span class="token key atrule">props</span><span class="token punctuation">:</span>
  <span class="token key atrule">sql-show</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>spte4：启动ShardingSphere-Proxy</strong></p><p>Linux 操作系统请运行 <code>bin/start.sh</code></p><p>Windows 操作系统请运行 <code>bin/start.bat</code></p><p>指定端口号和配置文件目录：<code>bin/start.bat \${proxy_port} \${proxy_conf_directory}</code></p><p><strong>step5：远程连接ShardingSphere-Proxy</strong></p><p>远程访问</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysql <span class="token parameter variable">-h192.168.100.1</span> <span class="token parameter variable">-P3307</span> <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-p</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>step6：访问测试</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+t+`" alt="image-20220819152009158"></p><h3 id="_3、使用docker安装" tabindex="-1"><a class="header-anchor" href="#_3、使用docker安装" aria-hidden="true">#</a> 3、使用Docker安装</h3><p><strong>step1：启动Docker容器</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /atguigu/server/proxy-a/conf:/opt/shardingsphere-proxy/conf <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /atguigu/server/proxy-a/ext-lib:/opt/shardingsphere-proxy/ext-lib <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">ES_JAVA_OPTS</span><span class="token operator">=</span><span class="token string">&quot;-Xmx256m -Xms256m -Xmn128m&quot;</span> <span class="token punctuation">\\</span>
<span class="token parameter variable">-p</span> <span class="token number">3321</span>:3307 <span class="token punctuation">\\</span>
<span class="token parameter variable">--name</span> server-proxy-a <span class="token punctuation">\\</span>
apache/shardingsphere-proxy:5.1.1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>step2：上传MySQL驱动</strong></p><p>将MySQl驱动上传至<code>/atguigu/server/proxy-a/ext-lib</code>目录</p><p><strong>spte3：修改配置server.yaml</strong></p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">rules</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token tag">!AUTHORITY</span>
    <span class="token key atrule">users</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> root@%<span class="token punctuation">:</span>root
    <span class="token key atrule">provider</span><span class="token punctuation">:</span>
      <span class="token key atrule">type</span><span class="token punctuation">:</span> ALL_PRIVILEGES_PERMITTED

<span class="token key atrule">props</span><span class="token punctuation">:</span>
  <span class="token key atrule">sql-show</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将配置文件上传至<code>/atguigu/server/proxy-a/conf</code>目录</p><p><strong>spte4：重启容器</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> restart server-proxy-a
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>step5：远程连接ShardingSphere-Proxy</strong></p><p>ShardingSphere-Proxy容器中默认情况下没有mysql命令行客户端的安装，因此需要远程访问</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysql <span class="token parameter variable">-h192.168.100.201</span> <span class="token parameter variable">-P3321</span> <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-p</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>step6：访问测试</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+t+`" alt="image-20220819152009158"></p><p><strong>常见问题：docker容器无法远程连接</strong></p><p>容器可以成功的创建并启动，但是无法远程连接。排除防火墙和网络等问题后，看看是不是因为容器内存不足导致。</p><p><code>原因：</code>容器可分配内存不足</p><p><code>查看办法：</code>进入容器后查看ShardingSphere-Proxy的日志，如有有<code>cannot allocate memory</code>，则说明容器内存不足</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> server-proxy-a <span class="token function">env</span> <span class="token assign-left variable"><span class="token environment constant">LANG</span></span><span class="token operator">=</span>C.UTF-8 /bin/bash
<span class="token builtin class-name">cd</span> /opt/shardingsphere-proxy/logs
<span class="token function">tail</span> stdout.log 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+R+`" alt="image-20220819151154763"></p><p><code>解决方案：</code>创建容器的时候使用JVM参数</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token parameter variable">-e</span> <span class="token assign-left variable">ES_JAVA_OPTS</span><span class="token operator">=</span><span class="token string">&quot;-Xmx256m -Xms256m -Xmn128m&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="第08章-shardingsphere-proxy读写分离" tabindex="-1"><a class="header-anchor" href="#第08章-shardingsphere-proxy读写分离" aria-hidden="true">#</a> 第08章 ShardingSphere-Proxy读写分离</h2><h3 id="_1、修改配置文件" tabindex="-1"><a class="header-anchor" href="#_1、修改配置文件" aria-hidden="true">#</a> 1、修改配置文件</h3><p><strong>修改配置config-readwrite-splitting.yaml</strong></p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">schemaName</span><span class="token punctuation">:</span> readwrite_splitting_db

<span class="token key atrule">dataSources</span><span class="token punctuation">:</span>
  <span class="token key atrule">write_ds</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//192.168.100.201<span class="token punctuation">:</span>3306/db_user<span class="token punctuation">?</span>serverTimezone=UTC<span class="token important">&amp;useSSL=false</span>
    <span class="token key atrule">username</span><span class="token punctuation">:</span> root
    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>
    <span class="token key atrule">connectionTimeoutMilliseconds</span><span class="token punctuation">:</span> <span class="token number">30000</span>
    <span class="token key atrule">idleTimeoutMilliseconds</span><span class="token punctuation">:</span> <span class="token number">60000</span>
    <span class="token key atrule">maxLifetimeMilliseconds</span><span class="token punctuation">:</span> <span class="token number">1800000</span>
    <span class="token key atrule">maxPoolSize</span><span class="token punctuation">:</span> <span class="token number">50</span>
    <span class="token key atrule">minPoolSize</span><span class="token punctuation">:</span> <span class="token number">1</span>
  <span class="token key atrule">read_ds_0</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//192.168.100.201<span class="token punctuation">:</span>3307/db_user<span class="token punctuation">?</span>serverTimezone=UTC<span class="token important">&amp;useSSL=false</span>
    <span class="token key atrule">username</span><span class="token punctuation">:</span> root
    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>
    <span class="token key atrule">connectionTimeoutMilliseconds</span><span class="token punctuation">:</span> <span class="token number">30000</span>
    <span class="token key atrule">idleTimeoutMilliseconds</span><span class="token punctuation">:</span> <span class="token number">60000</span>
    <span class="token key atrule">maxLifetimeMilliseconds</span><span class="token punctuation">:</span> <span class="token number">1800000</span>
    <span class="token key atrule">maxPoolSize</span><span class="token punctuation">:</span> <span class="token number">50</span>
    <span class="token key atrule">minPoolSize</span><span class="token punctuation">:</span> <span class="token number">1</span>
  <span class="token key atrule">read_ds_1</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//192.168.100.201<span class="token punctuation">:</span>3308/db_user<span class="token punctuation">?</span>serverTimezone=UTC<span class="token important">&amp;useSSL=false</span>
    <span class="token key atrule">username</span><span class="token punctuation">:</span> root
    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>
    <span class="token key atrule">connectionTimeoutMilliseconds</span><span class="token punctuation">:</span> <span class="token number">30000</span>
    <span class="token key atrule">idleTimeoutMilliseconds</span><span class="token punctuation">:</span> <span class="token number">60000</span>
    <span class="token key atrule">maxLifetimeMilliseconds</span><span class="token punctuation">:</span> <span class="token number">1800000</span>
    <span class="token key atrule">maxPoolSize</span><span class="token punctuation">:</span> <span class="token number">50</span>
    <span class="token key atrule">minPoolSize</span><span class="token punctuation">:</span> <span class="token number">1</span>

<span class="token key atrule">rules</span><span class="token punctuation">:</span>
<span class="token punctuation">-</span> <span class="token tag">!READWRITE_SPLITTING</span>
  <span class="token key atrule">dataSources</span><span class="token punctuation">:</span>
    <span class="token key atrule">readwrite_ds</span><span class="token punctuation">:</span>
      <span class="token key atrule">type</span><span class="token punctuation">:</span> Static
      <span class="token key atrule">props</span><span class="token punctuation">:</span>
        <span class="token key atrule">write-data-source-name</span><span class="token punctuation">:</span> write_ds
        <span class="token key atrule">read-data-source-names</span><span class="token punctuation">:</span> read_ds_0<span class="token punctuation">,</span>read_ds_1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将配置文件上传至<code>/atguigu/server/proxy-a/conf</code>目录</p><p><strong>重启容器</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> restart server-proxy-a
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2、实时查看日志" tabindex="-1"><a class="header-anchor" href="#_2、实时查看日志" aria-hidden="true">#</a> 2、实时查看日志</h3><p>可以通过这种方式查看服务器中输出的SQL语句</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> server-proxy-a <span class="token function">env</span> <span class="token assign-left variable"><span class="token environment constant">LANG</span></span><span class="token operator">=</span>C.UTF-8 /bin/bash
<span class="token function">tail</span> <span class="token parameter variable">-f</span> /opt/shardingsphere-proxy/logs/stdout.log 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、远程访问测试" tabindex="-1"><a class="header-anchor" href="#_3、远程访问测试" aria-hidden="true">#</a> 3、远程访问测试</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">use</span> readwrite_splitting_db<span class="token punctuation">;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_user<span class="token punctuation">;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_user<span class="token punctuation">;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> t_user<span class="token punctuation">(</span>uname<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">&#39;wang5&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4、应用程序访问proxy" tabindex="-1"><a class="header-anchor" href="#_4、应用程序访问proxy" aria-hidden="true">#</a> 4、应用程序访问Proxy</h3><h4 id="_4-1、创建项目" tabindex="-1"><a class="header-anchor" href="#_4-1、创建项目" aria-hidden="true">#</a> 4.1、创建项目</h4><p>项目类型：Spring Initializr</p><p>SpringBoot脚手架：http://start.aliyun.com</p><p>项目名：sharding-proxy-demo</p><p>SpringBoot版本：2.3.7.RELEASE</p><h4 id="_4-2、添加依赖" tabindex="-1"><a class="header-anchor" href="#_4-2、添加依赖" aria-hidden="true">#</a> 4.2、添加依赖</h4><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.junit.vintage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit-vintage-engine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-3、创建实体类" tabindex="-1"><a class="header-anchor" href="#_4-3、创建实体类" aria-hidden="true">#</a> 4.3、创建实体类</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>shardingproxydemo<span class="token punctuation">.</span>entity</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@TableName</span><span class="token punctuation">(</span><span class="token string">&quot;t_user&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@TableId</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">IdType</span><span class="token punctuation">.</span><span class="token constant">AUTO</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> uname<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-4、创建mapper" tabindex="-1"><a class="header-anchor" href="#_4-4、创建mapper" aria-hidden="true">#</a> 4.4、创建Mapper</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>shardingproxydemo<span class="token punctuation">.</span>mapper</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Mapper</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-5、配置数据源" tabindex="-1"><a class="header-anchor" href="#_4-5、配置数据源" aria-hidden="true">#</a> 4.5、配置数据源</h4><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment"># 应用名称</span>
<span class="token key attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token value attr-value">sharding-proxy-demo</span>
<span class="token comment"># 开发环境设置</span>
<span class="token key attr-name">spring.profiles.active</span><span class="token punctuation">=</span><span class="token value attr-value">dev</span>

<span class="token comment">#mysql数据库连接（proxy）</span>
<span class="token key attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token value attr-value">com.mysql.jdbc.Driver</span>
<span class="token key attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql://192.168.100.201:3321/readwrite_splitting_db?serverTimezone=GMT%2B8&amp;useSSL=false</span>
<span class="token key attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token value attr-value">root</span>
<span class="token key attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token value attr-value">root</span>

<span class="token comment">#mybatis日志</span>
<span class="token key attr-name">mybatis-plus.configuration.log-impl</span><span class="token punctuation">=</span><span class="token value attr-value">org.apache.ibatis.logging.stdout.StdOutImpl</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-6、测试" tabindex="-1"><a class="header-anchor" href="#_4-6、测试" aria-hidden="true">#</a> 4.6、测试</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>shardingproxydemo</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">class</span> <span class="token class-name">ShardingProxyDemoApplicationTests</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">UserMapper</span> userMapper<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 读数据测试
     */</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第09章-shardingsphere-proxy垂直分片" tabindex="-1"><a class="header-anchor" href="#第09章-shardingsphere-proxy垂直分片" aria-hidden="true">#</a> 第09章 ShardingSphere-Proxy垂直分片</h2><h3 id="_1、修改配置文件-1" tabindex="-1"><a class="header-anchor" href="#_1、修改配置文件-1" aria-hidden="true">#</a> 1、修改配置文件</h3><p><strong>修改配置config-sharding.yaml</strong></p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">schemaName</span><span class="token punctuation">:</span> sharding_db

<span class="token key atrule">dataSources</span><span class="token punctuation">:</span>
  <span class="token key atrule">ds_0</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//192.168.100.201<span class="token punctuation">:</span>3301/db_user<span class="token punctuation">?</span>serverTimezone=UTC<span class="token important">&amp;useSSL=false</span>
    <span class="token key atrule">username</span><span class="token punctuation">:</span> root
    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>
    <span class="token key atrule">connectionTimeoutMilliseconds</span><span class="token punctuation">:</span> <span class="token number">30000</span>
    <span class="token key atrule">idleTimeoutMilliseconds</span><span class="token punctuation">:</span> <span class="token number">60000</span>
    <span class="token key atrule">maxLifetimeMilliseconds</span><span class="token punctuation">:</span> <span class="token number">1800000</span>
    <span class="token key atrule">maxPoolSize</span><span class="token punctuation">:</span> <span class="token number">50</span>
    <span class="token key atrule">minPoolSize</span><span class="token punctuation">:</span> <span class="token number">1</span>
  <span class="token key atrule">ds_1</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//192.168.100.201<span class="token punctuation">:</span>3302/db_order<span class="token punctuation">?</span>serverTimezone=UTC<span class="token important">&amp;useSSL=false</span>
    <span class="token key atrule">username</span><span class="token punctuation">:</span> root
    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>
    <span class="token key atrule">connectionTimeoutMilliseconds</span><span class="token punctuation">:</span> <span class="token number">30000</span>
    <span class="token key atrule">idleTimeoutMilliseconds</span><span class="token punctuation">:</span> <span class="token number">60000</span>
    <span class="token key atrule">maxLifetimeMilliseconds</span><span class="token punctuation">:</span> <span class="token number">1800000</span>
    <span class="token key atrule">maxPoolSize</span><span class="token punctuation">:</span> <span class="token number">50</span>
    <span class="token key atrule">minPoolSize</span><span class="token punctuation">:</span> <span class="token number">1</span>

<span class="token key atrule">rules</span><span class="token punctuation">:</span>
<span class="token punctuation">-</span> <span class="token tag">!SHARDING</span>
  <span class="token key atrule">tables</span><span class="token punctuation">:</span>
    <span class="token key atrule">t_user</span><span class="token punctuation">:</span>
      <span class="token key atrule">actualDataNodes</span><span class="token punctuation">:</span> ds_0.t_user
    <span class="token key atrule">t_order</span><span class="token punctuation">:</span>
      <span class="token key atrule">actualDataNodes</span><span class="token punctuation">:</span> ds_1.t_order
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、实时查看日志-1" tabindex="-1"><a class="header-anchor" href="#_2、实时查看日志-1" aria-hidden="true">#</a> 2、实时查看日志</h3><p>可以通过这种方式查看服务器中输出的SQL语句</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> server-proxy-a <span class="token function">env</span> <span class="token assign-left variable"><span class="token environment constant">LANG</span></span><span class="token operator">=</span>C.UTF-8 /bin/bash
<span class="token function">tail</span> <span class="token parameter variable">-f</span> /opt/shardingsphere-proxy/logs/stdout.log 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、远程访问测试-1" tabindex="-1"><a class="header-anchor" href="#_3、远程访问测试-1" aria-hidden="true">#</a> 3、远程访问测试</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">use</span> sharding_db<span class="token punctuation">;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_order<span class="token punctuation">;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_user<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第10章-shardingsphere-proxy水平分片" tabindex="-1"><a class="header-anchor" href="#第10章-shardingsphere-proxy水平分片" aria-hidden="true">#</a> 第10章 ShardingSphere-Proxy水平分片</h2><h3 id="_1、修改配置文件-2" tabindex="-1"><a class="header-anchor" href="#_1、修改配置文件-2" aria-hidden="true">#</a> 1、修改配置文件</h3><p><strong>修改配置config-sharding.yaml</strong></p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">schemaName</span><span class="token punctuation">:</span> sharding_db

<span class="token key atrule">dataSources</span><span class="token punctuation">:</span>
  <span class="token key atrule">ds_user</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//192.168.100.201<span class="token punctuation">:</span>3301/db_user<span class="token punctuation">?</span>serverTimezone=UTC<span class="token important">&amp;useSSL=false</span>
    <span class="token key atrule">username</span><span class="token punctuation">:</span> root
    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>
    <span class="token key atrule">connectionTimeoutMilliseconds</span><span class="token punctuation">:</span> <span class="token number">30000</span>
    <span class="token key atrule">idleTimeoutMilliseconds</span><span class="token punctuation">:</span> <span class="token number">60000</span>
    <span class="token key atrule">maxLifetimeMilliseconds</span><span class="token punctuation">:</span> <span class="token number">1800000</span>
    <span class="token key atrule">maxPoolSize</span><span class="token punctuation">:</span> <span class="token number">50</span>
    <span class="token key atrule">minPoolSize</span><span class="token punctuation">:</span> <span class="token number">1</span>
  <span class="token key atrule">ds_order0</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//192.168.100.201<span class="token punctuation">:</span>3310/db_order<span class="token punctuation">?</span>serverTimezone=UTC<span class="token important">&amp;useSSL=false</span>
    <span class="token key atrule">username</span><span class="token punctuation">:</span> root
    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>
    <span class="token key atrule">connectionTimeoutMilliseconds</span><span class="token punctuation">:</span> <span class="token number">30000</span>
    <span class="token key atrule">idleTimeoutMilliseconds</span><span class="token punctuation">:</span> <span class="token number">60000</span>
    <span class="token key atrule">maxLifetimeMilliseconds</span><span class="token punctuation">:</span> <span class="token number">1800000</span>
    <span class="token key atrule">maxPoolSize</span><span class="token punctuation">:</span> <span class="token number">50</span>
    <span class="token key atrule">minPoolSize</span><span class="token punctuation">:</span> <span class="token number">1</span>
  <span class="token key atrule">ds_order1</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//192.168.100.201<span class="token punctuation">:</span>3311/db_order<span class="token punctuation">?</span>serverTimezone=UTC<span class="token important">&amp;useSSL=false</span>
    <span class="token key atrule">username</span><span class="token punctuation">:</span> root
    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>
    <span class="token key atrule">connectionTimeoutMilliseconds</span><span class="token punctuation">:</span> <span class="token number">30000</span>
    <span class="token key atrule">idleTimeoutMilliseconds</span><span class="token punctuation">:</span> <span class="token number">60000</span>
    <span class="token key atrule">maxLifetimeMilliseconds</span><span class="token punctuation">:</span> <span class="token number">1800000</span>
    <span class="token key atrule">maxPoolSize</span><span class="token punctuation">:</span> <span class="token number">50</span>
    <span class="token key atrule">minPoolSize</span><span class="token punctuation">:</span> <span class="token number">1</span>

<span class="token key atrule">rules</span><span class="token punctuation">:</span>
<span class="token punctuation">-</span> <span class="token tag">!SHARDING</span>
  <span class="token key atrule">tables</span><span class="token punctuation">:</span>
    <span class="token key atrule">t_user</span><span class="token punctuation">:</span>
      <span class="token key atrule">actualDataNodes</span><span class="token punctuation">:</span> ds_user.t_user

    <span class="token key atrule">t_order</span><span class="token punctuation">:</span>
      <span class="token key atrule">actualDataNodes</span><span class="token punctuation">:</span> ds_order$<span class="token punctuation">{</span>0..1<span class="token punctuation">}</span>.t_order$<span class="token punctuation">{</span>0..1<span class="token punctuation">}</span>
      <span class="token key atrule">databaseStrategy</span><span class="token punctuation">:</span>
        <span class="token key atrule">standard</span><span class="token punctuation">:</span>
          <span class="token key atrule">shardingColumn</span><span class="token punctuation">:</span> user_id
          <span class="token key atrule">shardingAlgorithmName</span><span class="token punctuation">:</span> alg_mod
      <span class="token key atrule">tableStrategy</span><span class="token punctuation">:</span>
        <span class="token key atrule">standard</span><span class="token punctuation">:</span>
          <span class="token key atrule">shardingColumn</span><span class="token punctuation">:</span> order_no
          <span class="token key atrule">shardingAlgorithmName</span><span class="token punctuation">:</span> alg_hash_mod
      <span class="token key atrule">keyGenerateStrategy</span><span class="token punctuation">:</span>
        <span class="token key atrule">column</span><span class="token punctuation">:</span> id
        <span class="token key atrule">keyGeneratorName</span><span class="token punctuation">:</span> snowflake
    <span class="token key atrule">t_order_item</span><span class="token punctuation">:</span>
      <span class="token key atrule">actualDataNodes</span><span class="token punctuation">:</span> ds_order$<span class="token punctuation">{</span>0..1<span class="token punctuation">}</span>.t_order_item$<span class="token punctuation">{</span>0..1<span class="token punctuation">}</span>
      <span class="token key atrule">databaseStrategy</span><span class="token punctuation">:</span>
        <span class="token key atrule">standard</span><span class="token punctuation">:</span>
          <span class="token key atrule">shardingColumn</span><span class="token punctuation">:</span> user_id
          <span class="token key atrule">shardingAlgorithmName</span><span class="token punctuation">:</span> alg_mod
      <span class="token key atrule">tableStrategy</span><span class="token punctuation">:</span>
        <span class="token key atrule">standard</span><span class="token punctuation">:</span>
          <span class="token key atrule">shardingColumn</span><span class="token punctuation">:</span> order_no
          <span class="token key atrule">shardingAlgorithmName</span><span class="token punctuation">:</span> alg_hash_mod
      <span class="token key atrule">keyGenerateStrategy</span><span class="token punctuation">:</span>
        <span class="token key atrule">column</span><span class="token punctuation">:</span> id
        <span class="token key atrule">keyGeneratorName</span><span class="token punctuation">:</span> snowflake

  <span class="token key atrule">bindingTables</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> t_order<span class="token punctuation">,</span>t_order_item


  <span class="token key atrule">broadcastTables</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> t_dict

  <span class="token key atrule">shardingAlgorithms</span><span class="token punctuation">:</span>
    <span class="token key atrule">alg_inline_userid</span><span class="token punctuation">:</span>
      <span class="token key atrule">type</span><span class="token punctuation">:</span> INLINE
      <span class="token key atrule">props</span><span class="token punctuation">:</span>
        <span class="token key atrule">algorithm-expression</span><span class="token punctuation">:</span> server<span class="token punctuation">-</span>order$<span class="token punctuation">-</span><span class="token punctuation">&gt;</span><span class="token punctuation">{</span>user_id % 2<span class="token punctuation">}</span>
    <span class="token key atrule">alg_mod</span><span class="token punctuation">:</span>
      <span class="token key atrule">type</span><span class="token punctuation">:</span> MOD
      <span class="token key atrule">props</span><span class="token punctuation">:</span>
        <span class="token key atrule">sharding-count</span><span class="token punctuation">:</span> <span class="token number">2</span>
    <span class="token key atrule">alg_hash_mod</span><span class="token punctuation">:</span>
      <span class="token key atrule">type</span><span class="token punctuation">:</span> HASH_MOD
      <span class="token key atrule">props</span><span class="token punctuation">:</span>
        <span class="token key atrule">sharding-count</span><span class="token punctuation">:</span> <span class="token number">2</span>
  
  <span class="token key atrule">keyGenerators</span><span class="token punctuation">:</span>
    <span class="token key atrule">snowflake</span><span class="token punctuation">:</span>
      <span class="token key atrule">type</span><span class="token punctuation">:</span> SNOWFLAKE

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、实时查看日志-2" tabindex="-1"><a class="header-anchor" href="#_2、实时查看日志-2" aria-hidden="true">#</a> 2、实时查看日志</h3><p>可以通过这种方式查看服务器中输出的SQL语句</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> server-proxy-a <span class="token function">env</span> <span class="token assign-left variable"><span class="token environment constant">LANG</span></span><span class="token operator">=</span>C.UTF-8 /bin/bash
<span class="token function">tail</span> <span class="token parameter variable">-f</span> /opt/shardingsphere-proxy/logs/stdout.log 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、远程访问测试-2" tabindex="-1"><a class="header-anchor" href="#_3、远程访问测试-2" aria-hidden="true">#</a> 3、远程访问测试</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">use</span> sharding_db<span class="token punctuation">;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_order<span class="token punctuation">;</span> <span class="token comment">--测试水平分片</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_dict<span class="token punctuation">;</span> <span class="token comment">--测试广播表</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,92);function P(G,Q){const s=c("ExternalLinkIcon");return i(),o("div",null,[O,n("ul",null,[n("li",null,[n("a",U,[a("二进制发布包"),e(s)])]),n("li",null,[n("a",D,[a("Docker"),e(s)])]),n("li",null,[n("a",C,[a("Helm"),e(s)])])]),B])}const Y=l(N,[["render",P],["__file","sharding-sphere.html.vue"]]);export{Y as default};
