const l=JSON.parse('{"key":"v-34c6a5b7","path":"/quality/design-mode/design-singleton.html","title":"单例模式","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"1、单例模式的结构","slug":"_1、单例模式的结构","link":"#_1、单例模式的结构","children":[]},{"level":2,"title":"2、单例模式的实现","slug":"_2、单例模式的实现","link":"#_2、单例模式的实现","children":[{"level":3,"title":"2.1 饿汉式-方式1（静态变量方式）","slug":"_2-1-饿汉式-方式1-静态变量方式","link":"#_2-1-饿汉式-方式1-静态变量方式","children":[]},{"level":3,"title":"2.2 饿汉式-方式2（静态代码块方式）","slug":"_2-2-饿汉式-方式2-静态代码块方式","link":"#_2-2-饿汉式-方式2-静态代码块方式","children":[]},{"level":3,"title":"2.3 懒汉式-方式1（线程不安全）","slug":"_2-3-懒汉式-方式1-线程不安全","link":"#_2-3-懒汉式-方式1-线程不安全","children":[]},{"level":3,"title":"2.4 懒汉式-方式2（线程安全）","slug":"_2-4-懒汉式-方式2-线程安全","link":"#_2-4-懒汉式-方式2-线程安全","children":[]},{"level":3,"title":"2.5 懒汉式-方式3（双重检查锁）","slug":"_2-5-懒汉式-方式3-双重检查锁","link":"#_2-5-懒汉式-方式3-双重检查锁","children":[]},{"level":3,"title":"2.6 懒汉式-方式4（静态内部类方式）","slug":"_2-6-懒汉式-方式4-静态内部类方式","link":"#_2-6-懒汉式-方式4-静态内部类方式","children":[]},{"level":3,"title":"2.7 枚举方式","slug":"_2-7-枚举方式","link":"#_2-7-枚举方式","children":[]}]},{"level":2,"title":"3、 存在的问题","slug":"_3、-存在的问题","link":"#_3、-存在的问题","children":[{"level":3,"title":"3.1 问题演示","slug":"_3-1-问题演示","link":"#_3-1-问题演示","children":[]},{"level":3,"title":"3.2 问题的解决","slug":"_3-2-问题的解决","link":"#_3-2-问题的解决","children":[]}]},{"level":2,"title":"4、 JDK源码解析-Runtime类","slug":"_4、-jdk源码解析-runtime类","link":"#_4、-jdk源码解析-runtime类","children":[]}],"git":{"createdTime":1671609054000,"updatedTime":1673767263000,"contributors":[{"name":"xuliang","email":"895252461@qq.com","commits":1},{"name":"诗人都藏在水底","email":"895252461@qq.com","commits":1}]},"readingTime":{"minutes":10.55,"words":3166},"filePathRelative":"quality/design-mode/design-singleton.md","localizedDate":"2022年12月21日","excerpt":"<h1> 单例模式</h1>\\n<p>单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p>\\n<p>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p>\\n<h2> 1、单例模式的结构</h2>\\n<p>单例模式的主要有以下角色：</p>\\n<ul>\\n<li>单例类。只能创建一个实例的类</li>\\n<li>访问类。使用单例类</li>\\n</ul>\\n<h2> 2、单例模式的实现</h2>\\n"}');export{l as data};
