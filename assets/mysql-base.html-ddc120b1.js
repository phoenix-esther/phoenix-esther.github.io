import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as a,e}from"./app-e53dd85b.js";const t="/assets/image-20220723195315136-9cc7a65d.png",p="/assets/image-20220725193241606-e7e01768.png",o="/assets/image-20220725194331165-49c3ffb9.png",l="/assets/image-20220728100011856-5e714c80.png",c="/assets/image-20220728100045032-6528d998.png",i="/assets/image-20220728100122872-70c51e42.png",r="/assets/image-20220728100154176-d0272669.png",d="/assets/image-20220728135458222-3b7b8ddc.png",u="/assets/image-20220728135630025-3a9bd328.png",k="/assets/image-20220728135718177-ae40a8bb.png",m={},v=e('<h1 id="mysql-基础篇" tabindex="-1"><a class="header-anchor" href="#mysql-基础篇" aria-hidden="true">#</a> MySQL 基础篇</h1><h2 id="一-mysql概述" tabindex="-1"><a class="header-anchor" href="#一-mysql概述" aria-hidden="true">#</a> 一：MySQL概述</h2><p>在这一章节，我们主要介绍两个部分，数据库相关概念及MySQL数据库的介绍、下载、安装、启动及连接。</p><h3 id="_1-1-数据库相关概念" tabindex="-1"><a class="header-anchor" href="#_1-1-数据库相关概念" aria-hidden="true">#</a> 1.1 数据库相关概念</h3><p>在这一部分，我们先来讲解三个概念：数据库、数据库管理系统、SQL。</p><table><thead><tr><th>名称</th><th>全称</th><th>简称</th></tr></thead><tbody><tr><td>数据库</td><td>存储数据的仓库。数据是有组织的进行存储</td><td>Database</td></tr><tr><td>数据库管理系统</td><td>操纵和管理数据库的大型软件</td><td>Database Management System</td></tr><tr><td>SQL</td><td>操作关系型数据库的编程语言，定义了一套操作</td><td>Structured Query</td></tr></tbody></table><p>而目前主流的关系型数据库管理系统的市场占有率排名如下：</p><p><img src="'+t+`" alt="image-20220723195315136"></p><ul><li><p>Oracle：大型的收费数据库，Oracle公司产品，价格昂贵。</p></li><li><p>MySQL：开源免费的中小型数据库，后来Sun公司收购了MySQL，而Oracle又收购了Sun公司。目前Oracle推出了收费版本的MySQL，也提供了免费的社区版本。</p></li><li><p>SQL Server：Microsoft 公司推出的收费的中型数据库，C#、.net等语言常用。</p></li><li><p>PostgreSQL：开源免费的中小型数据库。</p></li><li><p>DB2：IBM公司的大型收费数据库产品。</p></li><li><p>SQLLite：嵌入式的微型数据库。Android内置的数据库采用的就是该数据库。</p></li><li><p>MariaDB：开源免费的中小型数据库。是MySQL数据库的另外一个分支、另外一个衍生产品，与MySQL数据库有很好的兼容性。</p></li></ul><p>而不论我们使用的是上面的哪一个关系型数据库，最终在操作时，都是使用SQL语言来进行统一操作，因为我们前面讲到SQL语言，是操作关系型数据库的 <strong>统一标准</strong> 。所以即使我们现在学习的是MySQL，假如我们以后到了公司，使用的是别的关系型数据库，如：Oracle、DB2、SQLServer，也完全不用担心，因为操作的方式都是一致的。</p><h3 id="_1-2-mysql数据库" tabindex="-1"><a class="header-anchor" href="#_1-2-mysql数据库" aria-hidden="true">#</a> 1.2 MySQL数据库</h3><h2 id="二-sql" tabindex="-1"><a class="header-anchor" href="#二-sql" aria-hidden="true">#</a> 二：SQL</h2><p>全称 Structured Query Language，结构化查询语言。操作关系型数据库的编程语言，定义了一套操作关系型数据库统一<strong>标准</strong> 。</p><h3 id="_2-1-sql通用语法" tabindex="-1"><a class="header-anchor" href="#_2-1-sql通用语法" aria-hidden="true">#</a> 2.1 SQL通用语法</h3><p>在学习具体的SQL语句之前，先来了解一下SQL语言的同于语法。</p><ol><li><p>SQL语句可以单行或多行书写，以分号结尾。</p></li><li><p>SQL语句可以使用空格/缩进来增强语句的可读性。</p></li><li><p>MySQL数据库的SQL语句不区分大小写，关键字建议使用大写。</p></li><li><p>注释：</p><ul><li><p>单行注释：-- 注释内容 或 # 注释内容</p></li><li><p>多行注释：/* 注释内容 */</p></li></ul></li></ol><h3 id="_2-2-sql分类" tabindex="-1"><a class="header-anchor" href="#_2-2-sql分类" aria-hidden="true">#</a> 2.2 SQL分类</h3><p>SQL语句，根据其功能，主要分为四类：DDL、DML、DQL、DCL。</p><table><thead><tr><th>分类</th><th>全称</th><th>说明</th></tr></thead><tbody><tr><td>DDL</td><td>Data Definition Language</td><td>数据定义语言，用来定义数据库对象(数据库，表，字段)</td></tr><tr><td>DML</td><td>Data Manipulation Language</td><td>数据操作语言，用来对数据库表中的数据进行增删改</td></tr><tr><td>DQL</td><td>Data Query Language</td><td>数据查询语言，用来查询数据库中表的记录</td></tr><tr><td>DCL</td><td>Data Control Language</td><td>数据控制语言，用来创建数据库用户、控制数据库的访问权限</td></tr></tbody></table><h3 id="_2-3-ddl" tabindex="-1"><a class="header-anchor" href="#_2-3-ddl" aria-hidden="true">#</a> 2.3 DDL</h3><p>Data Definition Language，数据定义语言，用来定义数据库对象(数据库，表，字段) 。</p><h4 id="_2-3-1-数据库操作" tabindex="-1"><a class="header-anchor" href="#_2-3-1-数据库操作" aria-hidden="true">#</a> 2.3.1 数据库操作</h4><h5 id="_1-查询所有数据库" tabindex="-1"><a class="header-anchor" href="#_1-查询所有数据库" aria-hidden="true">#</a> 1） <strong>查询所有数据库：</strong></h5><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">show</span> <span class="token keyword">databases</span> <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>案例展示：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">--------------------+</span>
<span class="token operator">|</span> <span class="token keyword">Database</span>           <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">--------------------+</span>
<span class="token operator">|</span> information_schema <span class="token operator">|</span>
<span class="token operator">|</span> learn              <span class="token operator">|</span>
<span class="token operator">|</span> mysql              <span class="token operator">|</span>
<span class="token operator">|</span> performance_schema <span class="token operator">|</span>
<span class="token operator">|</span> sakila             <span class="token operator">|</span>
<span class="token operator">|</span> sys                <span class="token operator">|</span>
<span class="token operator">|</span> world              <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">--------------------+</span>
<span class="token number">7</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-查询当前数据库" tabindex="-1"><a class="header-anchor" href="#_2-查询当前数据库" aria-hidden="true">#</a> 2） 查询当前数据库</h5><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>案例展示：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">use</span> learn<span class="token punctuation">;</span>
<span class="token keyword">Database</span> changed
mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">------------+</span>
<span class="token operator">|</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">------------+</span>
<span class="token operator">|</span> learn      <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">------------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-创建数据库" tabindex="-1"><a class="header-anchor" href="#_3-创建数据库" aria-hidden="true">#</a> 3） 创建数据库</h5><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">database</span> <span class="token punctuation">[</span> <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span> <span class="token punctuation">]</span> 数据库名 <span class="token punctuation">[</span> <span class="token keyword">default</span> <span class="token keyword">charset</span> 字符集 <span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token keyword">collate</span> 排序 规则 <span class="token punctuation">]</span> <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>案例展示：</p><p>创建一个数据库</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">create</span> <span class="token keyword">database</span> test<span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">--------------------+</span>
<span class="token operator">|</span> <span class="token keyword">Database</span>           <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">--------------------+</span>
<span class="token operator">|</span> information_schema <span class="token operator">|</span>
<span class="token operator">|</span> mysql              <span class="token operator">|</span>
<span class="token operator">|</span> performance_schema <span class="token operator">|</span>
<span class="token operator">|</span> sys                <span class="token operator">|</span>
<span class="token operator">|</span> test               <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">--------------------+</span>
<span class="token number">8</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在同一个数据库服务器中，不能存在两个重名的数据库，当我们再创建一个test数据库时，就会报错</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">create</span> <span class="token keyword">database</span> test<span class="token punctuation">;</span>
ERROR <span class="token number">1007</span> <span class="token punctuation">(</span>HY000<span class="token punctuation">)</span>: Can<span class="token string">&#39;t create database &#39;</span>test&#39;<span class="token punctuation">;</span> <span class="token keyword">database</span> <span class="token keyword">exists</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这时，我们可以通过 if not exists 参数进行判断，如果存在就不进行建库了</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">create</span> <span class="token keyword">database</span> <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span> test <span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected<span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在创建数据库是也可以指定一个默认的字符集</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">database</span> test <span class="token keyword">default</span> <span class="token keyword">charset</span> utf8mb4<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_4-删除数据库" tabindex="-1"><a class="header-anchor" href="#_4-删除数据库" aria-hidden="true">#</a> 4） 删除数据库</h5><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">drop</span> <span class="token keyword">database</span> <span class="token punctuation">[</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> <span class="token punctuation">]</span> 数据库名 <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>案例展示：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">drop</span> <span class="token keyword">database</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> test<span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在删除一个不存在的数据库时会报错，这时可以加上if exists参数</p><h5 id="_5-切换数据库" tabindex="-1"><a class="header-anchor" href="#_5-切换数据库" aria-hidden="true">#</a> 5). 切换数据库</h5><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">use</span> 数据库名<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们要操作某一个数据库下的表时，就需要通过该指令，切换到对应的数据库下，否则是不能操作的。比如，切换到learn数据，执行如下SQL：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">use</span> learn<span class="token punctuation">;</span>
<span class="token keyword">Database</span> changed
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-2-表操作-查询创建" tabindex="-1"><a class="header-anchor" href="#_2-3-2-表操作-查询创建" aria-hidden="true">#</a> 2.3.2 表操作 - 查询创建</h4><p>在执行下面的操作之前先创建一个表：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">\`</span>tb_user<span class="token punctuation">\`</span></span><span class="token punctuation">;</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>tb_user<span class="token punctuation">\`</span></span>  <span class="token punctuation">(</span>
  <span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;??&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;???&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>phone<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;???&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>email<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;??&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>profession<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;??&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>age<span class="token punctuation">\`</span></span> <span class="token keyword">tinyint</span> <span class="token keyword">UNSIGNED</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;??&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>gender<span class="token punctuation">\`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;?? , 1: ?, 2: ?&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>status<span class="token punctuation">\`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;??&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>createtime<span class="token punctuation">\`</span></span> <span class="token keyword">datetime</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;????&#39;</span><span class="token punctuation">,</span>
  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token operator">=</span> <span class="token number">25</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> <span class="token operator">=</span> utf8mb4 <span class="token keyword">COLLATE</span> <span class="token operator">=</span> utf8mb4_0900_ai_ci <span class="token keyword">COMMENT</span> <span class="token operator">=</span> <span class="token string">&#39;?????&#39;</span> ROW_FORMAT <span class="token operator">=</span> Dynamic<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_1-查询当前数据库所有表" tabindex="-1"><a class="header-anchor" href="#_1-查询当前数据库所有表" aria-hidden="true">#</a> 1) 查询当前数据库所有表</h5><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>比如,我们可以切换到sys这个系统数据库,并查看系统数据库中的所有表结构。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">use</span> sys<span class="token punctuation">;</span> 
<span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>显示结果：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysql<span class="token operator">&gt;</span> use sys<span class="token punctuation">;</span>
Database changed
mysql<span class="token operator">&gt;</span> show tables<span class="token punctuation">;</span>
+-----------------------------------------------+
<span class="token operator">|</span> Tables_in_sys                                 <span class="token operator">|</span>
+-----------------------------------------------+
<span class="token operator">|</span> host_summary                                  <span class="token operator">|</span>
<span class="token operator">|</span> host_summary_by_file_io                       <span class="token operator">|</span>
<span class="token operator">|</span> host_summary_by_file_io_type                  <span class="token operator">|</span>
<span class="token operator">|</span> host_summary_by_stages                        <span class="token operator">|</span>
<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>
<span class="token operator">|</span> x<span class="token variable">$waits_by_user_by_latency</span>                    <span class="token operator">|</span>
<span class="token operator">|</span> x<span class="token variable">$waits_global_by_latency</span>                     <span class="token operator">|</span>
+-----------------------------------------------+
<span class="token number">101</span> rows <span class="token keyword">in</span> <span class="token builtin class-name">set</span> <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-查看指定表结构" tabindex="-1"><a class="header-anchor" href="#_2-查看指定表结构" aria-hidden="true">#</a> 2) 查看指定表结构</h5><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">desc</span> 表名 <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过这条指令，我们可以查看到指定表的字段，字段的类型、是否可以为NULL，是否存在默认值等信息。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysql<span class="token operator">&gt;</span> desc tb_user<span class="token punctuation">;</span>
+------------+------------------+------+-----+---------+----------------+
<span class="token operator">|</span> Field      <span class="token operator">|</span> Type             <span class="token operator">|</span> Null <span class="token operator">|</span> Key <span class="token operator">|</span> Default <span class="token operator">|</span> Extra          <span class="token operator">|</span>
+------------+------------------+------+-----+---------+----------------+
<span class="token operator">|</span> <span class="token function">id</span>         <span class="token operator">|</span> int              <span class="token operator">|</span> NO   <span class="token operator">|</span> PRI <span class="token operator">|</span> NULL    <span class="token operator">|</span> auto_increment <span class="token operator">|</span>
<span class="token operator">|</span> name       <span class="token operator">|</span> varchar<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>      <span class="token operator">|</span> NO   <span class="token operator">|</span>     <span class="token operator">|</span> NULL    <span class="token operator">|</span>                <span class="token operator">|</span>
<span class="token operator">|</span> phone      <span class="token operator">|</span> varchar<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>      <span class="token operator">|</span> NO   <span class="token operator">|</span>     <span class="token operator">|</span> NULL    <span class="token operator">|</span>                <span class="token operator">|</span>
<span class="token operator">|</span> email      <span class="token operator">|</span> varchar<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>     <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> NULL    <span class="token operator">|</span>                <span class="token operator">|</span>
<span class="token operator">|</span> profession <span class="token operator">|</span> varchar<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>      <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> NULL    <span class="token operator">|</span>                <span class="token operator">|</span>
<span class="token operator">|</span> age        <span class="token operator">|</span> tinyint unsigned <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> NULL    <span class="token operator">|</span>                <span class="token operator">|</span>
<span class="token operator">|</span> gender     <span class="token operator">|</span> char<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>          <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> NULL    <span class="token operator">|</span>                <span class="token operator">|</span>
<span class="token operator">|</span> status     <span class="token operator">|</span> char<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>          <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> NULL    <span class="token operator">|</span>                <span class="token operator">|</span>
<span class="token operator">|</span> createtime <span class="token operator">|</span> datetime         <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> NULL    <span class="token operator">|</span>                <span class="token operator">|</span>
+------------+------------------+------+-----+---------+----------------+
<span class="token number">9</span> rows <span class="token keyword">in</span> <span class="token builtin class-name">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-查询指定表的建表语句" tabindex="-1"><a class="header-anchor" href="#_3-查询指定表的建表语句" aria-hidden="true">#</a> 3) 查询指定表的建表语句</h5><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">table</span> 表名 <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过这条指令，主要是用来查看建表语句的，而有部分参数我们在创建表的时候，并未指定也会查询到，因为这部分是数据库的默认值，如：存储引擎、字符集等。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysql<span class="token operator">&gt;</span> show create table tb_user<span class="token punctuation">;</span>
+---------+----------+
<span class="token operator">|</span> Table   <span class="token operator">|</span> Create Table  <span class="token operator">|</span>
+---------+----------+
<span class="token operator">|</span> tb_user <span class="token operator">|</span> CREATE TABLE <span class="token variable"><span class="token variable">\`</span>tb_user<span class="token variable">\`</span></span> <span class="token punctuation">(</span>
  <span class="token variable"><span class="token variable">\`</span><span class="token function">id</span><span class="token variable">\`</span></span> int NOT NULL AUTO_INCREMENT COMMENT <span class="token string">&#39;主键&#39;</span>,
  <span class="token variable"><span class="token variable">\`</span>name<span class="token variable">\`</span></span> varchar<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> NOT NULL COMMENT <span class="token string">&#39;用户名&#39;</span>,
  <span class="token variable"><span class="token variable">\`</span>phone<span class="token variable">\`</span></span> varchar<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> NOT NULL COMMENT <span class="token string">&#39;手机号&#39;</span>,
  <span class="token variable"><span class="token variable">\`</span>email<span class="token variable">\`</span></span> varchar<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> DEFAULT NULL COMMENT <span class="token string">&#39;邮箱&#39;</span>,
  <span class="token variable"><span class="token variable">\`</span>profession<span class="token variable">\`</span></span> varchar<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> DEFAULT NULL COMMENT <span class="token string">&#39;专业&#39;</span>,
  <span class="token variable"><span class="token variable">\`</span>age<span class="token variable">\`</span></span> tinyint unsigned DEFAULT NULL COMMENT <span class="token string">&#39;年龄&#39;</span>,
  <span class="token variable"><span class="token variable">\`</span>gender<span class="token variable">\`</span></span> char<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> DEFAULT NULL COMMENT <span class="token string">&#39;性别 , 1: 男, 2: 女&#39;</span>,
  <span class="token variable"><span class="token variable">\`</span>status<span class="token variable">\`</span></span> char<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> DEFAULT NULL COMMENT <span class="token string">&#39;状态&#39;</span>,
  <span class="token variable"><span class="token variable">\`</span>createtime<span class="token variable">\`</span></span> datetime DEFAULT NULL COMMENT <span class="token string">&#39;创建时间&#39;</span>,
  PRIMARY KEY <span class="token punctuation">(</span><span class="token variable"><span class="token variable">\`</span><span class="token function">id</span><span class="token variable">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token assign-left variable">ENGINE</span><span class="token operator">=</span>InnoDB <span class="token assign-left variable">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">26</span> DEFAULT <span class="token assign-left variable">CHARSET</span><span class="token operator">=</span>utf8mb4 <span class="token assign-left variable">COLLATE</span><span class="token operator">=</span>utf8mb4_0900_ai_ci <span class="token assign-left variable">COMMENT</span><span class="token operator">=</span><span class="token string">&#39;系统用户表&#39;</span> <span class="token operator">|</span>
+---------+----------+
<span class="token number">1</span> row <span class="token keyword">in</span> <span class="token builtin class-name">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-创建表结构" tabindex="-1"><a class="header-anchor" href="#_4-创建表结构" aria-hidden="true">#</a> 4) 创建表结构</h5><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> 表名<span class="token punctuation">(</span> 
	字段<span class="token number">1</span> 字段<span class="token number">1</span>类型 <span class="token punctuation">[</span><span class="token keyword">COMMENT</span> 字段<span class="token number">1</span>注释 <span class="token punctuation">]</span><span class="token punctuation">,</span> 
    字段<span class="token number">2</span> 字段<span class="token number">2</span>类型 <span class="token punctuation">[</span><span class="token keyword">COMMENT</span> 字段<span class="token number">2</span>注释 <span class="token punctuation">]</span><span class="token punctuation">,</span> 
    字段<span class="token number">3</span> 字段<span class="token number">3</span>类型 <span class="token punctuation">[</span><span class="token keyword">COMMENT</span> 字段<span class="token number">3</span>注释 <span class="token punctuation">]</span><span class="token punctuation">,</span> 
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 
    字段n 字段n类型 <span class="token punctuation">[</span><span class="token keyword">COMMENT</span> 字段n注释 <span class="token punctuation">]</span> 
<span class="token punctuation">)</span> <span class="token punctuation">[</span> <span class="token keyword">COMMENT</span> 表注释 <span class="token punctuation">]</span> <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>比如，我们创建一张表 tb_user ，对应的结构如下：</p><table><thead><tr><th>id</th><th>name</th><th>age</th><th>gender</th></tr></thead><tbody><tr><td>1</td><td>令狐冲</td><td>28</td><td>男</td></tr><tr><td>2</td><td>东方不败</td><td>32</td><td>男</td></tr></tbody></table><p>那么建表语句为：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> tb_user<span class="token punctuation">(</span> 
	id <span class="token keyword">int</span> <span class="token keyword">comment</span> <span class="token string">&#39;编号&#39;</span><span class="token punctuation">,</span> 
    name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">comment</span> <span class="token string">&#39;姓名&#39;</span><span class="token punctuation">,</span> 
    age <span class="token keyword">int</span> <span class="token keyword">comment</span> <span class="token string">&#39;年龄&#39;</span><span class="token punctuation">,</span> 
    gender <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">comment</span> <span class="token string">&#39;性别&#39;</span> 
<span class="token punctuation">)</span> <span class="token keyword">comment</span> <span class="token string">&#39;用户表&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-3-表操作-数据类型" tabindex="-1"><a class="header-anchor" href="#_2-3-3-表操作-数据类型" aria-hidden="true">#</a> 2.3.3 表操作 - 数据类型</h4><p>在上述的建表语句中，我们在指定字段的数据类型时，用到了int ，varchar，那么在MySQL中除了以上的数据类型，还有哪些常见的数据类型呢？ 接下来,我们就来详细介绍一下MySQL的数据类型。</p><p>MySQL中的数据类型有很多，主要分为三类：数值类型、字符串类型、日期时间类型。</p><h5 id="_1-数值类型" tabindex="-1"><a class="header-anchor" href="#_1-数值类型" aria-hidden="true">#</a> 1) 数值类型</h5><p>数值类型主要分为两大类：</p><ul><li>严格数值类型：INTEGER,SMALLINT,DECIMAL,NUMERIC</li><li>近似数值类型：FLOAT,REAL,DOUBLE,PERCISION</li></ul><p>在此基础上，增加了TINYINT,MEDIUMINT,BIGINT.</p><table><thead><tr><th>类型</th><th>大小</th><th>有符号（SIGNED）范围</th><th>无符号（UNSIGNED）范围</th><th>描述</th></tr></thead><tbody><tr><td>TINYINT</td><td>1byte</td><td>(-128，127)</td><td>(0，255)</td><td>小整数值</td></tr><tr><td>SMALLINT</td><td>2bytes</td><td>(-32768，32767)</td><td>(0，65535)</td><td>大整数值</td></tr><tr><td>MEDIUMINT</td><td>3bytes</td><td>(-8388608，8388607)</td><td>(0，16777215)</td><td>大整数值</td></tr><tr><td>INT/INTEGER</td><td>4bytes</td><td>(-2147483648， 2147483647)</td><td>(0，4294967295)</td><td>大整数值</td></tr><tr><td>BIGINT</td><td>8bytes</td><td>(-2^63，2^63-1)</td><td>(0，2^64-1)</td><td>极大整数值</td></tr><tr><td>FLOAT</td><td>4bytes</td><td>(-3.4028 E+38， 3.4028 E+38)</td><td>0 和 (1.17549 E- 38，3.40282 E+38)</td><td>单精度浮点数值</td></tr><tr><td>DOUBLE</td><td>8bytes</td><td>(-1.79769 E+308， 1.79769 E+308)</td><td>0 和 (2.22507 E-308， 1.79769 E+308)</td><td>双精度浮点数值</td></tr><tr><td>DECIMAL(M,D)</td><td>M+2</td><td>依赖于M(精度)和D(标度) 的值</td><td>依赖于M(精度)和D(标度)的 值</td><td>小数值(精确定点数)</td></tr><tr><td>BIT(M)</td><td>1~8</td><td></td><td></td><td></td></tr></tbody></table><p><strong>整数类型：</strong></p><p>在定义整数类型时，可以通过小括号的方式显示指定宽度，例如，int(5)表示当数值宽度小于5时，在数字前面填满宽度。<strong>需要注意的是这里指定的宽度只是用来配合填充的，并不会影响字段的精度。</strong></p><p>zerofill： 指定列的数值如果小于指定的宽度，前面填充0。如果一列指定为zerofill，则mysql自动为改了添加UNSIGNED</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysql<span class="token operator">&gt;</span> create table t1 <span class="token punctuation">(</span>t1 int, t2 int<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> zerofill<span class="token punctuation">)</span><span class="token punctuation">;</span>
Query OK, <span class="token number">0</span> rows affected, <span class="token number">2</span> warnings <span class="token punctuation">(</span><span class="token number">0.02</span> sec<span class="token punctuation">)</span>

mysql<span class="token operator">&gt;</span> insert into t1 values<span class="token punctuation">(</span><span class="token number">1,1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Query OK, <span class="token number">1</span> row affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> * from t1<span class="token punctuation">;</span>
+------+-------+
<span class="token operator">|</span> t1   <span class="token operator">|</span> t2    <span class="token operator">|</span>
+------+-------+
<span class="token operator">|</span>    <span class="token number">1</span> <span class="token operator">|</span> 00001 <span class="token operator">|</span>
+------+-------+
<span class="token number">1</span> row <span class="token keyword">in</span> <span class="token builtin class-name">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
-- 这里可看到，222222222明显超出了宽度，但是依然正确存储了，只是没有填充0
mysql<span class="token operator">&gt;</span> insert into t1 values<span class="token punctuation">(</span><span class="token number">111111111</span>, <span class="token number">222222222</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Query OK, <span class="token number">1</span> row affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> * from t1<span class="token punctuation">;</span>
+-----------+-----------+
<span class="token operator">|</span> t1        <span class="token operator">|</span> t2        <span class="token operator">|</span>
+-----------+-----------+
<span class="token operator">|</span>         <span class="token number">1</span> <span class="token operator">|</span>     00001 <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token number">111111111</span> <span class="token operator">|</span> <span class="token number">222222222</span> <span class="token operator">|</span>
+-----------+-----------+
<span class="token number">2</span> rows <span class="token keyword">in</span> <span class="token builtin class-name">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>UNSIGNED：无符号整数</p><p>AUTO_INCREMENT：自增，一个表最多只能有一个自增列。通常为注解，使用NOT NULL 和PRIMARY KEY 或UNIQUE限定。</p><p><strong>小数类型</strong></p><p>小数类型分为两种：浮点数和定点数，浮点数包括float和double。定点数只有decimal。定点数在mysql内部以字符串形式存放。decimal可以用(M,D)的方式来指定精度，M用来显示指定的位数，D用来指定位于小数点后边的位数</p><h5 id="_2-字符串类型" tabindex="-1"><a class="header-anchor" href="#_2-字符串类型" aria-hidden="true">#</a> 2) 字符串类型</h5><table><thead><tr><th>类型</th><th>大小</th><th>描述</th></tr></thead><tbody><tr><td>CHAR</td><td>0-255 bytes</td><td>定长字符串(需要指定长度)</td></tr><tr><td>VARCHAR</td><td>0-65535 bytes</td><td>变长字符串(需要指定长度)</td></tr><tr><td>TINYBLOB</td><td>0-255 bytes</td><td>不超过255个字符的二进制数据</td></tr><tr><td>TINYTEXT</td><td>0-255 bytes</td><td>短文本字符串</td></tr><tr><td>BLOB</td><td>0-65 535 bytes</td><td>二进制形式的长文本数据</td></tr><tr><td>TEXT</td><td>0-65 535 bytes</td><td>长文本数据</td></tr><tr><td>MEDIUMBLOB</td><td>0-16 777 215 bytes</td><td>二进制形式的中等长度文本数据</td></tr><tr><td>MEDIUMTEXT</td><td>0-16 777 215 bytes</td><td>中等长度文本数据</td></tr><tr><td>LONGBLOB</td><td>0-4 294 967 295 bytes</td><td>二进制形式的极大文本数据</td></tr><tr><td>LONGTEXT</td><td>0-4 294 967 295 bytes</td><td>极大文本数据</td></tr></tbody></table><p>char 与 varchar 都可以描述字符串，char是定长字符串，指定长度多长，就占用多少个字符，和字段值的长度无关 。而varchar是变长字符串，指定的长度为最大占用长度 。相对来说，char的性能会更高些。</p><ol><li><strong>CHAR和VARCHAR</strong></li></ol><p>char的长度固定，创建表时声明，长度为0~255</p><p>varchar为变长字符串，长度为0~65535.</p><p>在检索时，char列会删除尾部空格，varchar则保留这些空格（注意：这里指的是在插入的字符串中尾部包含的空格）</p><p><strong>使用建议</strong>：在InnoDB存储引擎中，建议使用VARCHAR类型。对于InnoDB数据表，内部的行存储格式没有区分固定长度和可变长度列（所有数据行都使用指向数据列值的头指针），因此在本质上，使用固定长度的CHAR列不一定比使用可变长度VARCHAR列性能要好。因而，主要的性能因素是数据行使用的存储总量。由于CHAR平均占用的空间多于VARCHAR，因此使用VARCHAR来最小化需要处理的数据行的存储总量和磁盘I/O是比较好的。</p><ol start="2"><li><strong>TEXT和BLOB</strong></li></ol><p>TEXT保存字符数据，BLOB保存二进制数据</p><p>BLOB和TEXT值会引起一些性能问题，特别是在执行了大量的删除操作时。删除操作会在数据表中留下很多空洞，以后填入这些空洞的记录在插入性能上会有影响。为提高性能，建议定期使用OPTIMIZE TABLE功能对这类表进行碎片整理。</p><h5 id="_3-日期时间类型" tabindex="-1"><a class="header-anchor" href="#_3-日期时间类型" aria-hidden="true">#</a> 3) 日期时间类型</h5><table><thead><tr><th>类型</th><th>大小</th><th>范围</th><th>格式</th><th>描述</th></tr></thead><tbody><tr><td>DATE</td><td>4</td><td>1000-01-01 至 9999-12-31</td><td>YYYY-MM-DD</td><td>日期值</td></tr><tr><td>TIME</td><td>3</td><td>-838:59:59 至 838:59:59</td><td>HH:MM:SS</td><td>时间值或持续时间</td></tr><tr><td>YEAR</td><td>1</td><td>1901 至 2155</td><td>YYYY</td><td>年份值</td></tr><tr><td>DATETIME</td><td>8</td><td>1000-01-01 00:00:00 至 9999-12-31 23:59:59</td><td>YYYY-MM-DD HH:MM:SS</td><td>混合日期和时间值</td></tr><tr><td>TIMESTAMP</td><td>4</td><td>1970-01-01 00:00:01 至 2038-01-19 03:14:07</td><td>YYYY-MM-DD HH:MM:SS</td><td>混合日期和时间值，时间戳</td></tr></tbody></table><p><strong>TIMESTAMP</strong></p><p>这里主要介绍一下TIMESTAMP类型的基本特性：</p><p>首先来看一下参数explicit_defaults_for_timestamp 这个参数(5.6版本后引入)</p><p>当这个参数为off时，当创建表的时候，mysql只会给表中的第一个timestamp类型的字段是指默认值为系统日期</p><p>当这个参数为on时，则mysql不会做任何配置，所有的设置都需要手动设置。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysql<span class="token operator">&gt;</span> show variables like <span class="token string">&#39;%explicit_defaults_for_timestamp%&#39;</span><span class="token punctuation">;</span>
+---------------------------------+-------+
<span class="token operator">|</span> Variable_name                   <span class="token operator">|</span> Value <span class="token operator">|</span>
+---------------------------------+-------+
<span class="token operator">|</span> explicit_defaults_for_timestamp <span class="token operator">|</span> OFF   <span class="token operator">|</span>
+---------------------------------+-------+
<span class="token number">1</span> row <span class="token keyword">in</span> set, <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>

mysql<span class="token operator">&gt;</span> create table t<span class="token punctuation">(</span>ts timestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>
Query OK, <span class="token number">0</span> rows affected <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>

mysql<span class="token operator">&gt;</span> desc t<span class="token punctuation">;</span>
+-------+-----------+------+-----+-------------------+-----------------------------------------------+
<span class="token operator">|</span> Field <span class="token operator">|</span> Type      <span class="token operator">|</span> Null <span class="token operator">|</span> Key <span class="token operator">|</span> Default           <span class="token operator">|</span> Extra                                         <span class="token operator">|</span>
+-------+-----------+------+-----+-------------------+-----------------------------------------------+
<span class="token operator">|</span> ts    <span class="token operator">|</span> timestamp <span class="token operator">|</span> NO   <span class="token operator">|</span>     <span class="token operator">|</span> CURRENT_TIMESTAMP <span class="token operator">|</span> DEFAULT_GENERATED on update CURRENT_TIMESTAMP <span class="token operator">|</span>
+-------+-----------+------+-----+-------------------+-----------------------------------------------+
<span class="token number">1</span> row <span class="token keyword">in</span> <span class="token builtin class-name">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>

mysql<span class="token operator">&gt;</span> create table t2<span class="token punctuation">(</span>t1 timestamp,t2 timestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>
Query OK, <span class="token number">0</span> rows affected <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>

mysql<span class="token operator">&gt;</span> desc t2<span class="token punctuation">;</span>
+-------+-----------+------+-----+---------------------+-----------------------------------------------+
<span class="token operator">|</span> Field <span class="token operator">|</span> Type      <span class="token operator">|</span> Null <span class="token operator">|</span> Key <span class="token operator">|</span> Default             <span class="token operator">|</span> Extra                                         <span class="token operator">|</span>
+-------+-----------+------+-----+---------------------+-----------------------------------------------+
<span class="token operator">|</span> t1    <span class="token operator">|</span> timestamp <span class="token operator">|</span> NO   <span class="token operator">|</span>     <span class="token operator">|</span> CURRENT_TIMESTAMP   <span class="token operator">|</span> DEFAULT_GENERATED on update CURRENT_TIMESTAMP <span class="token operator">|</span>
<span class="token operator">|</span> t2    <span class="token operator">|</span> timestamp <span class="token operator">|</span> NO   <span class="token operator">|</span>     <span class="token operator">|</span> 0000-00-00 00:00:00 <span class="token operator">|</span>                                               <span class="token operator">|</span>
+-------+-----------+------+-----+---------------------+-----------------------------------------------+
<span class="token number">2</span> rows <span class="token keyword">in</span> <span class="token builtin class-name">set</span> <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>timestamp还有一个重要的特性，就是和时区相关。当插入日期时，会先转换为本地时区存放，在查询时，也是现将日期转换为本地时区后在显示，这就导致了两个不同时区的用户看到同一个日期可能是不一样的。</p><h4 id="_2-3-4-表操作-修改" tabindex="-1"><a class="header-anchor" href="#_2-3-4-表操作-修改" aria-hidden="true">#</a> 2.3.4 表操作 - 修改</h4><h5 id="_1-添加字段" tabindex="-1"><a class="header-anchor" href="#_1-添加字段" aria-hidden="true">#</a> 1) 添加字段</h5><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">ADD</span> 字段名 类型 <span class="token punctuation">(</span>长度<span class="token punctuation">)</span> <span class="token punctuation">[</span> <span class="token keyword">COMMENT</span> 注释 <span class="token punctuation">]</span> <span class="token punctuation">[</span> 约束 <span class="token punctuation">]</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>案例展示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysql<span class="token operator">&gt;</span> alter table t_user <span class="token function">add</span> email varchar<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> comment <span class="token string">&#39;邮箱地址&#39;</span><span class="token punctuation">;</span>
Query OK, <span class="token number">0</span> rows affected <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>
Records: <span class="token number">0</span>  Duplicates: <span class="token number">0</span>  Warnings: <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-修改数据类型" tabindex="-1"><a class="header-anchor" href="#_2-修改数据类型" aria-hidden="true">#</a> 2) 修改数据类型</h5><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">MODIFY</span> 字段名 新数据类型 <span class="token punctuation">(</span>长度<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-修改字段名和字段类型" tabindex="-1"><a class="header-anchor" href="#_3-修改字段名和字段类型" aria-hidden="true">#</a> 3) 修改字段名和字段类型</h5><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 CHANGE 旧字段名 新字段名 类型 <span class="token punctuation">(</span>长度<span class="token punctuation">)</span> <span class="token punctuation">[</span> <span class="token keyword">COMMENT</span> 注释 <span class="token punctuation">]</span> <span class="token punctuation">[</span> 约束 <span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>案例展示：</p><p>将name改为username</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysql<span class="token operator">&gt;</span> alter table t_user change name username varchar<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> comment <span class="token string">&#39;用户名称&#39;</span><span class="token punctuation">;</span>
Query OK, <span class="token number">0</span> rows affected <span class="token punctuation">(</span><span class="token number">0.03</span> sec<span class="token punctuation">)</span>
Records: <span class="token number">0</span>  Duplicates: <span class="token number">0</span>  Warnings: <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-删除字段" tabindex="-1"><a class="header-anchor" href="#_4-删除字段" aria-hidden="true">#</a> 4) 删除字段</h5><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">DROP</span> 字段名<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>案例展示：</p><p>将t_user表的email字段删除</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">alter</span> <span class="token keyword">table</span> t_user <span class="token keyword">drop</span> email<span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.02</span> sec<span class="token punctuation">)</span>
Records: <span class="token number">0</span>  Duplicates: <span class="token number">0</span>  <span class="token keyword">Warnings</span>: <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_5-修改表名" tabindex="-1"><a class="header-anchor" href="#_5-修改表名" aria-hidden="true">#</a> 5) 修改表名</h5><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">RENAME</span> <span class="token keyword">TO</span> 新表名<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>案例展示：</p><p>将t_user改为tt_user</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">alter</span> <span class="token keyword">table</span> t_user <span class="token keyword">rename</span> <span class="token keyword">to</span> tt_user<span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-5-表操作-删除" tabindex="-1"><a class="header-anchor" href="#_2-3-5-表操作-删除" aria-hidden="true">#</a> 2.3.5 表操作 - 删除</h4><h5 id="_1-删除表" tabindex="-1"><a class="header-anchor" href="#_1-删除表" aria-hidden="true">#</a> 1) 删除表</h5><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token punctuation">[</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">]</span> 表名<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可选项 IF EXISTS 代表，只有表名存在时才会删除该表，表名不存在，则不执行删除操作(如果不加该参数项，删除一张不存在的表，执行将会报错)。</p><p>案例展示：</p><p>如果tt_user表存在，则删除tt_user表</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> tt_user<span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-删除指定表" tabindex="-1"><a class="header-anchor" href="#_2-删除指定表" aria-hidden="true">#</a> 2) 删除指定表</h5><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">TRUNCATE</span> <span class="token keyword">TABLE</span> 表名<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-4-dml" tabindex="-1"><a class="header-anchor" href="#_2-4-dml" aria-hidden="true">#</a> 2.4 DML</h3><p>DML英文全称是Data Manipulation Language(数据操作语言)，用来对数据库中表的数据记录进行增、删、改操作。</p><ul><li><p>添加数据（INSERT）</p></li><li><p>修改数据（UPDATE）</p></li><li><p>删除数据（DELETE）</p></li></ul><h4 id="_2-4-1-添加数据" tabindex="-1"><a class="header-anchor" href="#_2-4-1-添加数据" aria-hidden="true">#</a> 2.4.1 添加数据</h4><h5 id="_1-给指定字段添加数据" tabindex="-1"><a class="header-anchor" href="#_1-给指定字段添加数据" aria-hidden="true">#</a> 1). 给指定字段添加数据</h5><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> 表名 <span class="token punctuation">(</span>字段名<span class="token number">1</span><span class="token punctuation">,</span> 字段名<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span> 值<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>案例：</p><p>给tb_user表插入数据</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> tb_user <span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span><span class="token punctuation">,</span> phone<span class="token punctuation">,</span> email<span class="token punctuation">,</span> profession<span class="token punctuation">,</span> age<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">\`</span>status<span class="token punctuation">\`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">&#39;xuliang&#39;</span><span class="token punctuation">,</span> <span class="token number">18888888888</span><span class="token punctuation">,</span> <span class="token string">&#39;88888888@qq.com&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;aa&#39;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>查询数据：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_user <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">25</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">----+---------+-------------+-----------------+------------+------+--------+--------+------------+</span>
<span class="token operator">|</span> id <span class="token operator">|</span> name    <span class="token operator">|</span> phone       <span class="token operator">|</span> email           <span class="token operator">|</span> profession <span class="token operator">|</span> age  <span class="token operator">|</span> gender <span class="token operator">|</span> <span class="token keyword">status</span> <span class="token operator">|</span> createtime <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">----+---------+-------------+-----------------+------------+------+--------+--------+------------+</span>
<span class="token operator">|</span> <span class="token number">25</span> <span class="token operator">|</span> xuliang <span class="token operator">|</span> <span class="token number">18888888888</span> <span class="token operator">|</span> <span class="token number">88888888</span><span class="token variable">@qq.com</span> <span class="token operator">|</span> aa         <span class="token operator">|</span>   <span class="token number">18</span> <span class="token operator">|</span> <span class="token number">1</span>      <span class="token operator">|</span> <span class="token number">0</span>      <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">----+---------+-------------+-----------------+------------+------+--------+--------+------------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-给全部字段添加数据" tabindex="-1"><a class="header-anchor" href="#_2-给全部字段添加数据" aria-hidden="true">#</a> 2). 给全部字段添加数据</h5><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> 表名 <span class="token keyword">VALUES</span> <span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span> 值<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果不指定字段，就需要在value中指定全部值，且顺序一致。</p><h5 id="_3-批量添加数据" tabindex="-1"><a class="header-anchor" href="#_3-批量添加数据" aria-hidden="true">#</a> 3). 批量添加数据</h5><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> 表名 <span class="token punctuation">(</span>字段名<span class="token number">1</span><span class="token punctuation">,</span> 字段名<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span> 值<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span> 值<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>值 <span class="token number">1</span><span class="token punctuation">,</span> 值<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>注意事项:</p><ul><li><p>插入数据时，指定的字段顺序需要与值的顺序是一一对应的。</p></li><li><p>字符串和日期型数据应该包含在引号中。</p></li><li><p>插入的数据大小，应该在字段的规定范围内。</p></li></ul></blockquote><h4 id="_2-4-2-修改数据" tabindex="-1"><a class="header-anchor" href="#_2-4-2-修改数据" aria-hidden="true">#</a> 2.4.2 修改数据</h4><p>修改数据的具体语法为:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">UPDATE</span> 表名 <span class="token keyword">SET</span> 字段名<span class="token number">1</span> <span class="token operator">=</span> 值<span class="token number">1</span> <span class="token punctuation">,</span> 字段名<span class="token number">2</span> <span class="token operator">=</span> 值<span class="token number">2</span> <span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">[</span> <span class="token keyword">WHERE</span> 条件 <span class="token punctuation">]</span> <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>案例:</p><p>A. 修改id为1的数据，将name修改为xul</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">update</span> tb_user <span class="token keyword">set</span> name <span class="token operator">=</span> <span class="token string">&#39;xul&#39;</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>B. 修改id为1的数据, 将name修改为小昭, gender修改为 女</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">update</span> tb_user <span class="token keyword">set</span> name <span class="token operator">=</span> <span class="token string">&#39;小昭&#39;</span> <span class="token punctuation">,</span> gender <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>C. 将所有用户的创建日期修改为 2008-01-01</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">update</span> tb_user <span class="token keyword">set</span> entrydate <span class="token operator">=</span> <span class="token string">&#39;2008-01-01&#39;</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>注意事项:</p><p>修改语句的条件可以有，也可以没有，如果没有条件，则会修改整张表的所有数据。</p></blockquote><h4 id="_2-5-3-删除数据" tabindex="-1"><a class="header-anchor" href="#_2-5-3-删除数据" aria-hidden="true">#</a> 2.5.3 删除数据</h4><p>删除数据的具体语法为：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> 表名 <span class="token punctuation">[</span> <span class="token keyword">WHERE</span> 条件 <span class="token punctuation">]</span> <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>案例:</p><p>A. 删除gender为女的用户</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">delete</span> <span class="token keyword">from</span> tb_user <span class="token keyword">where</span> gender <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>B. 删除所有用户</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">delete</span> <span class="token keyword">from</span> tb_user<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>注意事项:</p><ul><li><p>DELETE 语句的条件可以有，也可以没有，如果没有条件，则会删除整张表的所有数据。</p></li><li><p>DELETE 语句不能删除某一个字段的值(可以使用UPDATE，将该字段值置为NULL即 可)。</p></li><li><p>当进行删除全部数据操作时，datagrip会提示我们，询问是否确认删除，我们直接点击Execute即可。</p></li></ul></blockquote><h3 id="_2-5-dql" tabindex="-1"><a class="header-anchor" href="#_2-5-dql" aria-hidden="true">#</a> 2.5 DQL</h3><p>DQL英文全称是Data Query Language(数据查询语言)，数据查询语言，用来查询数据库中表的记录。</p><p>查询关键字: SELECT</p><p>在一个正常的业务系统中，查询操作的频次是要远高于增删改的，当我们去访问企业官网、电商网站，在这些网站中我们所看到的数据，实际都是需要从数据库中查询并展示的。而且在查询的过程中，可能还会涉及到条件、排序、分页等操作。</p><p>那么，本小节我们主要学习的就是如何进行数据的查询操作。 我们先来完成如下数据准备工作:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> employee<span class="token punctuation">;</span> 
<span class="token keyword">create</span> <span class="token keyword">table</span> emp<span class="token punctuation">(</span> 
    id <span class="token keyword">int</span> <span class="token keyword">comment</span> <span class="token string">&#39;编号&#39;</span><span class="token punctuation">,</span> 
    workno <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">comment</span> <span class="token string">&#39;工号&#39;</span><span class="token punctuation">,</span> 
    name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">comment</span> <span class="token string">&#39;姓名&#39;</span><span class="token punctuation">,</span> 
    gender <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">comment</span> <span class="token string">&#39;性别&#39;</span><span class="token punctuation">,</span> 
    age <span class="token keyword">tinyint</span> <span class="token keyword">unsigned</span> <span class="token keyword">comment</span> <span class="token string">&#39;年龄&#39;</span><span class="token punctuation">,</span> 
    idcard <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span> <span class="token keyword">comment</span> <span class="token string">&#39;身份证号&#39;</span><span class="token punctuation">,</span> 
    workaddress <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">comment</span> <span class="token string">&#39;工作地址&#39;</span><span class="token punctuation">,</span> 
    entrydate <span class="token keyword">date</span> <span class="token keyword">comment</span> <span class="token string">&#39;入职时间&#39;</span> 
<span class="token punctuation">)</span><span class="token keyword">comment</span> <span class="token string">&#39;员工表&#39;</span><span class="token punctuation">;</span> 
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> emp <span class="token punctuation">(</span>id<span class="token punctuation">,</span> workno<span class="token punctuation">,</span> name<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> age<span class="token punctuation">,</span> idcard<span class="token punctuation">,</span> workaddress<span class="token punctuation">,</span> entrydate<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;00001&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;柳岩666&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;女&#39;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">&#39;123456789012345678&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;北京&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2000-01- 01&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> emp <span class="token punctuation">(</span>id<span class="token punctuation">,</span> workno<span class="token punctuation">,</span> name<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> age<span class="token punctuation">,</span> idcard<span class="token punctuation">,</span> workaddress<span class="token punctuation">,</span> entrydate<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;00002&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;张无忌&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;男&#39;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">&#39;123456789012345670&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;北京&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-09- 01&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> emp <span class="token punctuation">(</span>id<span class="token punctuation">,</span> workno<span class="token punctuation">,</span> name<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> age<span class="token punctuation">,</span> idcard<span class="token punctuation">,</span> workaddress<span class="token punctuation">,</span> entrydate<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;00003&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;韦一笑&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;男&#39;</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token string">&#39;123456789712345670&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;上海&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-08- 01&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> emp <span class="token punctuation">(</span>id<span class="token punctuation">,</span> workno<span class="token punctuation">,</span> name<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> age<span class="token punctuation">,</span> idcard<span class="token punctuation">,</span> workaddress<span class="token punctuation">,</span> entrydate<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&#39;00004&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;赵敏&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;女&#39;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">&#39;123456757123845670&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;北京&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2009-12-01&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> emp <span class="token punctuation">(</span>id<span class="token punctuation">,</span> workno<span class="token punctuation">,</span> name<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> age<span class="token punctuation">,</span> idcard<span class="token punctuation">,</span> workaddress<span class="token punctuation">,</span> entrydate<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">&#39;00005&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;小昭&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;女&#39;</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token string">&#39;123456769012345678&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;上海&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2007-07-01&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> emp <span class="token punctuation">(</span>id<span class="token punctuation">,</span> workno<span class="token punctuation">,</span> name<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> age<span class="token punctuation">,</span> idcard<span class="token punctuation">,</span> workaddress<span class="token punctuation">,</span> entrydate<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">&#39;00006&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;杨逍&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;男&#39;</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token string">&#39;12345678931234567X&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;北京&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2006-01-01&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> emp <span class="token punctuation">(</span>id<span class="token punctuation">,</span> workno<span class="token punctuation">,</span> name<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> age<span class="token punctuation">,</span> idcard<span class="token punctuation">,</span> workaddress<span class="token punctuation">,</span> entrydate<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">&#39;00007&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;范瑶&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;男&#39;</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token string">&#39;123456789212345670&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;北京&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-05-01&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> emp <span class="token punctuation">(</span>id<span class="token punctuation">,</span> workno<span class="token punctuation">,</span> name<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> age<span class="token punctuation">,</span> idcard<span class="token punctuation">,</span> workaddress<span class="token punctuation">,</span> entrydate<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">&#39;00008&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;黛绮丝&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;女&#39;</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token string">&#39;123456157123645670&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;天津&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2015-05- 01&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> emp <span class="token punctuation">(</span>id<span class="token punctuation">,</span> workno<span class="token punctuation">,</span> name<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> age<span class="token punctuation">,</span> idcard<span class="token punctuation">,</span> workaddress<span class="token punctuation">,</span> entrydate<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token string">&#39;00009&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;范凉凉&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;女&#39;</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token string">&#39;123156789012345678&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;北京&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2010-04- 01&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> emp <span class="token punctuation">(</span>id<span class="token punctuation">,</span> workno<span class="token punctuation">,</span> name<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> age<span class="token punctuation">,</span> idcard<span class="token punctuation">,</span> workaddress<span class="token punctuation">,</span> entrydate<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">&#39;00010&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;陈友谅&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;男&#39;</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">,</span> <span class="token string">&#39;123456789012345670&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;上海&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2011-01- 01&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> emp <span class="token punctuation">(</span>id<span class="token punctuation">,</span> workno<span class="token punctuation">,</span> name<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> age<span class="token punctuation">,</span> idcard<span class="token punctuation">,</span> workaddress<span class="token punctuation">,</span> entrydate<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token string">&#39;00011&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;张士诚&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;男&#39;</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token string">&#39;123567897123465670&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;江苏&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2015-05- 01&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> emp <span class="token punctuation">(</span>id<span class="token punctuation">,</span> workno<span class="token punctuation">,</span> name<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> age<span class="token punctuation">,</span> idcard<span class="token punctuation">,</span> workaddress<span class="token punctuation">,</span> entrydate<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">&#39;00012&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;常遇春&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;男&#39;</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token string">&#39;123446757152345670&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;北京&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2004-02- 01&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> emp <span class="token punctuation">(</span>id<span class="token punctuation">,</span> workno<span class="token punctuation">,</span> name<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> age<span class="token punctuation">,</span> idcard<span class="token punctuation">,</span> workaddress<span class="token punctuation">,</span> entrydate<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token string">&#39;00013&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;张三丰&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;男&#39;</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">,</span> <span class="token string">&#39;123656789012345678&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;江苏&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2020-11- 01&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> emp <span class="token punctuation">(</span>id<span class="token punctuation">,</span> workno<span class="token punctuation">,</span> name<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> age<span class="token punctuation">,</span> idcard<span class="token punctuation">,</span> workaddress<span class="token punctuation">,</span> entrydate<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token string">&#39;00014&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;灭绝&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;女&#39;</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">,</span> <span class="token string">&#39;123456719012345670&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;西安&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2019-05- 01&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> emp <span class="token punctuation">(</span>id<span class="token punctuation">,</span> workno<span class="token punctuation">,</span> name<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> age<span class="token punctuation">,</span> idcard<span class="token punctuation">,</span> workaddress<span class="token punctuation">,</span> entrydate<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token string">&#39;00015&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;胡青牛&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;男&#39;</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token string">&#39;12345674971234567X&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;西安&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2018-04- 01&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> emp <span class="token punctuation">(</span>id<span class="token punctuation">,</span> workno<span class="token punctuation">,</span> name<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> age<span class="token punctuation">,</span> idcard<span class="token punctuation">,</span> workaddress<span class="token punctuation">,</span> entrydate<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token string">&#39;00016&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;周芷若&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;女&#39;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token string">&#39;北京&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2012-06-01&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>准备完毕后，我们就可以看到emp表中准备的16条数据。接下来，我们再来完成DQL语法的学习。</p><h4 id="_2-5-1-基本语法" tabindex="-1"><a class="header-anchor" href="#_2-5-1-基本语法" aria-hidden="true">#</a> 2.5.1 基本语法</h4><p>DQL 查询语句，语法结构如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
	字段列表 
<span class="token keyword">FROM</span>
	表名列表 
<span class="token keyword">WHERE</span>
	条件列表 
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> 
	分组字段列表 
<span class="token keyword">HAVING</span>
	分组后条件列表 
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> 
	排序字段列表 
<span class="token keyword">LIMIT</span>
	分页参数
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们在讲解这部分内容的时候，会将上面的完整语法进行拆分，分为以下几个部分：</p><ul><li><p>基本查询（不带任何条件）</p></li><li><p>条件查询（WHERE）</p></li><li><p>聚合函数（count、max、min、avg、sum）</p></li><li><p>分组查询（group by）</p></li><li><p>排序查询（order by）</p></li><li><p>分页查询（limit）</p></li></ul><h4 id="_2-5-2-基础查询" tabindex="-1"><a class="header-anchor" href="#_2-5-2-基础查询" aria-hidden="true">#</a> 2.5.2 基础查询</h4><p>在基本查询的DQL语句中，不带任何的查询条件，查询的语法如下：</p><h5 id="_1-查询多个字段" tabindex="-1"><a class="header-anchor" href="#_1-查询多个字段" aria-hidden="true">#</a> 1). 查询多个字段</h5><div class="language-SQL line-numbers-mode" data-ext="SQL"><pre class="language-SQL"><code>SELECT 字段1, 字段2, 字段3 ... FROM 表名 ; 
SELECT * FROM 表名 ;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意 : * 号代表查询所有字段，在实际开发中尽量少用（不直观、影响效率）。</p></blockquote><h5 id="_2-字段设置别名" tabindex="-1"><a class="header-anchor" href="#_2-字段设置别名" aria-hidden="true">#</a> 2). 字段设置别名</h5><div class="language-SQL line-numbers-mode" data-ext="SQL"><pre class="language-SQL"><code>SELECT 字段1 [ AS 别名1 ] , 字段2 [ AS 别名2 ] ... FROM 表名; 
SELECT 字段1 [ 别名1 ] , 字段2 [ 别名2 ] ... FROM 表名;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-去除重复记录" tabindex="-1"><a class="header-anchor" href="#_3-去除重复记录" aria-hidden="true">#</a> 3). 去除重复记录</h5><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> 字段列表 <span class="token keyword">FROM</span> 表名<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>案例：</p><p>A. 查询指定字段 name, workno, age并返回</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> name<span class="token punctuation">,</span>workno<span class="token punctuation">,</span>age <span class="token keyword">from</span> emp<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>B. 查询返回所有字段</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> id <span class="token punctuation">,</span>workno<span class="token punctuation">,</span>name<span class="token punctuation">,</span>gender<span class="token punctuation">,</span>age<span class="token punctuation">,</span>idcard<span class="token punctuation">,</span>workaddress<span class="token punctuation">,</span>entrydate <span class="token keyword">from</span> emp<span class="token punctuation">;</span> 
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>C. 查询所有员工的工作地址,起别名</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> workaddress <span class="token keyword">as</span> <span class="token string">&#39;工作地址&#39;</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span> 
<span class="token comment">-- as可以省略 </span>
<span class="token keyword">select</span> workaddress <span class="token string">&#39;工作地址&#39;</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>D. 查询公司员工的上班地址有哪些(不要重复)</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token keyword">distinct</span> workaddress <span class="token string">&#39;工作地址&#39;</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-5-3-条件查询" tabindex="-1"><a class="header-anchor" href="#_2-5-3-条件查询" aria-hidden="true">#</a> 2.5.3 条件查询</h4><h5 id="_1-语法" tabindex="-1"><a class="header-anchor" href="#_1-语法" aria-hidden="true">#</a> 1) 语法</h5><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> 字段列表 <span class="token keyword">FROM</span> 表名 <span class="token keyword">WHERE</span> 条件列表 <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_2-条件" tabindex="-1"><a class="header-anchor" href="#_2-条件" aria-hidden="true">#</a> 2) 条件</h5><p>常用的比较运算符如下:</p><table><thead><tr><th>比较运算符</th><th>功能</th></tr></thead><tbody><tr><td>&gt;</td><td>大于</td></tr><tr><td>&gt;=</td><td>大于等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr><tr><td>=</td><td>等于</td></tr><tr><td>&lt;&gt; 或 !=</td><td>不等于</td></tr><tr><td>BETWEEN ... AND ...</td><td>在某个范围之内(含最小、最大值)</td></tr><tr><td>IN(...)</td><td>在in之后的列表中的值，多选一</td></tr><tr><td>LIKE 占位符</td><td>模糊匹配(_匹配单个字符, %匹配任意个字符)</td></tr><tr><td>IS NULL</td><td>是NULL</td></tr></tbody></table><p>常用的逻辑运算符如下:</p><table><thead><tr><th>逻辑运算符</th><th>功能</th></tr></thead><tbody><tr><td>AND 或 &amp;&amp;</td><td>并且 (多个条件同时成立)</td></tr><tr><td>OR 或 ||</td><td>或者 (多个条件任意一个成立)</td></tr><tr><td>NOT 或 !</td><td>非 , 不是</td></tr></tbody></table><h5 id="_3-案例举例" tabindex="-1"><a class="header-anchor" href="#_3-案例举例" aria-hidden="true">#</a> 3) 案例举例</h5><p>A. 查询年龄等于 88 的员工</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>select * from emp where age = 88;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>B. 查询年龄小于 20 的员工信息</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>select * from emp where age &lt; 20;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>C. 查询年龄小于等于 20 的员工信息</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>select * from emp where age &lt;= 20;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>D. 查询没有身份证号的员工信息</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>select * from emp where idcard is null;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>E. 查询有身份证号的员工信息</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>select * from emp where idcard is not null;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>F. 查询年龄不等于 88 的员工信息</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>select * from emp where age != 88; 
select * from emp where age &lt;&gt; 88;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>G. 查询年龄在15岁(包含) 到 20岁(包含)之间的员工信息</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>select * from emp where age &gt;= 15 &amp;&amp; age &lt;= 20; 
select * from emp where age &gt;= 15 and age &lt;= 20; 
select * from emp where age between 15 and 20;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>H. 查询性别为 女 且年龄小于 25岁的员工信息</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>select * from emp where gender = &#39;女&#39; and age &lt; 25;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>I. 查询年龄等于18 或 20 或 40 的员工信息</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>select * from emp where age = 18 or age = 20 or age =40; 
select * from emp where age in(18,20,40);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>J. 查询姓名为两个字的员工信息 _ %</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>select * from emp where name like &#39;__&#39;; 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>K. 查询身份证号最后一位是X的员工信息</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>select * from emp where idcard like &#39;%X&#39;; 
select * from emp where idcard like &#39;_________________X&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-5-4-聚合函数" tabindex="-1"><a class="header-anchor" href="#_2-5-4-聚合函数" aria-hidden="true">#</a> 2.5.4 聚合函数</h4><h5 id="_1-介绍" tabindex="-1"><a class="header-anchor" href="#_1-介绍" aria-hidden="true">#</a> 1) 介绍</h5><p>将一列数据作为一个整体，进行纵向计算 。</p><h5 id="_2-常见的聚合函数" tabindex="-1"><a class="header-anchor" href="#_2-常见的聚合函数" aria-hidden="true">#</a> 2) 常见的聚合函数</h5><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>count</td><td>统计数量</td></tr><tr><td>max</td><td>最大值</td></tr><tr><td>min</td><td>最小值</td></tr><tr><td>avg</td><td>平均值</td></tr><tr><td>sum</td><td>求和</td></tr></tbody></table><h5 id="_3-语法" tabindex="-1"><a class="header-anchor" href="#_3-语法" aria-hidden="true">#</a> 3). 语法</h5><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> 聚合函数<span class="token punctuation">(</span>字段列表<span class="token punctuation">)</span> <span class="token keyword">FROM</span> 表名 <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>注意 : NULL值是不参与所有聚合函数运算的。</p></blockquote><h5 id="_4-案例" tabindex="-1"><a class="header-anchor" href="#_4-案例" aria-hidden="true">#</a> 4） 案例</h5><p>A. 统计该企业员工数量</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span> <span class="token comment">-- 统计的是总记录数 </span>
<span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span>idcard<span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span> <span class="token comment">-- 统计的是idcard字段不为null的记录数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>对于count聚合函数，统计符合条件的总记录数，还可以通过 count(数字/字符串)的形式进行统计查询，比如：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>对于count(*) 、count(字段)、 count(1) 的具体原理，我们在进阶篇中SQL优化部分会详细讲解，此处大家只需要知道如何使用即可。</p></blockquote><p>B. 统计该企业员工的平均年龄</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>C. 统计该企业员工的最大年龄</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>D. 统计该企业员工的最小年龄</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token function">min</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>E. 统计西安地区员工的年龄之和</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token function">sum</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> workaddress <span class="token operator">=</span> <span class="token string">&#39;西安&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-5-5-分组查询" tabindex="-1"><a class="header-anchor" href="#_2-5-5-分组查询" aria-hidden="true">#</a> 2.5.5 分组查询</h4><h5 id="_1-语法-1" tabindex="-1"><a class="header-anchor" href="#_1-语法-1" aria-hidden="true">#</a> 1). 语法</h5><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> 字段列表 <span class="token keyword">FROM</span> 表名 <span class="token punctuation">[</span> <span class="token keyword">WHERE</span> 条件 <span class="token punctuation">]</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> 分组字段名 <span class="token punctuation">[</span> <span class="token keyword">HAVING</span> 分组 后过滤条件 <span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_2-where与having区别" tabindex="-1"><a class="header-anchor" href="#_2-where与having区别" aria-hidden="true">#</a> 2). where与having区别</h5><ul><li><p>执行时机不同：where是分组之前进行过滤，不满足where条件，不参与分组；而having是分组之后对结果进行过滤。</p></li><li><p>判断条件不同：where不能对聚合函数进行判断，而having可以。</p></li></ul><blockquote><p>注意事项:</p><ul><li>分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义。</li><li>执行顺序: where &gt; 聚合函数 &gt; having 。</li><li>支持多字段分组, 具体语法为 : group by columnA,columnB</li></ul></blockquote><h5 id="_3-案例" tabindex="-1"><a class="header-anchor" href="#_3-案例" aria-hidden="true">#</a> 3) 案例</h5><p>A. 根据性别分组 , 统计男性员工 和 女性员工的数量</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> gender<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> gender <span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>B. 根据性别分组 , 统计男性员工 和 女性员工的平均年龄</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> gender<span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> gender <span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>C. 查询年龄小于45的员工 , 并根据工作地址分组 , 获取员工数量大于等于3的工作地址</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> workaddress<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> address_count <span class="token keyword">from</span> emp <span class="token keyword">where</span> age <span class="token operator">&lt;</span> <span class="token number">45</span> <span class="token keyword">group</span> <span class="token keyword">by</span> workaddress <span class="token keyword">having</span> address_count <span class="token operator">&gt;=</span> <span class="token number">3</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>D. 统计各个工作地址上班的男性及女性员工的数量</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> workaddress<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token string">&#39;数量&#39;</span> <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> gender <span class="token punctuation">,</span> workaddress <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-5-6-排序查询" tabindex="-1"><a class="header-anchor" href="#_2-5-6-排序查询" aria-hidden="true">#</a> 2.5.6 排序查询</h4><p>排序在日常开发中是非常常见的一个操作，有升序排序，也有降序排序。</p><h5 id="_1-语法-2" tabindex="-1"><a class="header-anchor" href="#_1-语法-2" aria-hidden="true">#</a> 1). 语法</h5><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> 字段列表 <span class="token keyword">FROM</span> 表名 <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> 字段<span class="token number">1</span> 排序方式<span class="token number">1</span> <span class="token punctuation">,</span> 字段<span class="token number">2</span> 排序方式<span class="token number">2</span> <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_2-排序方式" tabindex="-1"><a class="header-anchor" href="#_2-排序方式" aria-hidden="true">#</a> 2). 排序方式</h5><ul><li><p>ASC : 升序(默认值)</p></li><li><p>DESC: 降序</p></li></ul><blockquote><p>注意事项：</p><ul><li><p>如果是升序, 可以不指定排序方式ASC ;</p></li><li><p>如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序 ;</p></li></ul></blockquote><h5 id="_3-案例-1" tabindex="-1"><a class="header-anchor" href="#_3-案例-1" aria-hidden="true">#</a> 3) 案例</h5><p>A. 根据年龄对公司的员工进行升序排序</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">order</span> <span class="token keyword">by</span> age <span class="token keyword">asc</span><span class="token punctuation">;</span> 
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">order</span> <span class="token keyword">by</span> age<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>B. 根据入职时间, 对员工进行降序排序</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">order</span> <span class="token keyword">by</span> entrydate <span class="token keyword">desc</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>C. 根据年龄对公司的员工进行升序排序 , 年龄相同 , 再按照入职时间进行降序排序</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">order</span> <span class="token keyword">by</span> age <span class="token keyword">asc</span> <span class="token punctuation">,</span> entrydate <span class="token keyword">desc</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-5-7-分页查询" tabindex="-1"><a class="header-anchor" href="#_2-5-7-分页查询" aria-hidden="true">#</a> 2.5.7 分页查询</h4><p>分页操作在业务系统开发时，也是非常常见的一个功能，我们在网站中看到的各种各样的分页条，后台都需要借助于数据库的分页操作。</p><h5 id="_1-语法-3" tabindex="-1"><a class="header-anchor" href="#_1-语法-3" aria-hidden="true">#</a> 1). 语法</h5><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> 字段列表 <span class="token keyword">FROM</span> 表名 <span class="token keyword">LIMIT</span> 起始索引<span class="token punctuation">,</span> 查询记录数 <span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>注意事项:</p><ul><li><p>起始索引从0开始，起始索引 = （查询页码 - 1）* 每页显示记录数。</p></li><li><p>分页查询是数据库的方言，不同的数据库有不同的实现，MySQL中是LIMIT。</p></li><li><p>如果查询的是第一页数据，起始索引可以省略，直接简写为 limit 10。</p></li></ul></blockquote><h5 id="_2-案例" tabindex="-1"><a class="header-anchor" href="#_2-案例" aria-hidden="true">#</a> 2) 案例:</h5><p>A. 查询第1页员工数据, 每页展示10条记录</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">;</span> 
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">limit</span> <span class="token number">10</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>B. 查询第2页员工数据, 每页展示10条记录 --------&gt; (页码-1)*页展示记录数</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">limit</span> <span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-5-8-执行顺序" tabindex="-1"><a class="header-anchor" href="#_2-5-8-执行顺序" aria-hidden="true">#</a> 2.5.8 执行顺序</h4><p>（面试重点）</p><p>在讲解DQL语句的具体语法之前，我们已经讲解了DQL语句的完整语法，及编写顺序，接下来，我们要来说明的是DQL语句在执行时的执行顺序，也就是先执行那一部分，后执行那一部分。</p><p><img src="`+p+`" alt="image-20220725193241606"></p><p>验证：</p><p>查询年龄大于15的员工姓名、年龄，并根据年龄进行升序排序。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>select name , age from emp where age &gt; 15 order by age asc;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在查询时，我们给emp表起一个别名 e，然后在select 及 where中使用该别名。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>select e.name , e.age from emp e where e.age &gt; 15 order by age asc;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行上述SQL语句后，我们看到依然可以正常的查询到结果，此时就说明： from 先执行, 然后where 和 select 执行。那 where 和 select 到底哪个先执行呢?</p><p>此时，此时我们可以给select后面的字段起别名，然后在 where 中使用这个别名，然后看看是否可以执行成功</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> e<span class="token punctuation">.</span>name ename <span class="token punctuation">,</span> e<span class="token punctuation">.</span>age eage <span class="token keyword">from</span> emp e <span class="token keyword">where</span> eage <span class="token operator">&gt;</span> <span class="token number">15</span> <span class="token keyword">order</span> <span class="token keyword">by</span> age <span class="token keyword">asc</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行上述SQL报错了:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> e<span class="token punctuation">.</span>name ename <span class="token punctuation">,</span> e<span class="token punctuation">.</span>age eage <span class="token keyword">from</span> emp e <span class="token keyword">where</span> eage <span class="token operator">&gt;</span> <span class="token number">15</span> <span class="token keyword">order</span> <span class="token keyword">by</span> age <span class="token keyword">asc</span><span class="token punctuation">;</span>
ERROR <span class="token number">1054</span> <span class="token punctuation">(</span><span class="token number">42</span>S22<span class="token punctuation">)</span>: Unknown <span class="token keyword">column</span> <span class="token string">&#39;eage&#39;</span> <span class="token operator">in</span> <span class="token string">&#39;where clause&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>由此我们可以得出结论: from 先执行，然后执行 where ， 再执行select 。</p><p>接下来，我们再执行如下SQL语句，查看执行效果：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> e<span class="token punctuation">.</span>name ename <span class="token punctuation">,</span> e<span class="token punctuation">.</span>age eage <span class="token keyword">from</span> emp e <span class="token keyword">where</span> e<span class="token punctuation">.</span>age <span class="token operator">&gt;</span> <span class="token number">15</span> <span class="token keyword">order</span> <span class="token keyword">by</span> eage <span class="token keyword">asc</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>结果执行成功。 那么也就验证了: order by 是在select 语句之后执行的。</p><p>综上所述，我们可以看到DQL语句的执行顺序为： from ... where ... group by ...having ... select ... order by ... limit ...</p><blockquote><p>拓展：</p><p>where 和 join 执行谁先谁后？</p></blockquote><h3 id="_2-6-dcl" tabindex="-1"><a class="header-anchor" href="#_2-6-dcl" aria-hidden="true">#</a> 2.6 DCL</h3><p>DCL英文全称是<strong>Data Control Language</strong>(数据控制语言)，用来管理数据库用户、控制数据库的访问权限。</p><h4 id="_2-6-1-管理用户" tabindex="-1"><a class="header-anchor" href="#_2-6-1-管理用户" aria-hidden="true">#</a> 2.6.1 管理用户</h4><h5 id="_1-查询用户" tabindex="-1"><a class="header-anchor" href="#_1-查询用户" aria-hidden="true">#</a> 1). 查询用户</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>select * from mysql.user;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查询结果</p><p><img src="`+o+`" alt="image-20220725194331165"></p><p>其中 Host代表当前用户访问的主机, 如果为localhost, 仅代表只能够在当前本机访问，是不可以远程访问的。 User代表的是访问该数据库的用户名。在MySQL中需要通过Host和User来唯一标识一个用户</p><h5 id="_2-创建用户" tabindex="-1"><a class="header-anchor" href="#_2-创建用户" aria-hidden="true">#</a> 2). 创建用户</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>CREATE USER &#39;用户名&#39;@&#39;主机名&#39; IDENTIFIED BY &#39;密码&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-修改用户密码" tabindex="-1"><a class="header-anchor" href="#_3-修改用户密码" aria-hidden="true">#</a> 3). 修改用户密码</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ALTER USER &#39;用户名&#39;@&#39;主机名&#39; IDENTIFIED WITH mysql_native_password BY &#39;新密码&#39; ; 1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_4-删除用户" tabindex="-1"><a class="header-anchor" href="#_4-删除用户" aria-hidden="true">#</a> 4). 删除用户</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>DROP USER &#39;用户名&#39;@&#39;主机名&#39; ;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>注意事项:</p><ul><li><p>在MySQL中需要通过用户名@主机名的方式，来唯一标识一个用户。</p></li><li><p>主机名可以使用 % 通配。</p></li><li><p>这类SQL开发人员操作的比较少，主要是DBA（ Database Administrator 数据库管理员）使用。</p></li></ul></blockquote><h4 id="_2-6-2-权限控制" tabindex="-1"><a class="header-anchor" href="#_2-6-2-权限控制" aria-hidden="true">#</a> 2.6.2 权限控制</h4><p>MySQL中定义了很多种权限，但是常用的就以下几种：</p><table><thead><tr><th>权限</th><th>说明</th></tr></thead><tbody><tr><td>ALL, ALL PRIVILEGES</td><td>所有权限</td></tr><tr><td>SELECT</td><td>查询数据</td></tr><tr><td>INSERT</td><td>插入数据</td></tr><tr><td>UPDATE</td><td>修改数据</td></tr><tr><td>DELETE</td><td>删除数据</td></tr><tr><td>ALTER</td><td>修改表</td></tr><tr><td>DROP</td><td>删除数据库/表/视图</td></tr><tr><td>CREATE</td><td>创建数据库/表</td></tr></tbody></table><p>上述只是简单罗列了常见的几种权限描述，其他权限描述及含义，可以直接参考官方文档。</p><h5 id="_1-查询权限" tabindex="-1"><a class="header-anchor" href="#_1-查询权限" aria-hidden="true">#</a> 1). 查询权限</h5><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SHOW</span> GRANTS <span class="token keyword">FOR</span> <span class="token string">&#39;用户名&#39;</span><span class="token variable">@&#39;主机名&#39;</span> <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_2-授予权限" tabindex="-1"><a class="header-anchor" href="#_2-授予权限" aria-hidden="true">#</a> 2). 授予权限</h5><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">GRANT</span> 权限列表 <span class="token keyword">ON</span> 数据库名<span class="token punctuation">.</span>表名 <span class="token keyword">TO</span> <span class="token string">&#39;用户名&#39;</span><span class="token variable">@&#39;主机名&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-撤销权限" tabindex="-1"><a class="header-anchor" href="#_3-撤销权限" aria-hidden="true">#</a> 3). 撤销权限</h5><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">REVOKE</span> 权限列表 <span class="token keyword">ON</span> 数据库名<span class="token punctuation">.</span>表名 <span class="token keyword">FROM</span> <span class="token string">&#39;用户名&#39;</span><span class="token variable">@&#39;主机名&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>注意事项：</p><ul><li><p>多个权限之间，使用逗号分隔</p></li><li><p>授权时， 数据库名和表名可以使用 * 进行通配，代表所有。</p></li></ul></blockquote><p>案例:</p><p>A. 查询 &#39;heima&#39;@&#39;%&#39; 用户的权限</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">show</span> grants <span class="token keyword">for</span> <span class="token string">&#39;heima&#39;</span><span class="token variable">@&#39;%&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>B. 授予 &#39;heima&#39;@&#39;%&#39; 用户itcast数据库所有表的所有操作权限</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">grant</span> <span class="token keyword">all</span> <span class="token keyword">on</span> itcast<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> <span class="token string">&#39;heima&#39;</span><span class="token variable">@&#39;%&#39;</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>C. 撤销 &#39;heima&#39;@&#39;%&#39; 用户的itcast数据库的所有权限</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">revoke</span> <span class="token keyword">all</span> <span class="token keyword">on</span> itcast<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">&#39;heima&#39;</span><span class="token variable">@&#39;%&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="三-函数" tabindex="-1"><a class="header-anchor" href="#三-函数" aria-hidden="true">#</a> 三：函数</h2><p>函数 是指一段可以直接被另一段程序调用的程序或代码。 也就意味着，这一段程序或代码在MySQL中已经给我们提供了，我们要做的就是在合适的业务场景调用对应的函数完成对应的业务需求即可。</p><p>MySQL中的函数主要分为以下四类： 字符串函数、数值函数、日期函数、流程函数。</p><h3 id="_3-1-字符串函数" tabindex="-1"><a class="header-anchor" href="#_3-1-字符串函数" aria-hidden="true">#</a> 3.1 字符串函数</h3><p>MySQL中内置了很多字符串函数，常用的几个如下：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CONCAT(S1,S2,...Sn)</td><td>字符串拼接，将S1，S2，... Sn拼接成一个字符串</td></tr><tr><td>INXDFG(str,x,y,instr)</td><td>将字符串str从第x位置，y个字符串长的字串替换为字符串instr</td></tr><tr><td>LOWER(str)</td><td>将字符串str全部转为小写</td></tr><tr><td>UPPER(str)</td><td>将字符串str全部转为大写</td></tr><tr><td>LEFT(str,x)</td><td>返回字符串str最左边的x个字符</td></tr><tr><td>RIGHT(str,x)</td><td>返回字符串str最右边的x个字符</td></tr><tr><td>LPAD(str,n,pad)</td><td>左填充，用字符串pad对str的左边进行填充，达到n个字符串长度</td></tr><tr><td>RPAD(str,n,pad)</td><td>右填充，用字符串pad对str的右边进行填充，达到n个字符串长度</td></tr><tr><td>TRIM(str)</td><td>去掉字符串头部和尾部的空格</td></tr><tr><td>LTRIM(str)</td><td>去掉字符串str左侧的空格</td></tr><tr><td>RTRIM(str)</td><td>去掉字符串str行尾的空格</td></tr><tr><td>SUBSTRING(str,start,len)</td><td>返回从字符串str从start位置起的len个长度的字符串</td></tr><tr><td>REPEAT(str,x)</td><td>返回str重复x次的结果</td></tr><tr><td>REPLACE(str，a，b)</td><td>用字符串b替换字符串str中所有出现的字符串a</td></tr></tbody></table><p><strong>CONCAT</strong></p><p>任何字符串于null进行链接的结果都将是NULL</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> concat<span class="token punctuation">(</span><span class="token string">&#39;aaa&#39;</span>,<span class="token string">&#39;bbb&#39;</span>,<span class="token string">&#39;ccc&#39;</span><span class="token punctuation">)</span>,concat<span class="token punctuation">(</span><span class="token string">&#39;aaa&#39;</span>,null<span class="token punctuation">)</span><span class="token punctuation">;</span>
+---------------------------+--------------------+
<span class="token operator">|</span> concat<span class="token punctuation">(</span><span class="token string">&#39;aaa&#39;</span>,<span class="token string">&#39;bbb&#39;</span>,<span class="token string">&#39;ccc&#39;</span><span class="token punctuation">)</span> <span class="token operator">|</span> concat<span class="token punctuation">(</span><span class="token string">&#39;aaa&#39;</span>,null<span class="token punctuation">)</span> <span class="token operator">|</span>
+---------------------------+--------------------+
<span class="token operator">|</span> aaabbbccc                 <span class="token operator">|</span> NULL               <span class="token operator">|</span>
+---------------------------+--------------------+
<span class="token number">1</span> row <span class="token keyword">in</span> <span class="token builtin class-name">set</span> <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>INSERT</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> INSERT<span class="token punctuation">(</span><span class="token string">&#39;beijing2008you&#39;</span>,12,3,<span class="token string">&#39;me&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
+------------------------------------+
<span class="token operator">|</span> INSERT<span class="token punctuation">(</span><span class="token string">&#39;beijing2008you&#39;</span>,12,3,<span class="token string">&#39;me&#39;</span><span class="token punctuation">)</span> <span class="token operator">|</span>
+------------------------------------+
<span class="token operator">|</span> beijing2008me                      <span class="token operator">|</span>
+------------------------------------+
<span class="token number">1</span> row <span class="token keyword">in</span> <span class="token builtin class-name">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>LOWER 和 UPPER</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> LOWER<span class="token punctuation">(</span><span class="token string">&#39;BEIJING2008&#39;</span><span class="token punctuation">)</span>, UPPER<span class="token punctuation">(</span><span class="token string">&#39;beijing2008&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
+----------------------+----------------------+
<span class="token operator">|</span> LOWER<span class="token punctuation">(</span><span class="token string">&#39;BEIJING2008&#39;</span><span class="token punctuation">)</span> <span class="token operator">|</span> UPPER<span class="token punctuation">(</span><span class="token string">&#39;beijing2008&#39;</span><span class="token punctuation">)</span> <span class="token operator">|</span>
+----------------------+----------------------+
<span class="token operator">|</span> beijing2008          <span class="token operator">|</span> BEIJING2008          <span class="token operator">|</span>
+----------------------+----------------------+
<span class="token number">1</span> row <span class="token keyword">in</span> <span class="token builtin class-name">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>LEFT 和 RIGHT</strong></p><p>如果第二个参数是NULL，，那么不返回任何字符串。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> LEFT<span class="token punctuation">(</span><span class="token string">&#39;beijing2008&#39;</span>,7<span class="token punctuation">)</span>,LEFT<span class="token punctuation">(</span><span class="token string">&#39;beijing&#39;</span>,null<span class="token punctuation">)</span>,RIGHT<span class="token punctuation">(</span><span class="token string">&#39;beijing2008&#39;</span>,4<span class="token punctuation">)</span><span class="token punctuation">;</span>
+-----------------------+----------------------+------------------------+
<span class="token operator">|</span> LEFT<span class="token punctuation">(</span><span class="token string">&#39;beijing2008&#39;</span>,7<span class="token punctuation">)</span> <span class="token operator">|</span> LEFT<span class="token punctuation">(</span><span class="token string">&#39;beijing&#39;</span>,null<span class="token punctuation">)</span> <span class="token operator">|</span> RIGHT<span class="token punctuation">(</span><span class="token string">&#39;beijing2008&#39;</span>,4<span class="token punctuation">)</span> <span class="token operator">|</span>
+-----------------------+----------------------+------------------------+
<span class="token operator">|</span> beijing               <span class="token operator">|</span> NULL                 <span class="token operator">|</span> <span class="token number">2008</span>                   <span class="token operator">|</span>
+-----------------------+----------------------+------------------------+
<span class="token number">1</span> row <span class="token keyword">in</span> <span class="token builtin class-name">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>LPAD 和 RPAD</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>mysql&gt; select lpad(&#39;2008&#39;,20,&#39;beijing&#39;),rpad(&#39;beijing&#39;,20,&#39;2008&#39;);
+---------------------------+---------------------------+
| lpad(&#39;2008&#39;,20,&#39;beijing&#39;) | rpad(&#39;beijing&#39;,20,&#39;2008&#39;) |
+---------------------------+---------------------------+
| beijingbeijingbe2008      | beijing2008200820082      |
+---------------------------+---------------------------+
1 row in set (0.01 sec)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>LTRIM 和 RTRIM</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> ltrim<span class="token punctuation">(</span><span class="token string">&#39;  |beijing&#39;</span><span class="token punctuation">)</span>,rtrim<span class="token punctuation">(</span><span class="token string">&#39;beijing|   &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
+---------------------+----------------------+
<span class="token operator">|</span> ltrim<span class="token punctuation">(</span><span class="token string">&#39;  |beijing&#39;</span><span class="token punctuation">)</span> <span class="token operator">|</span> rtrim<span class="token punctuation">(</span><span class="token string">&#39;beijing|   &#39;</span><span class="token punctuation">)</span> <span class="token operator">|</span>
+---------------------+----------------------+
<span class="token operator">|</span> <span class="token operator">|</span>beijing            <span class="token operator">|</span> beijing<span class="token operator">|</span>             <span class="token operator">|</span>
+---------------------+----------------------+
<span class="token number">1</span> row <span class="token keyword">in</span> <span class="token builtin class-name">set</span> <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>REPEAT</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> repeat<span class="token punctuation">(</span><span class="token string">&#39;mysql &#39;</span>,3<span class="token punctuation">)</span><span class="token punctuation">;</span>
+--------------------+
<span class="token operator">|</span> repeat<span class="token punctuation">(</span><span class="token string">&#39;mysql &#39;</span>,3<span class="token punctuation">)</span> <span class="token operator">|</span>
+--------------------+
<span class="token operator">|</span> mysql mysql mysql  <span class="token operator">|</span>
+--------------------+
<span class="token number">1</span> row <span class="token keyword">in</span> <span class="token builtin class-name">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>REPLACE</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> replace<span class="token punctuation">(</span><span class="token string">&#39;beijing_2010&#39;</span>,<span class="token string">&#39;_2010&#39;</span>,<span class="token string">&#39;2008&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
+----------------------------------------+
<span class="token operator">|</span> replace<span class="token punctuation">(</span><span class="token string">&#39;beijing_2010&#39;</span>,<span class="token string">&#39;_2010&#39;</span>,<span class="token string">&#39;2008&#39;</span><span class="token punctuation">)</span> <span class="token operator">|</span>
+----------------------------------------+
<span class="token operator">|</span> beijing2008                            <span class="token operator">|</span>
+----------------------------------------+
<span class="token number">1</span> row <span class="token keyword">in</span> <span class="token builtin class-name">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-数值函数" tabindex="-1"><a class="header-anchor" href="#_3-2-数值函数" aria-hidden="true">#</a> 3.2 数值函数</h3><p>常见的数值函数如下：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>ABS(x)</td><td>返回x的绝对值</td></tr><tr><td>CEIL(x)</td><td>向上取整</td></tr><tr><td>FLOOR(x)</td><td>向下取整</td></tr><tr><td>MOD(x,y)</td><td>返回x/y的模</td></tr><tr><td>RAND()</td><td>返回0~1内的随机数</td></tr><tr><td>ROUND(x,y)</td><td>求参数x的四舍五入的值，保留y位小数</td></tr><tr><td>TRUNCATE(x,y)</td><td>返回数字x阶段为y位小数的结果</td></tr></tbody></table><h3 id="_3-3-日期函数" tabindex="-1"><a class="header-anchor" href="#_3-3-日期函数" aria-hidden="true">#</a> 3.3 日期函数</h3><p>常见的日期函数如下：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CURDATE()</td><td>返回当前日期</td></tr><tr><td>CURTIME()</td><td>返回当前时间</td></tr><tr><td>NOW()</td><td>返回当前日期和时间</td></tr><tr><td>YEAR(date)</td><td>获取指定date的年份</td></tr><tr><td>MONTH(date)</td><td>获取指定date的月份</td></tr><tr><td>DAY(date)</td><td>获取指定date的日期</td></tr><tr><td>DATE_ADD(date, INTERVAL exprtype)</td><td>返回一个日期/时间值加上一个时间间隔expr后的时间值</td></tr><tr><td>DATEDIFF(date1,date2)</td><td>返回起始时间date1 和 结束时间date2之间的天数</td></tr></tbody></table><h3 id="_3-4-流程函数" tabindex="-1"><a class="header-anchor" href="#_3-4-流程函数" aria-hidden="true">#</a> 3.4 流程函数</h3><p>流程函数也是很常用的一类函数，可以在SQL语句中实现条件筛选，从而提高语句的效率。</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>IF(value , t , f)</td><td>如果value为true，则返回t，否则返回f</td></tr><tr><td>IFNULL(value1 , value2)</td><td>如果value1不为空，返回value1，否则返回value2</td></tr><tr><td>CASE WHEN [ val1 ] THEN [res1] ...<br>ELSE [ default ] END</td><td>如果val1为true，返回res1，... 否则返回default默认值</td></tr><tr><td>CASE [ expr ] WHEN [ val1 ] THEN<br>[res1] ... ELSE [ default ] END</td><td>如果expr的值等于val1，返回res1，... 否则返回default默认值</td></tr></tbody></table><h2 id="四-约束" tabindex="-1"><a class="header-anchor" href="#四-约束" aria-hidden="true">#</a> 四：约束</h2><h3 id="_4-1-概述" tabindex="-1"><a class="header-anchor" href="#_4-1-概述" aria-hidden="true">#</a> 4.1 概述</h3><p>概念：约束是作用于表中字段上的规则，用于限制存储在表中的数据。</p><p>目的：保证数据库中数据的正确、有效性和完整性。</p><p>分类</p><table><thead><tr><th>约束</th><th>描述</th><th>关键字</th></tr></thead><tbody><tr><td>非空约束</td><td>限制该字段的数据不能为null</td><td>NOT NULL</td></tr><tr><td>唯一约束</td><td>保证该字段的所有数据都是唯一、不重复的</td><td>UNIQUE</td></tr><tr><td>主键约束</td><td>主键是一行数据的唯一标识，要求非空且唯一</td><td>PRIMARY KEY</td></tr><tr><td>默认约束</td><td>保存数据时，如果未指定该字段的值，则采用默认值</td><td>DEFAULT</td></tr><tr><td>检查约束(8.0.16版本之后)</td><td>保证字段值满足某一个条件</td><td>CHECK</td></tr><tr><td>外键约束</td><td>用来让两张表的数据之间建立连接，保证数据的一致性和完整性</td><td>FOREIGN</td></tr></tbody></table><blockquote><p>注意：约束是作用于表中字段上的，可以在创建表/修改表的时候添加约束。</p></blockquote><h3 id="_4-2-约束演示" tabindex="-1"><a class="header-anchor" href="#_4-2-约束演示" aria-hidden="true">#</a> 4.2 约束演示</h3><p>上面我们介绍了数据库中常见的约束，以及约束涉及到的关键字，那这些约束我们到底如何在创建表、修改表的时候来指定呢，接下来我们就通过一个案例，来演示一下。</p><p>案例需求： 根据需求，完成表结构的创建。需求如下：</p><table><thead><tr><th>字段名</th><th>字段含义</th><th>字段类型</th><th>约束条件</th><th>约束关键字</th></tr></thead><tbody><tr><td>id</td><td>ID唯一标识</td><td>int</td><td>主键，并且自动增长</td><td>PRIMARY KEY, AUTO_INCREMENT</td></tr><tr><td>name</td><td>姓名</td><td>varchar(10)</td><td>不为空，并且唯一</td><td>NOT NULL , UNIQUE</td></tr><tr><td>age</td><td>年龄</td><td>int</td><td>大于0，并且小于等于120</td><td>CHECK</td></tr><tr><td>status</td><td>状态</td><td>char(1)</td><td>如果没有指定该值，默认为1</td><td>DEFAULT</td></tr><tr><td>gender</td><td>性别</td><td>char(1)</td><td>无</td><td></td></tr></tbody></table><p>对应的建表语句为：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> tb_user<span class="token punctuation">(</span> 
    id <span class="token keyword">int</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;ID唯一标识&#39;</span><span class="token punctuation">,</span> 
    name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">UNIQUE</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;姓名&#39;</span> <span class="token punctuation">,</span> 
    age <span class="token keyword">int</span> <span class="token keyword">check</span> <span class="token punctuation">(</span>age <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> age <span class="token operator">&lt;=</span> <span class="token number">120</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;年龄&#39;</span> <span class="token punctuation">,</span> 
    <span class="token keyword">status</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&#39;1&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;状态&#39;</span><span class="token punctuation">,</span> 
    gender <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;性别&#39;</span> 
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在为字段添加约束时，我们只需要在字段之后加上约束的关键字即可，需要关注其语法。我们执行上面的SQL把表结构创建完成，然后接下来，就可以通过一组数据进行测试，从而验证一下，约束是否可以生效。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">insert</span> <span class="token keyword">into</span> tb_user<span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span><span class="token keyword">status</span><span class="token punctuation">,</span>gender<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&#39;Tom1&#39;</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;男&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;Tom2&#39;</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;男&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">insert</span> <span class="token keyword">into</span> tb_user<span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span><span class="token keyword">status</span><span class="token punctuation">,</span>gender<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&#39;Tom3&#39;</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;男&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">insert</span> <span class="token keyword">into</span> tb_user<span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span><span class="token keyword">status</span><span class="token punctuation">,</span>gender<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;男&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">insert</span> <span class="token keyword">into</span> tb_user<span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span><span class="token keyword">status</span><span class="token punctuation">,</span>gender<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&#39;Tom3&#39;</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;男&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">insert</span> <span class="token keyword">into</span> tb_user<span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span><span class="token keyword">status</span><span class="token punctuation">,</span>gender<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&#39;Tom4&#39;</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;男&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">insert</span> <span class="token keyword">into</span> tb_user<span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span><span class="token keyword">status</span><span class="token punctuation">,</span>gender<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&#39;Tom5&#39;</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;男&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">insert</span> <span class="token keyword">into</span> tb_user<span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span><span class="token keyword">status</span><span class="token punctuation">,</span>gender<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&#39;Tom5&#39;</span><span class="token punctuation">,</span><span class="token number">121</span><span class="token punctuation">,</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;男&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">insert</span> <span class="token keyword">into</span> tb_user<span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>gender<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&#39;Tom5&#39;</span><span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token string">&#39;男&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面，我们是通过编写SQL语句的形式来完成约束的指定，那加入我们是通过图形化界面来创建表结构时，又该如何来指定约束呢？ 只需要在创建表的时候，根据我们的需要选择对应的约束即可。</p><h3 id="_4-3-外键约束" tabindex="-1"><a class="header-anchor" href="#_4-3-外键约束" aria-hidden="true">#</a> 4.3 外键约束</h3><p>略</p><h2 id="五-多表查询" tabindex="-1"><a class="header-anchor" href="#五-多表查询" aria-hidden="true">#</a> 五：多表查询</h2><h2 id="六-事物" tabindex="-1"><a class="header-anchor" href="#六-事物" aria-hidden="true">#</a> 六：事物</h2><h3 id="_6-1-事务简介" tabindex="-1"><a class="header-anchor" href="#_6-1-事务简介" aria-hidden="true">#</a> 6.1 事务简介</h3><p>事务 是一组操作的集合，它是一个不可分割的工作单位，事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。</p><p>就比如: 张三给李四转账1000块钱，张三银行账户的钱减少1000，而李四银行账户的钱要增加1000。 这一组操作就必须在一个事务的范围内，要么都成功，要么都失败。</p><p><img src="`+l+'" alt="image-20220728100011856"></p><p>正常情况: 转账这个操作, 需要分为以下这么三步来完成 , 三步完成之后, 张三减少1000, 而李四增加1000, 转账成功 :</p><p><img src="'+c+'" alt="image-20220728100045032"></p><p>异常情况: 转账这个操作, 也是分为以下这么三步来完成 , 在执行第三步是报错了, 这样就导致张三减少1000块钱, 而李四的金额没变, 这样就造成了数据的不一致, 就出现问题了。</p><p><img src="'+i+'" alt="image-20220728100122872"></p><p>为了解决上述的问题，就需要通过数据的事务来完成，我们只需要在业务逻辑执行之前开启事务，执行完毕后提交事务。如果执行过程中报错，则回滚事务，把数据恢复到事务开始之前的状态。</p><p><img src="'+r+`" alt="image-20220728100154176"></p><blockquote><p>注意： 默认MySQL的事务是自动提交的，也就是说，当执行完一条DML语句时，MySQL会立即隐式的提交事务。</p></blockquote><h3 id="_6-2-事务操作" tabindex="-1"><a class="header-anchor" href="#_6-2-事务操作" aria-hidden="true">#</a> 6.2 事务操作</h3><p>数据准备：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> account<span class="token punctuation">;</span> 
<span class="token keyword">create</span> <span class="token keyword">table</span> account<span class="token punctuation">(</span> 
    id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">comment</span> <span class="token string">&#39;ID&#39;</span><span class="token punctuation">,</span> 
    name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">comment</span> <span class="token string">&#39;姓名&#39;</span><span class="token punctuation">,</span> 
    money <span class="token keyword">double</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">comment</span> <span class="token string">&#39;余额&#39;</span> 
<span class="token punctuation">)</span> <span class="token keyword">comment</span> <span class="token string">&#39;账户表&#39;</span><span class="token punctuation">;</span> 
<span class="token keyword">insert</span> <span class="token keyword">into</span> account<span class="token punctuation">(</span>name<span class="token punctuation">,</span> money<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;李四&#39;</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-2-1-未控制事务" tabindex="-1"><a class="header-anchor" href="#_6-2-1-未控制事务" aria-hidden="true">#</a> 6.2.1 未控制事务</h4><h5 id="_1-测试正常情况" tabindex="-1"><a class="header-anchor" href="#_1-测试正常情况" aria-hidden="true">#</a> 1). 测试正常情况</h5><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 1. 查询张三余额 </span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> account <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">;</span> 
<span class="token comment">-- 2. 张三的余额减少1000 </span>
<span class="token keyword">update</span> account <span class="token keyword">set</span> money <span class="token operator">=</span> money <span class="token operator">-</span> <span class="token number">1000</span> <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">;</span> 
<span class="token comment">-- 3. 李四的余额增加1000 </span>
<span class="token keyword">update</span> account <span class="token keyword">set</span> money <span class="token operator">=</span> money <span class="token operator">+</span> <span class="token number">1000</span> <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">&#39;李四&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试完毕之后检查数据的状态, 可以看到数据操作前后是一致的。</p><h4 id="_6-2-2-显示的事务控制" tabindex="-1"><a class="header-anchor" href="#_6-2-2-显示的事务控制" aria-hidden="true">#</a> 6.2.2 显示的事务控制</h4><h5 id="_1-开启事物" tabindex="-1"><a class="header-anchor" href="#_1-开启事物" aria-hidden="true">#</a> 1). 开启事物</h5><p>START TRANSACTION 或者 BEGIN ，作用是显式开启一个事务。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code> <span class="token keyword">BEGIN</span><span class="token punctuation">;</span>
<span class="token comment">#或者</span>
<span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>START TRANSACTION 语句相较于 BEGIN 特别之处在于，后边能跟随几个 修饰符 ：</p><ul><li><p>READ ONLY ：标识当前事务是一个 只读事务 ，也就是属于该事务的数据库操作只能读取数据，而不能修改数据。</p></li><li><p>READ WRITE ：标识当前事务是一个读写事务 ，也就是属于该事务的数据库操作既可以读取数据，也可以修改数据。</p></li><li><p>WITH CONSISTENT SNAPSHOT ：启动一致性读。比如：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span> <span class="token keyword">READ</span> ONLY<span class="token punctuation">;</span> <span class="token comment">#开启一个只读事务</span>
<span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span> <span class="token keyword">READ</span> ONLY<span class="token punctuation">,</span> <span class="token keyword">WITH</span> <span class="token keyword">CONSISTENT</span> <span class="token keyword">SNAPSHOT</span><span class="token punctuation">;</span> <span class="token comment">#开启只读事多和一致性读</span>
<span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span> <span class="token keyword">READ</span> <span class="token keyword">WRITE</span><span class="token punctuation">,</span> <span class="token keyword">WITH</span> <span class="token keyword">CONSISTENT</span> <span class="token keyword">SNAPSHOT</span><span class="token punctuation">;</span> <span class="token comment">#开启读写事务和一致性读</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><blockquote><p>补充:只读事务中只是不允许修改那些其他事务也能访问到的表中的数据，对于临时表来说(使用CREATE TMEPORARY TABLE创建的表)，由于它们只能在当前会话中可见，所以只读事务其实也是可以对临时表进行增、删、改操作的</p></blockquote><p>注意:</p><p>READ ONLY和READ WRITE是用来设置所谓的事务访问模式的，就是以只读还是读写的方式来访问数据库中的数据，一个事务的访问模式不能同时既设置为只读的又设置为读写的，所以不能同时把READ ONLY和READ WRITE放到START TRANSACTION语句后边</p><p>如果不显式指定事务的访问模式，那么该事务的访问模式就是读写模式。</p><h5 id="_2-提交事务" tabindex="-1"><a class="header-anchor" href="#_2-提交事务" aria-hidden="true">#</a> 2). 提交事务</h5><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 提交事务。当提交事务后，对数据库的修改是永久性的</span>
<span class="token keyword">COMMIT</span><span class="token punctuation">;</span>
<span class="token comment"># 回滚事务。即撤销正在进行的所有没有提交的修改</span>
<span class="token keyword">ROLLBACK</span><span class="token punctuation">;</span>
<span class="token comment"># 将事务回滚到某个保存点</span>
<span class="token keyword">ROLLBACK</span> <span class="token keyword">TO</span> <span class="token punctuation">[</span><span class="token keyword">SAVEPOINT</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中关于SAVEPOINT相关操作有:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">#在事务中创建保存点，方便后续针对保存点进行回滚。一个事务中可么存在多个保存点</span>
<span class="token keyword">SAVEPOINT</span> 保存点名称<span class="token punctuation">;</span>
<span class="token comment">#删除某个保存点</span>
<span class="token keyword">RELEASE</span> <span class="token keyword">SAVEPOINT</span>保存点名称；
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-2-3-隐式的事务控制" tabindex="-1"><a class="header-anchor" href="#_6-2-3-隐式的事务控制" aria-hidden="true">#</a> 6.2.3 隐式的事务控制</h4><p>MySQL中有一个系统变量 autocommit ：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SHOW</span> VARIABLES <span class="token operator">LIKE</span> <span class="token string">&#39;autocommit&#39;</span><span class="token punctuation">;</span>
<span class="token comment">/*
+---------------+-------+
| Variable_name | Value |
+---------------+-------+
| autocommit    | ON    |
+---------------+-------+
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下，如果不显式的使用START TRANSACTION或者BEGIN语句开启一个事务，那么每一条语句都算是一个独立的事务，这种特性称之为事务的自动提交。也就是说，不以START TRANSACTION或者BEGIN语句显式的开启一个事务，那么下边这两条语句就相当于放到两个独立的事务中去执行</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">#  关键字：autocommit </span>
<span class="token comment">#set autocommit = false;</span>

<span class="token keyword">SHOW</span> VARIABLES <span class="token operator">LIKE</span> <span class="token string">&#39;autocommit&#39;</span><span class="token punctuation">;</span><span class="token comment">#默认是ON</span>

<span class="token keyword">UPDATE</span> account <span class="token keyword">SET</span> balance <span class="token operator">=</span> balance <span class="token operator">-</span> <span class="token number">10</span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">#此时这条DML操作是一个独立的事务</span>

<span class="token keyword">UPDATE</span> account <span class="token keyword">SET</span> balance <span class="token operator">=</span> balance <span class="token operator">+</span> <span class="token number">10</span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">#此时这条DML操作是一个独立的事务</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>当然，如果想关闭这种 自动提交 的功能，可以使用下边两种方法之一：</strong></p><ul><li>显式的的使用 START TRANSACTION 或者 BEGIN 语句开启一个事务。这样在本次事务提交或者回滚前会暂时关闭掉自动提交的功能。</li><li>把系统变量 autocommit 的值设置为 OFF ，就像这样：</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SET</span> autocommit <span class="token operator">=</span> <span class="token keyword">OFF</span><span class="token punctuation">;</span>
<span class="token comment">#或</span>
<span class="token keyword">SET</span> autocommit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样的话，写入的多条语句就算是属于同一个事务了，直到我们显式的写出COMNIT语句来把这个事务提交掉，或者显式的写出ROLLBACK语句来把这个事务回滚掉。</p><p>如何关闭自动提交？</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">#方式1：</span>
<span class="token keyword">SET</span> autocommit <span class="token operator">=</span> <span class="token boolean">FALSE</span><span class="token punctuation">;</span> <span class="token comment">#针对于DML操作是有效的，对DDL操作是无效的。</span>

<span class="token keyword">UPDATE</span> account <span class="token keyword">SET</span> balance <span class="token operator">=</span> balance <span class="token operator">-</span> <span class="token number">10</span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token keyword">UPDATE</span> account <span class="token keyword">SET</span> balance <span class="token operator">=</span> balance <span class="token operator">+</span> <span class="token number">10</span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> 

<span class="token keyword">COMMIT</span><span class="token punctuation">;</span> <span class="token comment">#或rollback;</span>

<span class="token comment">#方式2：在autocommit为true的情况下，使用start transaction 或begin开启事务，那么DML操作就不会自动提交数据</span>

<span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span>

<span class="token keyword">UPDATE</span> account <span class="token keyword">SET</span> balance <span class="token operator">=</span> balance <span class="token operator">-</span> <span class="token number">10</span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token keyword">UPDATE</span> account <span class="token keyword">SET</span> balance <span class="token operator">=</span> balance <span class="token operator">+</span> <span class="token number">10</span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> 

<span class="token keyword">COMMIT</span><span class="token punctuation">;</span> <span class="token comment">#或rollback;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-2-4-隐式提交数据" tabindex="-1"><a class="header-anchor" href="#_6-2-4-隐式提交数据" aria-hidden="true">#</a> 6.2.4 隐式提交数据</h4><p><strong>数据定义语言(Data definition language，缩写为:DDL)</strong></p><p>数据库对象，指的就是数据库、表、视图、存储过程等结构。当使用CREATE 、ALTER、 DROP等语句去修改数据库对象时，就会隐式的提交前边语句所属于的事务。即:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">BEGIN</span><span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">#事务中的一条语句</span>
<span class="token keyword">UPDATE</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">#事务中的一条语句</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token comment">#丰务中的其它语句</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment"># 此语句会隐式的提交前边语句所属于的事务</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>隐式使用或修改mysql数据库中的表</strong></p><p>当使用ALTER USER、CREATE USER、DROP USER 、GRANT、RENAME USER、REVOKE. SET PASSWORD等语句时也会隐式的提交前边语句所属于的事务</p><p><strong>事务控制或关于锁定的语句</strong></p><p>当在一个事务还没提交或者回滚时就又使用START TRANSACTION或者BEGIN语句开启了另一个事务时，会隐式的提交上—个事务。即:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">BEGIN</span><span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">#事务中的一条语句</span>
<span class="token keyword">UPDATE</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">#事务中的一条语句</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>       <span class="token comment">#事务中的其它语句</span>
<span class="token keyword">BEGIN</span><span class="token punctuation">;</span>   <span class="token comment">#此语句会隐式的提交前面语句所属于的事务</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当前的 autocommit 系统变量的值为 OFF ，我们手动把它调为 ON 时，也会 隐式的提交 前边语 句所属的事务。</p><p>使用 LOCK TABLES 、 UNLOCK TABLES 等关于锁定的语句也会 隐式的提交 前边语句所属的事务。</p><p><strong>加载数据的语句</strong></p><p>使用LOAD DATA语句来批量往数据库中导入数据时，也会隐式的提交前边语句所属的事务。</p><p><strong>关于MySQL复制的一些语句</strong></p><p>使用START SLAVE、STOP SLAVE、RESET SLAVE、CHANGE MASTER TO等语句时会隐式的提交前边语句所属的事务。</p><p><strong>其它的一些语句</strong></p><p>使用ANALYZE TABLE、CACHE INDEX、CHECK TABLE、FLUSH、LOAD INDEX INTO CACHE 、0PTIMIZE TABLE、REPAIR TABLE、RESET 等语句也会隐式的提交前边语句所属的事务。</p><h3 id="_6-3-事务四大特性" tabindex="-1"><a class="header-anchor" href="#_6-3-事务四大特性" aria-hidden="true">#</a> 6.3 事务四大特性</h3><ul><li><p><strong>原子性（Atomicity）</strong>：事务是不可分割的最小操作单元，要么全部成功，要么全部失败。</p></li><li><p><strong>一致性（Consistency）</strong>：事务完成时，必须使所有的数据都保持一致状态。</p></li><li><p><strong>隔离性（Isolation）</strong>：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行。</p></li><li><p><strong>持久性（Durability）</strong>：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的。</p></li></ul><p>上述就是事务的四大特性，简称ACID。</p><h3 id="_6-4-并发事务问题" tabindex="-1"><a class="header-anchor" href="#_6-4-并发事务问题" aria-hidden="true">#</a> 6.4 并发事务问题</h3><h4 id="_1-赃读" tabindex="-1"><a class="header-anchor" href="#_1-赃读" aria-hidden="true">#</a> 1). 赃读</h4><p>一个事务读到另外一个事务还没有提交的数据。</p><p><img src="`+d+'" alt="image-20220728135458222"></p><p>比如B读取到了A未提交的数据。</p><h4 id="_2-不可重复读" tabindex="-1"><a class="header-anchor" href="#_2-不可重复读" aria-hidden="true">#</a> 2). 不可重复读</h4><p>一个事务先后读取同一条记录，但两次读取的数据不同，称之为不可重复读。</p><p><img src="'+u+'" alt="image-20220728135630025"></p><p>事务A两次读取同一条记录，但是读取到的数据却是不一样的。</p><h4 id="_3-幻读" tabindex="-1"><a class="header-anchor" href="#_3-幻读" aria-hidden="true">#</a> 3). 幻读：</h4><p>一个事务按照条件查询数据时，没有对应的数据行，但是在插入数据时，又发现这行数据已经存在，好像出现了 &quot;幻影&quot;。</p><p><img src="'+k+`" alt="image-20220728135718177"></p><h3 id="_6-5-事务隔离级别" tabindex="-1"><a class="header-anchor" href="#_6-5-事务隔离级别" aria-hidden="true">#</a> 6.5 事务隔离级别</h3><p>为了解决并发事务所引发的问题，在数据库中引入了事务隔离级别。主要有以下几种：</p><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>Read uncommitted</td><td>√</td><td>√</td><td>√</td></tr><tr><td>Read committed</td><td>×</td><td>√</td><td>√</td></tr><tr><td>Repeatable Read(默认)</td><td>×</td><td>×</td><td>√</td></tr><tr><td>Serializable</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><h4 id="_1-查看事务隔离级别" tabindex="-1"><a class="header-anchor" href="#_1-查看事务隔离级别" aria-hidden="true">#</a> 1). 查看事务隔离级别</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> @<span class="token variable">@TRANSACTION_ISOLATION</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-设置事务隔离级别" tabindex="-1"><a class="header-anchor" href="#_2-设置事务隔离级别" aria-hidden="true">#</a> 2). 设置事务隔离级别</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SET</span> <span class="token punctuation">[</span> <span class="token keyword">SESSION</span> <span class="token operator">|</span> <span class="token keyword">GLOBAL</span> <span class="token punctuation">]</span> <span class="token keyword">TRANSACTION</span> <span class="token keyword">ISOLATION</span> <span class="token keyword">LEVEL</span> { <span class="token keyword">READ</span> <span class="token keyword">UNCOMMITTED</span> <span class="token operator">|</span> <span class="token keyword">READ</span> <span class="token keyword">COMMITTED</span> <span class="token operator">|</span> <span class="token keyword">REPEATABLE</span> <span class="token keyword">READ</span> <span class="token operator">|</span> <span class="token keyword">SERIALIZABLE</span> }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>注意：事务隔离级别越高，数据越安全，但是性能越低。</p></blockquote><hr>`,489),b=[v];function g(h,y){return n(),a("div",null,b)}const T=s(m,[["render",g],["__file","mysql-base.html.vue"]]);export{T as default};
