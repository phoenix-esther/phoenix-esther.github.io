import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as e,c,a as s,b as n,d as o,e as l}from"./app-e53dd85b.js";const i="/assets/d483ec0888544dd89c698600d0da30fftplv-k3u1fbpfcp-zoom-in-crop-mark1512000-5e8a13f7.webp",u="/assets/1232d55fe0d24f9885a7e604c7921fd1tplv-k3u1fbpfcp-zoom-in-crop-mark1512000-cfa0892f.webp",k={},r=s("h1",{id:"nacos-服务注册发现-客户端代码分析",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#nacos-服务注册发现-客户端代码分析","aria-hidden":"true"},"#"),n(" Nacos 服务注册发现 客户端代码分析")],-1),d=s("p",null,[n("最近在看"),s("code",null,"Nacos2.2.0"),n("的源码，一直想写点东西下来，积累一下自己看到的内容，也怕过段时间就忘记了，还不如写下来记录起来，以后也可以经常回来看一看，起到温故知新的效果。")],-1),v=s("code",null,"Nacos 1.X",-1),m={href:"https://link.juejin.cn?target=https%3A%2F%2Fcloud.tencent.com%2Fdeveloper%2Farticle%2F1810135",target:"_blank",rel:"noopener noreferrer"},b=l(`<p>这里也分析下自己对<code>Nacos2</code>源码的一些个人见解。</p><h1 id="nacos-注册服务分析" tabindex="-1"><a class="header-anchor" href="#nacos-注册服务分析" aria-hidden="true">#</a> Nacos 注册服务分析</h1><p>分析源码，首先我们得找到入口。在源码入口，我们可以看到一个叫<code>nacos-example</code>的工程，看命名我们就能知道这个是一个样例工程，就是为了方便我们快速入手的。在这个工程中有三个启动测试类，这里我们找到我们关注点<code>NamingExample</code>。在这个<code>main</code>方法中，我们查看关键的两行代码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 根据NamingFactory创建一个Service服务类</span>
<span class="token class-name">NamingService</span> naming <span class="token operator">=</span> <span class="token class-name">NamingFactory</span><span class="token punctuation">.</span><span class="token function">createNamingService</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 通过服务类去注向注册中心注册自己的服务</span>
naming<span class="token punctuation">.</span><span class="token function">registerInstance</span><span class="token punctuation">(</span><span class="token string">&quot;nacos.test.3&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;11.11.11.11&quot;</span><span class="token punctuation">,</span> <span class="token number">8888</span><span class="token punctuation">,</span> <span class="token string">&quot;TEST1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们首先跟踪一下<code>NamingFactory#createNamingService</code>方法，这个方法很简单，就是根据构造方法创建一个<code>NacosNamingService</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
  * Create a new naming service.
  *
  * <span class="token keyword">@param</span> <span class="token parameter">properties</span> naming service properties
  * <span class="token keyword">@return</span> new naming service
  * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">NacosException</span></span> nacos exception
  */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">NamingService</span> <span class="token function">createNamingService</span><span class="token punctuation">(</span><span class="token class-name">Properties</span> properties<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NacosException</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> driverImplClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;com.alibaba.nacos.client.naming.NacosNamingService&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Constructor</span> constructor <span class="token operator">=</span> driverImplClass<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token class-name">Properties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">NamingService</span><span class="token punctuation">)</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NacosException</span><span class="token punctuation">(</span><span class="token class-name">NacosException</span><span class="token punctuation">.</span><span class="token constant">CLIENT_INVALID_PARAM</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>这里有一点要注意，创建一个<code>NacosNamingService</code>,是根据构造方法创建，但是千万不要小看构造方法。如果平时写习惯了<code>spring</code>工程代码，往往直接放容器中托管，不需要操心属性的注入，<code>spring</code>会自动帮忙注入处理，但是在非<code>spring</code>的代码工程中，很多属性都需要自己去创建和处理，而这些一般都是通过静态代码块，或者构造方法来处理的。</p></blockquote><p>接下来从这个里面的注册方法开始分析<code>registerInstance</code>，这个才是我们需要看的重点。</p><p><img src="`+i+`" alt="registerInstance.png"></p><p>我们找到这个<code>registerInstance</code>的实现方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerInstance</span><span class="token punctuation">(</span><span class="token class-name">String</span> serviceName<span class="token punctuation">,</span> <span class="token class-name">String</span> groupName<span class="token punctuation">,</span> <span class="token class-name">String</span> ip<span class="token punctuation">,</span> <span class="token keyword">int</span> port<span class="token punctuation">,</span> <span class="token class-name">String</span> clusterName<span class="token punctuation">)</span>
    <span class="token keyword">throws</span> <span class="token class-name">NacosException</span> <span class="token punctuation">{</span>
    <span class="token class-name">Instance</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    instance<span class="token punctuation">.</span><span class="token function">setIp</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>
    instance<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>
    instance<span class="token punctuation">.</span><span class="token function">setWeight</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    instance<span class="token punctuation">.</span><span class="token function">setClusterName</span><span class="token punctuation">(</span>clusterName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 创建了一个Instance，这个Instance，查看它的包名，是com.alibaba.nacos.api.naming.pojo，也就是需要传递属性的一个实体类</span>
    <span class="token function">registerInstance</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">,</span> groupName<span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerInstance</span><span class="token punctuation">(</span><span class="token class-name">String</span> serviceName<span class="token punctuation">,</span> <span class="token class-name">String</span> groupName<span class="token punctuation">,</span> <span class="token class-name">Instance</span> instance<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NacosException</span> <span class="token punctuation">{</span>
    <span class="token comment">// 检查合法性</span>
    <span class="token class-name">NamingUtils</span><span class="token punctuation">.</span><span class="token function">checkInstanceIsLegal</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 通过客户端代理去注册服务</span>
    clientProxy<span class="token punctuation">.</span><span class="token function">registerService</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">,</span> groupName<span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们准备去跟踪<code>clientProxy.registerService</code>，其提示如下图所示</p><p><img src="`+u+`" alt="interface.png"></p><p>那应用是跟踪哪个类？</p><p>这里，我提供两种方法。</p><ol><li>代码分析法，如果有多个实现类，肯定在前面的某个步骤会去创建该类，因为这个类不会无缘无故的就产生的。计算机的程序代码是很规范的，你要他怎么做，他才怎么做，不会无故产生，俗话说事出反常必有妖。</li><li>断点调试法，这个方法简单粗暴，只要你debug一下，跟着debug进去，到哪个类处理，那就是哪个类处理。</li></ol><p>我们还是倒回来看下，通过代码分析具体一下。还记得上面说的创建<code>NamingService</code>吗，这里我们进去看下这个<code>NamingService</code>的具体的实现方法<code>NacosNamingService</code>的构造方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">NacosNamingService</span><span class="token punctuation">(</span><span class="token class-name">Properties</span> properties<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NacosException</span> <span class="token punctuation">{</span>
    <span class="token function">init</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">Properties</span> properties<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NacosException</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">NacosClientProperties</span> nacosClientProperties <span class="token operator">=</span> <span class="token class-name">NacosClientProperties</span><span class="token punctuation">.</span><span class="token constant">PROTOTYPE</span><span class="token punctuation">.</span><span class="token function">derive</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">ValidatorUtils</span><span class="token punctuation">.</span><span class="token function">checkInitParam</span><span class="token punctuation">(</span>nacosClientProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>namespace <span class="token operator">=</span> <span class="token class-name">InitUtils</span><span class="token punctuation">.</span><span class="token function">initNamespaceForNaming</span><span class="token punctuation">(</span>nacosClientProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">InitUtils</span><span class="token punctuation">.</span><span class="token function">initSerialization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">InitUtils</span><span class="token punctuation">.</span><span class="token function">initWebRootContext</span><span class="token punctuation">(</span>nacosClientProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">initLogName</span><span class="token punctuation">(</span>nacosClientProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>notifierEventScope <span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>changeNotifier <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InstancesChangeNotifier</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>notifierEventScope<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">NotifyCenter</span><span class="token punctuation">.</span><span class="token function">registerToPublisher</span><span class="token punctuation">(</span><span class="token class-name">InstancesChangeEvent</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token number">16384</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">NotifyCenter</span><span class="token punctuation">.</span><span class="token function">registerSubscriber</span><span class="token punctuation">(</span>changeNotifier<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>serviceInfoHolder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServiceInfoHolder</span><span class="token punctuation">(</span>namespace<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>notifierEventScope<span class="token punctuation">,</span> nacosClientProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 创建代理类</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>clientProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NamingClientProxyDelegate</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>namespace<span class="token punctuation">,</span> serviceInfoHolder<span class="token punctuation">,</span> nacosClientProperties<span class="token punctuation">,</span> changeNotifier<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从构造方法，我们可以看到在<code>init</code>方法中创建了这个<code>clientProxy</code>，具体的实现类是<code>NamingClientProxyDelegate</code>。现在我们跟着这个实现类具体往下跟。</p><blockquote><p>从命名可以看到，这个是一个代理类，也就是设计模式中的代理模式，如果不清楚代理模式的，需要去补充一下代理模式的知识。看源码，在懂得设计模式的情况下，可以快速理解作者的意图。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerService</span><span class="token punctuation">(</span><span class="token class-name">String</span> serviceName<span class="token punctuation">,</span> <span class="token class-name">String</span> groupName<span class="token punctuation">,</span> <span class="token class-name">Instance</span> instance<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NacosException</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取代理类去注册</span>
    <span class="token function">getExecuteClientProxy</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">registerService</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">,</span> groupName<span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token class-name">NamingClientProxy</span> <span class="token function">getExecuteClientProxy</span><span class="token punctuation">(</span><span class="token class-name">Instance</span> instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 默认是ephemeral,为true,也就是返回grpcClientProxy,2.0改动中将http的请求换成了gRpc了</span>
    <span class="token keyword">return</span> instance<span class="token punctuation">.</span><span class="token function">isEphemeral</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> grpcClientProxy <span class="token operator">:</span> httpClientProxy<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>我们倒回来看下这个类的命名<code>NamingClientProxyDelegate</code>，NameClient代理委托类，为啥叫代理的委托类呢？</p><p>原来这个类并不是真正的代理类，真正的代理类是grpcClientProxy和httpClientProxy，这个类仅仅是做了一个委托功能，将处理的方法委托给了这两个代理类去处理。所以这个类叫代理委托类。</p></blockquote><p>知道了具体的代理类是<code>grpcClientProxy</code>后，我们看下<code>grpcClientProxy#registerService</code>具体实现</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerService</span><span class="token punctuation">(</span><span class="token class-name">String</span> serviceName<span class="token punctuation">,</span> <span class="token class-name">String</span> groupName<span class="token punctuation">,</span> <span class="token class-name">Instance</span> instance<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NacosException</span> <span class="token punctuation">{</span>
    <span class="token constant">NAMING_LOGGER</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[REGISTER-SERVICE] {} registering service {} with instance {}&quot;</span><span class="token punctuation">,</span> namespaceId<span class="token punctuation">,</span> serviceName<span class="token punctuation">,</span>
                       instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 这里做了一下缓存</span>
    redoService<span class="token punctuation">.</span><span class="token function">cacheInstanceForRedo</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">,</span> groupName<span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 继续注册</span>
    <span class="token function">doRegisterService</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">,</span> groupName<span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doRegisterService</span><span class="token punctuation">(</span><span class="token class-name">String</span> serviceName<span class="token punctuation">,</span> <span class="token class-name">String</span> groupName<span class="token punctuation">,</span> <span class="token class-name">Instance</span> instance<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NacosException</span> <span class="token punctuation">{</span>
    <span class="token comment">// 构造一个请求对象</span>
    <span class="token class-name">InstanceRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InstanceRequest</span><span class="token punctuation">(</span>namespaceId<span class="token punctuation">,</span> serviceName<span class="token punctuation">,</span> groupName<span class="token punctuation">,</span>
                                                  <span class="token class-name">NamingRemoteConstants</span><span class="token punctuation">.</span><span class="token constant">REGISTER_INSTANCE</span><span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 请求到服务端注册</span>
        <span class="token function">getSecurityHeaders</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getNamespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getGroupName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getServiceName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// rpcClient去进行Rpc请求，没有抛出异常说明调用成功</span>
        <span class="token class-name">Response</span> response <span class="token operator">=</span>
            requestTimeout <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> rpcClient<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span> <span class="token operator">:</span> rpcClient<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> requestTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ResponseCode</span><span class="token punctuation">.</span><span class="token constant">SUCCESS</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> response<span class="token punctuation">.</span><span class="token function">getResultCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NacosException</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getErrorCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>responseClass<span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> response<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token constant">NAMING_LOGGER</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Server return unexpected response &#39;{}&#39;, expected response should be &#39;{}&#39;&quot;</span><span class="token punctuation">,</span>
                            response<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> responseClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NacosException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> e<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NacosException</span><span class="token punctuation">(</span><span class="token class-name">NacosException</span><span class="token punctuation">.</span><span class="token constant">SERVER_ERROR</span><span class="token punctuation">,</span> <span class="token string">&quot;Request nacos server failed: &quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NacosException</span><span class="token punctuation">(</span><span class="token class-name">NacosException</span><span class="token punctuation">.</span><span class="token constant">SERVER_ERROR</span><span class="token punctuation">,</span> <span class="token string">&quot;Server return invalid response&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到此，整体的注册脉络就清晰了。先是创建了一个<code>NamingService</code>，根据<code>NamingService</code>调用<code>NamingClientProxyDelegate</code>中的代理<code>grpcClientProxy</code>,通过gRpc的方法进行远程调用服务端。调用成功后即注册成功了。下面我们继续深入<code>rpcClient#request</code>这个方法，看<code>Nacos</code>是怎么进行调用的。</p><h1 id="rpc调用" tabindex="-1"><a class="header-anchor" href="#rpc调用" aria-hidden="true">#</a> rpc调用</h1><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Response</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token class-name">Request</span> request<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NacosException</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取超时时间，如果没有配置，默认3s超时</span>
    <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> rpcClientConfig<span class="token punctuation">.</span><span class="token function">timeOutMills</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token class-name">Response</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token class-name">Request</span> request<span class="token punctuation">,</span> <span class="token keyword">long</span> timeoutMills<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NacosException</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> retryTimes <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">Response</span> response<span class="token punctuation">;</span>
    <span class="token class-name">Throwable</span> exceptionThrow <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>retryTimes <span class="token operator">&lt;</span> rpcClientConfig<span class="token punctuation">.</span><span class="token function">retryTimes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> timeoutMills <span class="token operator">+</span> start<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">boolean</span> waitReconnect <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentConnection <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">isRunning</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                waitReconnect <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NacosException</span><span class="token punctuation">(</span><span class="token class-name">NacosException</span><span class="token punctuation">.</span><span class="token constant">CLIENT_DISCONNECT</span><span class="token punctuation">,</span>
                                         <span class="token string">&quot;Client not connected, current status:&quot;</span> <span class="token operator">+</span> rpcClientStatus<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 拿到连接去请求</span>
            response <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>currentConnection<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> timeoutMills<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>response <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NacosException</span><span class="token punctuation">(</span><span class="token constant">SERVER_ERROR</span><span class="token punctuation">,</span> <span class="token string">&quot;Unknown Exception.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>response <span class="token keyword">instanceof</span> <span class="token class-name">ErrorResponse</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getErrorCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">NacosException</span><span class="token punctuation">.</span><span class="token constant">UN_REGISTER</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        waitReconnect <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>rpcClientStatus<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token class-name">RpcClientStatus</span><span class="token punctuation">.</span><span class="token constant">RUNNING</span><span class="token punctuation">,</span> <span class="token class-name">RpcClientStatus</span><span class="token punctuation">.</span><span class="token constant">UNHEALTHY</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token class-name">LoggerUtils</span><span class="token punctuation">.</span><span class="token function">printIfErrorEnabled</span><span class="token punctuation">(</span><span class="token constant">LOGGER</span><span class="token punctuation">,</span>
                                                            <span class="token string">&quot;Connection is unregistered, switch server, connectionId = {}, request = {}&quot;</span><span class="token punctuation">,</span>
                                                            currentConnection<span class="token punctuation">.</span><span class="token function">getConnectionId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token function">switchServerAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>

                <span class="token punctuation">}</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NacosException</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getErrorCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// return response.</span>
            lastActiveTimeStamp <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> response<span class="token punctuation">;</span>

        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>waitReconnect<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token comment">// wait client to reconnect.</span>
                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> timeoutMills <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// Do nothing.</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

            <span class="token class-name">LoggerUtils</span><span class="token punctuation">.</span><span class="token function">printIfErrorEnabled</span><span class="token punctuation">(</span><span class="token constant">LOGGER</span><span class="token punctuation">,</span>
                                            <span class="token string">&quot;Send request fail, request = {}, retryTimes = {}, errorMessage = {}&quot;</span><span class="token punctuation">,</span> request<span class="token punctuation">,</span> retryTimes<span class="token punctuation">,</span>
                                            e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            exceptionThrow <span class="token operator">=</span> e<span class="token punctuation">;</span>

        <span class="token punctuation">}</span>
        retryTimes<span class="token operator">++</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>rpcClientStatus<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token class-name">RpcClientStatus</span><span class="token punctuation">.</span><span class="token constant">RUNNING</span><span class="token punctuation">,</span> <span class="token class-name">RpcClientStatus</span><span class="token punctuation">.</span><span class="token constant">UNHEALTHY</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">switchServerAsyncOnRequestFail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>exceptionThrow <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token punctuation">(</span>exceptionThrow <span class="token keyword">instanceof</span> <span class="token class-name">NacosException</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token class-name">NacosException</span><span class="token punctuation">)</span> exceptionThrow
            <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">NacosException</span><span class="token punctuation">(</span><span class="token constant">SERVER_ERROR</span><span class="token punctuation">,</span> exceptionThrow<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NacosException</span><span class="token punctuation">(</span><span class="token constant">SERVER_ERROR</span><span class="token punctuation">,</span> <span class="token string">&quot;Request fail, unknown Error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里有两个点需要分析，一个是<code>currentConnection</code>是怎么来的，另一个是<code>currentConnection</code>是怎么请求的。我们首先看下这个<code>currentConnection</code>是怎么来的。</p><h2 id="currentconnection的创建过程" tabindex="-1"><a class="header-anchor" href="#currentconnection的创建过程" aria-hidden="true">#</a> <code>currentConnection</code>的创建过程</h2><p>通过代码搜索，我们发现在<code>com.alibaba.nacos.common.remote.client.RpcClient#start</code>中有一段代码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Connection</span> connectToServer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
rpcClientStatus<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">RpcClientStatus</span><span class="token punctuation">.</span><span class="token constant">STARTING</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> startUpRetryTimes <span class="token operator">=</span> rpcClientConfig<span class="token punctuation">.</span><span class="token function">retryTimes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>startUpRetryTimes <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> connectToServer <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        startUpRetryTimes<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token class-name">ServerInfo</span> serverInfo <span class="token operator">=</span> <span class="token function">nextRpcServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">LoggerUtils</span><span class="token punctuation">.</span><span class="token function">printIfInfoEnabled</span><span class="token punctuation">(</span><span class="token constant">LOGGER</span><span class="token punctuation">,</span> <span class="token string">&quot;[{}] Try to connect to server on start up, server: {}&quot;</span><span class="token punctuation">,</span>
                                       rpcClientConfig<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> serverInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 拿到连接</span>
        connectToServer <span class="token operator">=</span> <span class="token function">connectToServer</span><span class="token punctuation">(</span>serverInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">LoggerUtils</span><span class="token punctuation">.</span><span class="token function">printIfWarnEnabled</span><span class="token punctuation">(</span><span class="token constant">LOGGER</span><span class="token punctuation">,</span>
                                       <span class="token string">&quot;[{}] Fail to connect to server on start up, error message = {}, start up retry times left: {}&quot;</span><span class="token punctuation">,</span>
                                       rpcClientConfig<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> startUpRetryTimes<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
<span class="token comment">//如果连接不为空</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>connectToServer <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">LoggerUtils</span>
        <span class="token punctuation">.</span><span class="token function">printIfInfoEnabled</span><span class="token punctuation">(</span><span class="token constant">LOGGER</span><span class="token punctuation">,</span> <span class="token string">&quot;[{}] Success to connect to server [{}] on start up, connectionId = {}&quot;</span><span class="token punctuation">,</span>
                            rpcClientConfig<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> connectToServer<span class="token punctuation">.</span>serverInfo<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                            connectToServer<span class="token punctuation">.</span><span class="token function">getConnectionId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 对currentConnection赋值</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>currentConnection <span class="token operator">=</span> connectToServer<span class="token punctuation">;</span>
    rpcClientStatus<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">RpcClientStatus</span><span class="token punctuation">.</span><span class="token constant">RUNNING</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    eventLinkedBlockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConnectionEvent</span><span class="token punctuation">(</span><span class="token class-name">ConnectionEvent</span><span class="token punctuation">.</span><span class="token constant">CONNECTED</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">switchServerAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果想再跟踪一下start方法在哪里调用，可以往上继续查找，可以发现其在构造函数中就调用了这个start()</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>java复制代码<span class="token keyword">public</span> <span class="token class-name">NamingGrpcClientProxy</span><span class="token punctuation">(</span><span class="token class-name">String</span> namespaceId<span class="token punctuation">,</span> <span class="token class-name">SecurityProxy</span> securityProxy<span class="token punctuation">,</span> <span class="token class-name">ServerListFactory</span> serverListFactory<span class="token punctuation">,</span>
                             <span class="token class-name">NacosClientProperties</span> properties<span class="token punctuation">,</span> <span class="token class-name">ServiceInfoHolder</span> serviceInfoHolder<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NacosException</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>securityProxy<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>namespaceId <span class="token operator">=</span> namespaceId<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>uuid <span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>requestTimeout <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token class-name">CommonParams</span><span class="token punctuation">.</span><span class="token constant">NAMING_REQUEST_TIMEOUT</span><span class="token punctuation">,</span> <span class="token string">&quot;-1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> labels <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    labels<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">RemoteConstants</span><span class="token punctuation">.</span><span class="token constant">LABEL_SOURCE</span><span class="token punctuation">,</span> <span class="token class-name">RemoteConstants</span><span class="token punctuation">.</span><span class="token constant">LABEL_SOURCE_SDK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    labels<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">RemoteConstants</span><span class="token punctuation">.</span><span class="token constant">LABEL_MODULE</span><span class="token punctuation">,</span> <span class="token class-name">RemoteConstants</span><span class="token punctuation">.</span><span class="token constant">LABEL_MODULE_NAMING</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>rpcClient <span class="token operator">=</span> <span class="token class-name">RpcClientFactory</span><span class="token punctuation">.</span><span class="token function">createClient</span><span class="token punctuation">(</span>uuid<span class="token punctuation">,</span> <span class="token class-name">ConnectionType</span><span class="token punctuation">.</span><span class="token constant">GRPC</span><span class="token punctuation">,</span> labels<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>redoService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NamingGrpcRedoService</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//在这里调用</span>
    <span class="token function">start</span><span class="token punctuation">(</span>serverListFactory<span class="token punctuation">,</span> serviceInfoHolder<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token class-name">ServerListFactory</span> serverListFactory<span class="token punctuation">,</span> <span class="token class-name">ServiceInfoHolder</span> serviceInfoHolder<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NacosException</span> <span class="token punctuation">{</span>
    rpcClient<span class="token punctuation">.</span><span class="token function">serverListFactory</span><span class="token punctuation">(</span>serverListFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
    rpcClient<span class="token punctuation">.</span><span class="token function">registerConnectionListener</span><span class="token punctuation">(</span>redoService<span class="token punctuation">)</span><span class="token punctuation">;</span>
    rpcClient<span class="token punctuation">.</span><span class="token function">registerServerRequestHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NamingPushRequestHandler</span><span class="token punctuation">(</span>serviceInfoHolder<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//在这里调用</span>
    rpcClient<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">NotifyCenter</span><span class="token punctuation">.</span><span class="token function">registerSubscriber</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们回到<code>connectToServer(serverInfo)</code>方法，看下是如何拿到连接的。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 抽象方法，由子类实现</span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">Connection</span> <span class="token function">connectToServer</span><span class="token punctuation">(</span><span class="token class-name">ServerInfo</span> serverInfo<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span>


<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">Connection</span> <span class="token function">connectToServer</span><span class="token punctuation">(</span><span class="token class-name">ServerInfo</span> serverInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>grpcExecutor <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 创建线程池</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>grpcExecutor <span class="token operator">=</span> <span class="token function">createGrpcExecutor</span><span class="token punctuation">(</span>serverInfo<span class="token punctuation">.</span><span class="token function">getServerIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> port <span class="token operator">=</span> serverInfo<span class="token punctuation">.</span><span class="token function">getServerPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">rpcPortOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 根据ip和端口创建Grpc的ManagedChannel</span>
        <span class="token class-name">ManagedChannel</span> managedChannel <span class="token operator">=</span> <span class="token function">createNewManagedChannel</span><span class="token punctuation">(</span>serverInfo<span class="token punctuation">.</span><span class="token function">getServerIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 创建Grpc请求客户端</span>
        <span class="token class-name">RequestGrpc<span class="token punctuation">.</span>RequestFutureStub</span> newChannelStubTemp <span class="token operator">=</span> <span class="token function">createNewChannelStub</span><span class="token punctuation">(</span>managedChannel<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>newChannelStubTemp <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

            <span class="token class-name">Response</span> response <span class="token operator">=</span> <span class="token function">serverCheck</span><span class="token punctuation">(</span>serverInfo<span class="token punctuation">.</span><span class="token function">getServerIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> port<span class="token punctuation">,</span> newChannelStubTemp<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>response <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token punctuation">(</span>response <span class="token keyword">instanceof</span> <span class="token class-name">ServerCheckResponse</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">shuntDownChannel</span><span class="token punctuation">(</span>managedChannel<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token class-name">BiRequestStreamGrpc<span class="token punctuation">.</span>BiRequestStreamStub</span> biRequestStreamStub <span class="token operator">=</span> <span class="token class-name">BiRequestStreamGrpc</span>
                <span class="token punctuation">.</span><span class="token function">newStub</span><span class="token punctuation">(</span>newChannelStubTemp<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 包装了一个连接池，用于异步请求的回调处理</span>
            <span class="token class-name">GrpcConnection</span> grpcConn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GrpcConnection</span><span class="token punctuation">(</span>serverInfo<span class="token punctuation">,</span> grpcExecutor<span class="token punctuation">)</span><span class="token punctuation">;</span>
            grpcConn<span class="token punctuation">.</span><span class="token function">setConnectionId</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ServerCheckResponse</span><span class="token punctuation">)</span> response<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConnectionId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">//create stream request and bind connection event to this connection.</span>
            <span class="token class-name">StreamObserver</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Payload</span><span class="token punctuation">&gt;</span></span> payloadStreamObserver <span class="token operator">=</span> <span class="token function">bindRequestStream</span><span class="token punctuation">(</span>biRequestStreamStub<span class="token punctuation">,</span> grpcConn<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// stream observer to send response to server</span>
            grpcConn<span class="token punctuation">.</span><span class="token function">setPayloadStreamObserver</span><span class="token punctuation">(</span>payloadStreamObserver<span class="token punctuation">)</span><span class="token punctuation">;</span>
            grpcConn<span class="token punctuation">.</span><span class="token function">setGrpcFutureServiceStub</span><span class="token punctuation">(</span>newChannelStubTemp<span class="token punctuation">)</span><span class="token punctuation">;</span>
            grpcConn<span class="token punctuation">.</span><span class="token function">setChannel</span><span class="token punctuation">(</span>managedChannel<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//send a  setup request.</span>
            <span class="token class-name">ConnectionSetupRequest</span> conSetupRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionSetupRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            conSetupRequest<span class="token punctuation">.</span><span class="token function">setClientVersion</span><span class="token punctuation">(</span><span class="token class-name">VersionUtils</span><span class="token punctuation">.</span><span class="token function">getFullClientVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            conSetupRequest<span class="token punctuation">.</span><span class="token function">setLabels</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getLabels</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            conSetupRequest<span class="token punctuation">.</span><span class="token function">setAbilities</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span>clientAbilities<span class="token punctuation">)</span><span class="token punctuation">;</span>
            conSetupRequest<span class="token punctuation">.</span><span class="token function">setTenant</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getTenant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            grpcConn<span class="token punctuation">.</span><span class="token function">sendRequest</span><span class="token punctuation">(</span>conSetupRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//wait to register connection setup</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 返回连接，包装了chenel, client request</span>
            <span class="token keyword">return</span> grpcConn<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;[{}]Fail to connect to server!,error={}&quot;</span><span class="token punctuation">,</span> <span class="token class-name">GrpcClient</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="rpc的请求" tabindex="-1"><a class="header-anchor" href="#rpc的请求" aria-hidden="true">#</a> rpc的请求</h2><p>rpc的请求就比较简单了，拿到grpc的连接和请求Stub，直接请求就行了</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">Response</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token class-name">Request</span> request<span class="token punctuation">,</span> <span class="token keyword">long</span> timeouts<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NacosException</span> <span class="token punctuation">{</span>
    <span class="token comment">// 转换请求对象</span>
    <span class="token class-name">Payload</span> grpcRequest <span class="token operator">=</span> <span class="token class-name">GrpcUtils</span><span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// gprc请求</span>
    <span class="token class-name">ListenableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Payload</span><span class="token punctuation">&gt;</span></span> requestFuture <span class="token operator">=</span> grpcFutureServiceStub<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>grpcRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Payload</span> grpcResponse<span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">// 获取返回结果</span>
        grpcResponse <span class="token operator">=</span> requestFuture<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>timeouts<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NacosException</span><span class="token punctuation">(</span><span class="token class-name">NacosException</span><span class="token punctuation">.</span><span class="token constant">SERVER_ERROR</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Response</span><span class="token punctuation">)</span> <span class="token class-name">GrpcUtils</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>grpcResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h1><p>本篇文章只写了client是如何请求服务端的，整体还是比较清晰易懂的。一般我们使用会依赖Nacos客户端，由客户端去访问服务端。而<code>Spring Cloud</code>会定义顶层接口，决定何时去调用服务端。关键在于服务端如何处理客户端的请求，这也是<code>Nacos</code>的核心所在。感兴趣的小伙伴可以点击下面的链接，开启服务注册服务端的源码分析之旅。</p>`,40);function g(w,f){const a=p("ExternalLinkIcon");return e(),c("div",null,[r,d,s("p",null,[n("其实很早之前看过一些"),v,n("的源码，后续了解到最新的Nacos已经升级到2.X。也知道2.X对比1.X升级很大，[支持 gRPC 长链接，深度解读 Nacos 2.0 架构设计及新模型]:("),s("a",m,[n("cloud.tencent.com/developer/a…"),o(a)]),n(")")]),b])}const S=t(k,[["render",g],["__file","nacos-naming-source-service-register.html.vue"]]);export{S as default};
