import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as p,c as d,a as o,b as e,d as s,e as n}from"./app-e53dd85b.js";const i="/assets/2-992b3b38.jpg",a="/assets/3-29055f7a.jpg",g="/assets/4-1380e8b7.jpg",l="/assets/5-62fe932c.jpg",_="/assets/6-1124654e.jpg",h="/assets/7-598bdc4c.jpg",E="/assets/8-cc51fca3.jpg",P="/assets/9-f209acbe.jpg",I="/assets/10-e5825ddb.jpg",u="/assets/11-36d24746.jpg",M="/assets/12-050f56bf.jpg",C="/assets/13-777b52d8.jpg",m="/assets/14-70f90218.jpg",B="/assets/15-1e309d32.jpg",A="/assets/16-7bc3cc7d.jpg",b="/assets/17-6a85eb04.png",k="/assets/18-eadf3759.jpg",f={},T=n('<h1 id="ping-的工作原理" tabindex="-1"><a class="header-anchor" href="#ping-的工作原理" aria-hidden="true">#</a> ping 的工作原理</h1><p>在日常生活或工作中，我们在判断与对方<strong>网络是否畅通</strong>，使用的最多的莫过于 <code>ping</code> 命令了。</p><p>“<strong>那你知道 <code>ping</code> 是如何工作的吗？</strong>” —— 来自小林的灵魂拷问</p><p>可能有的小伙伴奇怪的问：“我虽然不明白它的工作，但 ping 我也用的贼 6 啊！”</p><p>你用的是 6 ，但你在面试官面前，你就 6 不起来了，毕竟他们也爱问。</p><p>所以，我们要抱有「<strong>知其然，知其所以然</strong>」的态度，这样就能避免面试过程中，出门右拐的情况了。</p><p><img src="'+i+'" alt="来自面试官的灵魂拷问"></p><p>不知道的小伙伴也没关系，今天我们就来搞定它，搞懂它。消除本次的问号，<strong>让问号少一点</strong>。</p><p><img src="'+a+'" alt="img"></p><hr>',10),x={id:"ip协议的助手-——-icmp-协议",tabindex:"-1"},D=o("a",{class:"header-anchor",href:"#ip协议的助手-——-icmp-协议","aria-hidden":"true"},"#",-1),q={href:"https://xiaolincoding.com/network/4_ip/ping.html#ip%E5%8D%8F%E8%AE%AE%E7%9A%84%E5%8A%A9%E6%89%8B-icmp-%E5%8D%8F%E8%AE%AE",target:"_blank",rel:"noopener noreferrer"},U=n('<p>ping 是基于 <code>ICMP</code> 协议工作的，所以要明白 ping 的工作，首先我们先来熟悉 <strong>ICMP 协议</strong>。</p><blockquote><p>ICMP 是什么？</p></blockquote><p>ICMP 全称是 <strong>Internet Control Message Protocol</strong>，也就是<strong>互联网控制报文协议</strong>。</p><p>里面有个关键词 —— <strong>控制</strong>，如何控制的呢？</p><p>网络包在复杂的网络传输环境里，常常会遇到各种问题。当遇到问题的时候，总不能死的不明不白，没头没脑的作风不是计算机网络的风格。所以需要传出消息，报告遇到了什么问题，这样才可以调整传输策略，以此来控制整个局面。</p><blockquote><p>ICMP 功能都有啥？</p></blockquote><p><code>ICMP</code> 主要的功能包括：<strong>确认 IP 包是否成功送达目标地址、报告发送过程中 IP 包被废弃的原因和改善网络设置等。</strong></p><p>在 <code>IP</code> 通信中如果某个 <code>IP</code> 包因为某种原因未能达到目标地址，那么这个具体的原因将<strong>由 ICMP 负责通知</strong>。</p><p><img src="'+g+'" alt="ICMP 目标不可达消息"></p><p>如上图例子，主机 <code>A</code> 向主机 <code>B</code> 发送了数据包，由于某种原因，途中的路由器 <code>2</code> 未能发现主机 <code>B</code> 的存在，这时，路由器 <code>2</code> 就会向主机 <code>A</code> 发送一个 <code>ICMP</code> 目标不可达数据包，说明发往主机 <code>B</code> 的包未能成功。</p><p>ICMP 的这种通知消息会使用 <code>IP</code> 进行发送 。</p><p>因此，从路由器 <code>2</code> 返回的 ICMP 包会按照往常的路由控制先经过路由器 <code>1</code> 再转发给主机 <code>A</code> 。收到该 ICMP 包的主机 <code>A</code> 则分解 ICMP 的首部和数据域以后得知具体发生问题的原因。</p><blockquote><p>ICMP 包头格式</p></blockquote><p>ICMP 报文是封装在 IP 包里面，它工作在网络层，是 IP 协议的助手。</p><p><img src="'+l+'" alt="ICMP 报文"></p><p>ICMP 包头的<strong>类型</strong>字段，大致可以分为两大类：</p><ul><li>一类是用于诊断的查询消息，也就是「<strong>查询报文类型</strong>」</li><li>另一类是通知出错原因的错误消息，也就是「<strong>差错报文类型</strong>」</li></ul><p><img src="'+_+'" alt="常见的 ICMP 类型"></p>',18),F={id:"查询报文类型",tabindex:"-1"},j=o("a",{class:"header-anchor",href:"#查询报文类型","aria-hidden":"true"},"#",-1),w={href:"https://xiaolincoding.com/network/4_ip/ping.html#%E6%9F%A5%E8%AF%A2%E6%8A%A5%E6%96%87%E7%B1%BB%E5%9E%8B",target:"_blank",rel:"noopener noreferrer"},v=n('<blockquote><p>回送消息 —— 类型 <code>0</code> 和 <code>8</code></p></blockquote><p><strong>回送消息</strong>用于进行通信的主机或路由器之间，判断所发送的数据包是否已经成功到达对端的一种消息，<code>ping</code> 命令就是利用这个消息实现的。</p><p><img src="'+h+'" alt="ICMP 回送消息"></p><p>可以向对端主机发送<strong>回送请求</strong>的消息（<code>ICMP Echo Request Message</code>，类型 <code>8</code>），也可以接收对端主机发回来的<strong>回送应答</strong>消息（<code>ICMP Echo Reply Message</code>，类型 <code>0</code>）。</p><p><img src="'+E+'" alt="ICMP 回送请求和回送应答报文"></p><p>相比原生的 ICMP，这里多了两个字段：</p><ul><li><strong>标识符</strong>：用以区分是哪个应用程序发 ICMP 包，比如用进程 <code>PID</code> 作为标识符；</li><li><strong>序号</strong>：序列号从 <code>0</code> 开始，每发送一次新的回送请求就会加 <code>1</code>， 可以用来确认网络包是否有丢失。</li></ul><p>在<strong>选项数据</strong>中，<code>ping</code> 还会存放发送请求的时间值，来计算往返时间，说明路程的长短。</p>',8),L={id:"差错报文类型",tabindex:"-1"},R=o("a",{class:"header-anchor",href:"#差错报文类型","aria-hidden":"true"},"#",-1),N={href:"https://xiaolincoding.com/network/4_ip/ping.html#%E5%B7%AE%E9%94%99%E6%8A%A5%E6%96%87%E7%B1%BB%E5%9E%8B",target:"_blank",rel:"noopener noreferrer"},S=n('<p>接下来，说明几个常用的 ICMP 差错报文的例子：</p><ul><li>目标不可达消息 —— 类型 为 <code>3</code></li><li>原点抑制消息 —— 类型 <code>4</code></li><li>重定向消息 —— 类型 <code>5</code></li><li>超时消息 —— 类型 <code>11</code></li></ul><blockquote><p>目标不可达消息（Destination Unreachable Message） —— 类型为 <code>3</code></p></blockquote><p>IP 路由器无法将 IP 数据包发送给目标地址时，会给发送端主机返回一个<strong>目标不可达</strong>的 ICMP 消息，并在这个消息中显示不可达的具体原因，原因记录在 ICMP 包头的<strong>代码</strong>字段。</p><p>由此，根据 ICMP 不可达的具体消息，发送端主机也就可以了解此次发送<strong>不可达的具体原因</strong>。</p><p>举例 6 种常见的目标不可达类型的<strong>代码</strong>：</p><p><img src="'+P+'" alt="目标不可达类型的常见代码号"></p><ul><li>网络不可达代码为 <code>0</code></li><li>主机不可达代码为 <code>1</code></li><li>协议不可达代码为 <code>2</code></li><li>端口不可达代码为 <code>3</code></li><li>需要进行分片但设置了不分片位代码为 <code>4</code></li></ul><p>为了给大家说清楚上面的目标不可达的原因，<strong>小林牺牲自己给大家送 5 次外卖。</strong></p><p>为什么要送外卖？别问，问就是为 <code>35</code> 岁的老林做准备 ...</p><p><img src="'+I+'" alt="外卖员 —— 小林"></p>',11),V={id:"a-网络不可达代码为-0",tabindex:"-1"},H=o("a",{class:"header-anchor",href:"#a-网络不可达代码为-0","aria-hidden":"true"},"#",-1),O={href:"https://xiaolincoding.com/network/4_ip/ping.html#a-%E7%BD%91%E7%BB%9C%E4%B8%8D%E5%8F%AF%E8%BE%BE%E4%BB%A3%E7%A0%81%E4%B8%BA-0",target:"_blank",rel:"noopener noreferrer"},Q=o("p",null,[o("em",null,"外卖版本：")],-1),W=o("p",null,"小林第一次送外卖时，小区里只有 A 和 B 区两栋楼，但送餐地址写的是 C 区楼，小林表示头上很多问号，压根就没这个地方。",-1),y=o("p",null,[o("em",null,"正常版本：")],-1),X=o("p",null,[e("IP 地址是分为网络号和主机号的，所以当路由器中的路由器表匹配不到接收方 IP 的网络号，就通过 ICMP 协议以"),o("strong",null,"网络不可达"),e("（"),o("code",null,"Network Unreachable"),e("）的原因告知主机。")],-1),Y=o("p",null,"自从不再有网络分类以后，网络不可达也渐渐不再使用了。",-1),z={id:"b-主机不可达代码为-1",tabindex:"-1"},G=o("a",{class:"header-anchor",href:"#b-主机不可达代码为-1","aria-hidden":"true"},"#",-1),J={href:"https://xiaolincoding.com/network/4_ip/ping.html#b-%E4%B8%BB%E6%9C%BA%E4%B8%8D%E5%8F%AF%E8%BE%BE%E4%BB%A3%E7%A0%81%E4%B8%BA-1",target:"_blank",rel:"noopener noreferrer"},K=o("p",null,[o("em",null,"外卖版本：")],-1),Z=o("p",null,"小林第二次送外卖时，这次小区有 5 层楼高的 C 区楼了，找到地方了，但送餐地址写的是 C 区楼 601 号房 ，说明找不到这个房间。",-1),$=o("p",null,[o("em",null,"正常版本：")],-1),oo=o("p",null,[e("当路由表中没有该主机的信息，或者该主机没有连接到网络，那么会通过 ICMP 协议以"),o("strong",null,"主机不可达"),e("（"),o("code",null,"Host Unreachable"),e("）的原因告知主机。")],-1),eo={id:"c-协议不可达代码为-2",tabindex:"-1"},to=o("a",{class:"header-anchor",href:"#c-协议不可达代码为-2","aria-hidden":"true"},"#",-1),so={href:"https://xiaolincoding.com/network/4_ip/ping.html#c-%E5%8D%8F%E8%AE%AE%E4%B8%8D%E5%8F%AF%E8%BE%BE%E4%BB%A3%E7%A0%81%E4%B8%BA-2",target:"_blank",rel:"noopener noreferrer"},no=o("p",null,[o("em",null,"外卖版本：")],-1),co=o("p",null,"小林第三次送外卖时，这次小区有 C 区楼，也有 601 号房，找到地方了，也找到房间了，但是一开门人家是外国人说的是英语，我说的是中文！语言不通，外卖送达失败~",-1),ro=o("p",null,[o("em",null,"正常版本：")],-1),po=o("p",null,[e("当主机使用 TCP 协议访问对端主机时，能找到对端的主机了，可是对端主机的防火墙已经禁止 TCP 协议访问，那么会通过 ICMP 协议以"),o("strong",null,"协议不可达"),e("的原因告知主机。")],-1),io={id:"d-端口不可达代码为-3",tabindex:"-1"},ao=o("a",{class:"header-anchor",href:"#d-端口不可达代码为-3","aria-hidden":"true"},"#",-1),go={href:"https://xiaolincoding.com/network/4_ip/ping.html#d-%E7%AB%AF%E5%8F%A3%E4%B8%8D%E5%8F%AF%E8%BE%BE%E4%BB%A3%E7%A0%81%E4%B8%BA-3",target:"_blank",rel:"noopener noreferrer"},lo=o("p",null,[o("em",null,"外卖版本：")],-1),_o=o("p",null,"小林第四次送外卖时，这次小区有 C 区楼，也有 601 号房，找到地方了，也找到房间了，房间里的人也是说中文的人了，但是人家说他要的不是外卖，而是快递。。。",-1),ho=o("p",null,[o("em",null,"正常版本：")],-1),Eo=o("p",null,[e("当主机访问对端主机 8080 端口时，这次能找到对端主机了，防火墙也没有限制，可是发现对端主机没有进程监听 8080 端口，那么会通过 ICMP 协议以"),o("strong",null,"端口不可达"),e("的原因告知主机。")],-1),Po={id:"e-需要进行分片但设置了不分片位代码为-4",tabindex:"-1"},Io=o("a",{class:"header-anchor",href:"#e-需要进行分片但设置了不分片位代码为-4","aria-hidden":"true"},"#",-1),uo={href:"https://xiaolincoding.com/network/4_ip/ping.html#e-%E9%9C%80%E8%A6%81%E8%BF%9B%E8%A1%8C%E5%88%86%E7%89%87%E4%BD%86%E8%AE%BE%E7%BD%AE%E4%BA%86%E4%B8%8D%E5%88%86%E7%89%87%E4%BD%8D%E4%BB%A3%E7%A0%81%E4%B8%BA-4",target:"_blank",rel:"noopener noreferrer"},Mo=n('<p><em>外卖版本：</em></p><p>小林第五次送外卖时，这次是个吃播博主点了 100 份外卖，但是吃播博主要求一次性要把全部外卖送达，小林的一台电动车装不下呀，这样就没办法送达了。</p><p><em>正常版本：</em></p><p>发送端主机发送 IP 数据报时，将 IP 首部的<strong>分片禁止标志位</strong>设置为<code>1</code>。根据这个标志位，途中的路由器遇到超过 MTU 大小的数据包时，不会进行分片，而是直接抛弃。</p><p>随后，通过一个 ICMP 的不可达消息类型，<strong>代码为 4</strong> 的报文，告知发送端主机。</p><blockquote><p>原点抑制消息（ICMP Source Quench Message） —— 类型 <code>4</code></p></blockquote><p>在使用低速广域线路的情况下，连接 WAN 的路由器可能会遇到网络拥堵的问题。</p><p><code>ICMP</code> 原点抑制消息的目的就是<strong>为了缓和这种拥堵情况</strong>。</p><p>当路由器向低速线路发送数据时，其发送队列的缓存变为零而无法发送出去时，可以向 IP 包的源地址发送一个 ICMP <strong>原点抑制消息</strong>。</p><p>收到这个消息的主机借此了解在整个线路的某一处发生了拥堵的情况，从而增大 IP 包的传输间隔，减少网络拥堵的情况。</p><p>然而，由于这种 ICMP 可能会引起不公平的网络通信，一般不被使用。</p><blockquote><p>重定向消息（ICMP Redirect Message） —— 类型 <code>5</code></p></blockquote><p>如果路由器发现发送端主机使用了「不是最优」的路径发送数据，那么它会返回一个 ICMP <strong>重定向消息</strong>给这个主机。</p><p>在这个消息中包含了<strong>最合适的路由信息和源数据</strong>。这主要发生在路由器持有更好的路由信息的情况下。路由器会通过这样的 ICMP 消息告知发送端，让它下次发给另外一个路由器。</p><p>好比，小林本可以过条马路就能到的地方，但小林不知道，所以绕了一圈才到，后面小林知道后，下次小林就不会那么<strong>傻</strong>再绕一圈了。</p><blockquote><p>超时消息（ICMP Time Exceeded Message） —— 类型 <code>11</code></p></blockquote><p>IP 包中有一个字段叫做 <code>TTL</code> （<code>Time To Live</code>，生存周期），它的<strong>值随着每经过一次路由器就会减 1，直到减到 0 时该 IP 包会被丢弃。</strong></p><p>此时，路由器将会发送一个 ICMP <strong>超时消息</strong>给发送端主机，并通知该包已被丢弃。</p><p>设置 IP 包生存周期的主要目的，是为了在路由控制遇到问题发生循环状况时，避免 IP 包无休止地在网络上被转发。</p><p><img src="'+u+'" alt="ICMP 时间超过消息"></p><p>此外，有时可以用 TTL 控制包的到达范围，例如设置一个<strong>较小的 TTL 值</strong>。</p><hr>',22),Co={id:"ping-——-查询报文类型的使用",tabindex:"-1"},mo=o("a",{class:"header-anchor",href:"#ping-——-查询报文类型的使用","aria-hidden":"true"},"#",-1),Bo={href:"https://xiaolincoding.com/network/4_ip/ping.html#ping-%E6%9F%A5%E8%AF%A2%E6%8A%A5%E6%96%87%E7%B1%BB%E5%9E%8B%E7%9A%84%E4%BD%BF%E7%94%A8",target:"_blank",rel:"noopener noreferrer"},Ao=n('<p>接下来，我们重点来看 <code>ping</code> 的<strong>发送和接收过程</strong>。</p><p>同个子网下的主机 A 和 主机 B，主机 A 执行<code>ping</code> 主机 B 后，我们来看看其间发送了什么？</p><p><img src="'+M+'" alt="主机 A ping 主机 B"></p><p>ping 命令执行的时候，源主机首先会构建一个 <strong>ICMP 回送请求消息</strong>数据包。</p><p>ICMP 数据包内包含多个字段，最重要的是两个：</p><ul><li>第一个是<strong>类型</strong>，对于回送请求消息而言该字段为 <code>8</code>；</li><li>另外一个是<strong>序号</strong>，主要用于区分连续 ping 的时候发出的多个数据包。</li></ul><p>每发出一个请求数据包，序号会自动加 <code>1</code>。为了能够计算往返时间 <code>RTT</code>，它会在报文的数据部分插入发送时间。</p><p><img src="'+C+'" alt="主机 A 的 ICMP 回送请求报文"></p><p>然后，由 ICMP 协议将这个数据包连同地址 192.168.1.2 一起交给 IP 层。IP 层将以 192.168.1.2 作为<strong>目的地址</strong>，本机 IP 地址作为<strong>源地址</strong>，<strong>协议</strong>字段设置为 <code>1</code> 表示是 <code>ICMP</code> 协议，再加上一些其他控制信息，构建一个 <code>IP</code> 数据包。</p><p><img src="'+m+'" alt="主机 A 的 IP 层数据包"></p><p>接下来，需要加入 <code>MAC</code> 头。如果在本地 ARP 映射表中查找出 IP 地址 192.168.1.2 所对应的 MAC 地址，则可以直接使用；如果没有，则需要发送 <code>ARP</code> 协议查询 MAC 地址，获得 MAC 地址后，由数据链路层构建一个数据帧，目的地址是 IP 层传过来的 MAC 地址，源地址则是本机的 MAC 地址；还要附加上一些控制信息，依据以太网的介质访问规则，将它们传送出去。</p><p><img src="'+B+'" alt="主机 A 的 MAC 层数据包"></p><p>主机 <code>B</code> 收到这个数据帧后，先检查它的目的 MAC 地址，并和本机的 MAC 地址对比，如符合，则接收，否则就丢弃。</p><p>接收后检查该数据帧，将 IP 数据包从帧中提取出来，交给本机的 IP 层。同样，IP 层检查后，将有用的信息提取后交给 ICMP 协议。</p><p>主机 <code>B</code> 会构建一个 <strong>ICMP 回送响应消息</strong>数据包，回送响应数据包的<strong>类型</strong>字段为 <code>0</code>，<strong>序号</strong>为接收到的请求数据包中的序号，然后再发送出去给主机 A。</p><p><img src="'+A+'" alt="主机 B 的 ICMP 回送响应报文"></p><p>在规定的时候间内，源主机如果没有接到 ICMP 的应答包，则说明目标主机不可达；如果接收到了 ICMP 回送响应消息，则说明目标主机可达。</p><p>此时，源主机会检查，用当前时刻减去该数据包最初从源主机上发出的时刻，就是 ICMP 数据包的时间延迟。</p><p>针对上面发送的事情，总结成了如下图：</p><p><img src="'+b+'" alt="主机 A ping 主机 B 期间发送的事情"></p><p>当然这只是最简单的，同一个局域网里面的情况。如果跨网段的话，还会涉及网关的转发、路由器的转发等等。</p><p>但是对于 ICMP 的头来讲，是没什么影响的。会影响的是根据目标 IP 地址，选择路由的下一跳，还有每经过一个路由器到达一个新的局域网，需要换 MAC 头里面的 MAC 地址。</p><p>说了这么多，可以看出 ping 这个程序是<strong>使用了 ICMP 里面的 ECHO REQUEST（类型为 8 ） 和 ECHO REPLY （类型为 0）</strong>。</p>',23),bo={id:"traceroute-——-差错报文类型的使用",tabindex:"-1"},ko=o("a",{class:"header-anchor",href:"#traceroute-——-差错报文类型的使用","aria-hidden":"true"},"#",-1),fo={href:"https://xiaolincoding.com/network/4_ip/ping.html#traceroute-%E5%B7%AE%E9%94%99%E6%8A%A5%E6%96%87%E7%B1%BB%E5%9E%8B%E7%9A%84%E4%BD%BF%E7%94%A8",target:"_blank",rel:"noopener noreferrer"},To=n(`<p>有一款充分利用 ICMP <strong>差错报文类型</strong>的应用叫做 <code>traceroute</code>（在UNIX、MacOS中是这个命令，而在Windows中对等的命令叫做 tracert ）。</p><p><em>1. traceroute 作用一</em></p><p>traceroute 的第一个作用就是<strong>故意设置特殊的 TTL，来追踪去往目的地时沿途经过的路由器。</strong></p><p>traceroute 的参数指向某个<strong>目的 IP 地址</strong>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">traceroute</span> <span class="token number">192.168</span>.1.100
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>这个作用是如何工作的呢？</p></blockquote><p>它的原理就是利用 IP 包的<strong>生存期限</strong> 从 <code>1</code> 开始按照顺序递增的同时发送 <strong>UDP 包</strong>，强制接收 <strong>ICMP 超时消息</strong>的一种方法。</p><p>比如，将 TTL 设置 为 <code>1</code>，则遇到第一个路由器，就牺牲了，接着返回 ICMP 差错报文网络包，类型是<strong>时间超时</strong>。</p><p>接下来将 TTL 设置为 <code>2</code>，第一个路由器过了，遇到第二个路由器也牺牲了，也同时返回了 ICMP 差错报文数据包，如此往复，直到到达目的主机。</p><p>这样的过程，traceroute 就可以拿到了所有的路由器 IP。</p><p>当然有的路由器根本就不会返回这个 ICMP，所以对于有的公网地址，是看不到中间经过的路由的。</p><blockquote><p>发送方如何知道发出的 UDP 包是否到达了目的主机呢？</p></blockquote><p>traceroute 在发送 <code>UDP</code> 包时，会填入一个<strong>不可能的端口号</strong>值作为 UDP 目标端口号：33434。然后对于每个下一个探针，它都会增加一个，这些端口都是通常认为不会被使用，不过，没有人知道当某些应用程序监听此类端口时会发生什么。</p><p>当目的主机，收到 UDP 包后，会返回 ICMP 差错报文消息，但这个差错报文消息的类型是「<strong>端口不可达</strong>」。</p><p>所以，<strong>当差错报文类型是端口不可达时，说明发送方发出的 UDP 包到达了目的主机。</strong></p><p><em>2. traceroute 作用二</em></p><p>traceroute 还有一个作用是<strong>故意设置不分片，从而确定路径的 MTU</strong>。</p><blockquote><p>这么做是为了什么？</p></blockquote><p>这样做的目的是为了<strong>路径MTU发现</strong>。</p><p>因为有的时候我们并不知道路由器的 <code>MTU</code> 大小，以太网的数据链路上的 <code>MTU</code> 通常是 <code>1500</code> 字节，但是非以太网的 <code>MTU</code> 值就不一样了，所以我们要知道 <code>MTU</code> 的大小，从而控制发送的包大小。</p><p><img src="`+k+'" alt="MTU 路径发现（UDP的情况下）"></p><p>它的工作原理如下：</p><p>首先在发送端主机发送 <code>IP</code> 数据报时，将 <code>IP</code> 包首部的<strong>分片禁止标志位设置为 1</strong>。根据这个标志位，途中的路由器不会对大数据包进行分片，而是将包丢弃。</p><p>随后，通过一个 ICMP 的不可达消息将<strong>数据链路上 MTU 的值</strong>一起给发送主机，不可达消息的类型为「<strong>需要进行分片但设置了不分片位</strong>」。</p><p>发送主机端每次收到 ICMP 差错报文时就<strong>减少</strong>包的大小，以此来定位一个合适的 <code>MTU</code> 值，以便能到达目标主机。</p><hr><p>参考资料：</p><p>[1] 竹下隆史.图解TCP/IP.人民邮电出版社.</p><p>[2] 刘超.趣谈网络协议.极客时间.</p>',29);function xo(Do,qo){const t=r("ExternalLinkIcon");return p(),d("div",null,[T,o("h2",x,[D,e(),o("a",q,[e("#"),s(t)]),e("IP协议的助手 —— ICMP 协议")]),U,o("h2",F,[j,e(),o("a",w,[e("#"),s(t)]),e("查询报文类型")]),v,o("h2",L,[R,e(),o("a",N,[e("#"),s(t)]),e("差错报文类型")]),S,o("h4",V,[H,e(),o("a",O,[e("#"),s(t)]),e("a. 网络不可达代码为 0")]),Q,W,y,X,Y,o("h4",z,[G,e(),o("a",J,[e("#"),s(t)]),e("b. 主机不可达代码为 1")]),K,Z,$,oo,o("h4",eo,[to,e(),o("a",so,[e("#"),s(t)]),e("c. 协议不可达代码为 2")]),no,co,ro,po,o("h4",io,[ao,e(),o("a",go,[e("#"),s(t)]),e("d. 端口不可达代码为 3")]),lo,_o,ho,Eo,o("h4",Po,[Io,e(),o("a",uo,[e("#"),s(t)]),e("e. 需要进行分片但设置了不分片位代码为 4")]),Mo,o("h2",Co,[mo,e(),o("a",Bo,[e("#"),s(t)]),e("ping —— 查询报文类型的使用")]),Ao,o("h2",bo,[ko,e(),o("a",fo,[e("#"),s(t)]),e("traceroute —— 差错报文类型的使用")]),To])}const jo=c(f,[["render",xo],["__file","2_ping.html.vue"]]);export{jo as default};
