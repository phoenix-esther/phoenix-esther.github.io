const e=JSON.parse('{"key":"v-2b5bea71","path":"/java/java-concurrent/java-concurrent-pool.html","title":"Java  线程池","lang":"zh-CN","frontmatter":{},"headers":[{"level":3,"title":"Java中的线程池","slug":"java中的线程池","link":"#java中的线程池","children":[]},{"level":2,"title":"ThreadPoolExecutor","slug":"threadpoolexecutor-1","link":"#threadpoolexecutor-1","children":[]},{"level":2,"title":"ScheduledThreadPoolExecutor","slug":"scheduledthreadpoolexecutor","link":"#scheduledthreadpoolexecutor","children":[]}],"git":{"createdTime":1659075927000,"updatedTime":1659075927000,"contributors":[{"name":"诗人都藏在水底","email":"895252461@qq.com","commits":1}]},"readingTime":{"minutes":6.81,"words":2044},"filePathRelative":"java/java-concurrent/java-concurrent-pool.md","localizedDate":"2022年7月29日","excerpt":"<h1> Java  线程池</h1>\\n<h3> Java中的线程池</h3>\\n<p>在开发的过程中，合理的使用线程池能够带来三个好处。</p>\\n<ul>\\n<li>降低资源消耗：通过重复利用已创建的线程降低线程创建和销毁造成的消耗</li>\\n<li>提高响应速度：当任务到达时，任务可以不需要等到线程创建就能立即执行。</li>\\n<li>提高线程可管理性：线程是稀缺的资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一分配、调优和监控。</li>\\n</ul>\\n<h4> ThreadPoolExecutor</h4>\\n<p>ThreadPoolExecutor是Java对线程池的一个具体实现。</p>"}');export{e as data};
