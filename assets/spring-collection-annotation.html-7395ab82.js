const n=JSON.parse('{"key":"v-d2bacffa","path":"/spring/spring-framework/spring-base-tools/spring-collection-annotation.html","title":"Spring 组合注解的处理","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"一、什么是组合注解？","slug":"一、什么是组合注解","link":"#一、什么是组合注解","children":[]},{"level":2,"title":"二、递归获取指定类的所有注解","slug":"二、递归获取指定类的所有注解","link":"#二、递归获取指定类的所有注解","children":[]},{"level":2,"title":"三、spring 读取注解信息","slug":"三、spring-读取注解信息","link":"#三、spring-读取注解信息","children":[{"level":3,"title":"3.1 SimpleAnnotationMetadataReadingVisitor","slug":"_3-1-simpleannotationmetadatareadingvisitor","link":"#_3-1-simpleannotationmetadatareadingvisitor","children":[]},{"level":3,"title":"3.2 StandardAnnotationMetadata","slug":"_3-2-standardannotationmetadata","link":"#_3-2-standardannotationmetadata","children":[]},{"level":3,"title":"3.3 两者的使用场景","slug":"_3-3-两者的使用场景","link":"#_3-3-两者的使用场景","children":[]}]},{"level":2,"title":"四、spring提供的注解工具类","slug":"四、spring提供的注解工具类","link":"#四、spring提供的注解工具类","children":[{"level":3,"title":"4.1 AnnotationUtils","slug":"_4-1-annotationutils","link":"#_4-1-annotationutils","children":[]},{"level":3,"title":"4.2 AnnotatedElementUtils","slug":"_4-2-annotatedelementutils","link":"#_4-2-annotatedelementutils","children":[]}]},{"level":2,"title":"五、总结","slug":"五、总结","link":"#五、总结","children":[]}],"git":{"createdTime":1697974777000,"updatedTime":1697974777000,"contributors":[{"name":"xuliang","email":"895252461@qq.com","commits":1}]},"readingTime":{"minutes":13.94,"words":4182},"filePathRelative":"spring/spring-framework/spring-base-tools/spring-collection-annotation.md","localizedDate":"2023年10月22日","excerpt":"<h1> Spring 组合注解的处理</h1>\\n<h2> 一、什么是组合注解？</h2>\\n<p>在spring中，有一类特别的注解：组合注解。举例来说，springmvc中，<code>@Controller</code>注解用来配置访问路径等，<code>@ResponseBody</code> 注解用来表明不做视图渲染，直接展示方法的运行结果（一般是转成json返回），而<code>@RestController</code>组合了两者的功能，可以配置访问路径，同时也可以直接展示方法的运行结果，代码如下：</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token annotation punctuation\\">@ResponseBody</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token annotation punctuation\\">@interface</span> <span class=\\"token class-name\\">RestController</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token doc-comment comment\\">/**\\n     * 注解别名\\n     */</span>\\n    <span class=\\"token annotation punctuation\\">@AliasFor</span><span class=\\"token punctuation\\">(</span>annotation <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">Controller</span><span class=\\"token punctuation\\">.</span><span class=\\"token keyword\\">class</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token class-name\\">String</span> <span class=\\"token function\\">value</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">default</span> <span class=\\"token string\\">\\"\\"</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}');export{n as data};
