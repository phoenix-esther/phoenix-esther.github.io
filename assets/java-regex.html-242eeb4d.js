import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-e53dd85b.js";const p={},e=t(`<h1 id="java-正则的使用" tabindex="-1"><a class="header-anchor" href="#java-正则的使用" aria-hidden="true">#</a> Java 正则的使用</h1><h2 id="一、正则表达式详解" tabindex="-1"><a class="header-anchor" href="#一、正则表达式详解" aria-hidden="true">#</a> 一、正则表达式详解</h2><p>正则表达式是由普通字符（如英文字母）以及特殊字符（也称为元字符）组成的文字模式。该模式对文本查找时需要匹配的一个或多个字符串描述，给出一个匹配模板。它专门用于操作字符串，可以简化对字符串的复杂操作。</p><p>以下是一些使用正则表达式的主要原因：</p><ol><li><code>匹配和验证文本</code>：正则表达式可以用于验证和匹配文本，例如电子邮件地址、电话号码、网址等。通过使用正则表达式，可以快速准确地确定字符串是否符合特定的格式要求。</li><li><code>搜索和替换文本</code>：正则表达式可以用于搜索和替换文本中的特定模式。例如，可以使用正则表达式搜索包含特定关键字的文件或文本，并将其替换为其他内容。</li><li><code>数据提取</code>：正则表达式可以用于从文本中提取特定的数据，例如从网页中提取电子邮件地址、电话号码等。通过使用正则表达式，可以快速准确地提取所需的数据。</li><li><code>自动化处理</code>：正则表达式可以用于自动化处理文本，例如自动生成代码、批量更改文件名、批量处理数据等。</li></ol><p><strong>总之，正则表达式是一种非常强大和灵活的文本处理工具，可以极大地提高处理文本的效率和准确性。</strong></p><h3 id="_1-1-符号定义" tabindex="-1"><a class="header-anchor" href="#_1-1-符号定义" aria-hidden="true">#</a> 1.1 符号定义</h3><h4 id="_1-1-1-基本书写符号" tabindex="-1"><a class="header-anchor" href="#_1-1-1-基本书写符号" aria-hidden="true">#</a> 1.1.1 基本书写符号</h4><table><thead><tr><th>符号</th><th>符号</th><th>示例</th><th>解释</th><th>匹配输入</th></tr></thead><tbody><tr><td>\\</td><td>转义符</td><td>*</td><td>符号“*”</td><td>*</td></tr><tr><td>[ ]</td><td>可接收的字符列表</td><td>[efgh]</td><td>e、f、g、h中的任意1个字符</td><td>e、f、g、h</td></tr><tr><td>[^]</td><td>不接收的字符列表</td><td>[^abc]</td><td>除a、b、c之外的任意1个字符，包括数字和特殊符号</td><td>m、q、5、*</td></tr><tr><td>|</td><td>匹配“|”之前或之后的表达式</td><td>ab|cd</td><td>ab或者cd</td><td>ab、cd</td></tr><tr><td>( )</td><td>将子表达式分组</td><td>(abc)</td><td>将字符串abc作为一组</td><td>abc</td></tr><tr><td>-</td><td>连字符</td><td>A-Z</td><td>任意单个大写字母</td><td>大写字母</td></tr></tbody></table><h4 id="_1-1-2-限定符" tabindex="-1"><a class="header-anchor" href="#_1-1-2-限定符" aria-hidden="true">#</a> 1.1.2 限定符</h4><p>限定符将可选数量的数据添加到正则表达式，下表为常用限定符：</p><table><thead><tr><th>符号</th><th>含义</th><th>示例</th><th>示例</th></tr></thead><tbody><tr><td>*</td><td>指定字符重复0次或n次</td><td>(abc)*</td><td>仅包含任意个abc的字符串，等效于\\w*</td></tr><tr><td>+</td><td>指定字符重复1次或n次</td><td>m+(abc)*</td><td>以至少1个m开头，后接任意个abc的字符串</td></tr><tr><td>?</td><td>指定字符重复0次或1次</td><td>m+abc?</td><td>以至少1个m开头，后接ab或abc的字符串</td></tr><tr><td>{n}</td><td>只能输入n个字符</td><td>[abcd]{3}</td><td>由abcd中字母组成的任意长度为3的字符串</td></tr><tr><td>{n,}</td><td>指定至少 n 个匹配</td><td>[abcd]{3,}</td><td>由abcd中字母组成的任意长度不小于3的字符串</td></tr><tr><td>{n,m}</td><td>指定至少 n 个但不多于 m 个匹配</td><td>[abcd]{3,5}</td><td>由abcd中字母组成的任意长度不小于3，不大于5的字符串</td></tr><tr><td>^</td><td>指定起始字符</td><td>^[0-9]+[a-z]*</td><td>以至少1个数字开头，后接任意个小写字母的字符串</td></tr><tr><td>$</td><td>指定结束字符</td><td>^[0-9]-[a-z]+$</td><td>以1个数字开头后接连字符“–”，并以至少1个小写字母结尾的字符串</td></tr></tbody></table><h4 id="_1-1-3-匹配字符集" tabindex="-1"><a class="header-anchor" href="#_1-1-3-匹配字符集" aria-hidden="true">#</a> 1.1.3 匹配字符集</h4><p>匹配字符集是预定义的用于正则表达式中的符号集。如果字符串与字符集中的任何一个字符相匹配，它就会找到这个匹配项。</p><p>正则表达式中的部分匹配字符集:</p><table><thead><tr><th>常用分组构造形式</th><th>说明</th></tr></thead><tbody><tr><td>()</td><td>非命名捕获。捕获匹配的子字符串（或非捕获组）。编号为零的第一个捕获是由整个正则表达式模式匹配的文本，其它捕获结果则根据左括号的顺序从1开始自动编号。</td></tr><tr><td><code>(?&lt;name&gt;)</code></td><td>命名捕获。将匹配的子字符串捕获到一个组名称或编号名称中。用于name的字符串不能包含任何标点符号，并且不能以数字开头。可以使用单引号替代尖括号，例如 (?‘name’)</td></tr></tbody></table><h4 id="_1-1-4-字符转义" tabindex="-1"><a class="header-anchor" href="#_1-1-4-字符转义" aria-hidden="true">#</a> 1.1.4 字符转义</h4><p>如果你想查找元字符本身的话，比如你查找.,或者*,就出现了问题：你没办法指定它们，因为它们会被解释成别的意思。这时你就得使用\\来取消这些字符的特殊意义。因此，你应该使用.和*。当然，要查找\\本身，你也得用\\</p><p>例如：deerchao.net匹配deerchao.NET，C:\\Windows匹配C:\\Windows。注意在Java中: (https://github\\.com/[\\w\\-]) 用&quot;\\.“配备”.&quot;。</p><h3 id="_1-2-常用正则表达式举例" tabindex="-1"><a class="header-anchor" href="#_1-2-常用正则表达式举例" aria-hidden="true">#</a> 1.2 常用正则表达式举例</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>非负整数：“<span class="token operator">^</span>\\d<span class="token operator">+</span>$ ”
正整数： “ <span class="token operator">^</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">*</span>$” 
非正整数： “ <span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span>\\d<span class="token operator">+</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">+</span><span class="token punctuation">)</span><span class="token punctuation">)</span>$” 
整数： “ <span class="token operator">^</span><span class="token operator">-</span><span class="token operator">?</span>\\d<span class="token operator">+</span>$” 
英文字符串： “ <span class="token operator">^</span><span class="token punctuation">[</span><span class="token constant">A</span><span class="token operator">-</span>Za<span class="token operator">-</span>z<span class="token punctuation">]</span><span class="token operator">+</span>$” 
英文字符数字串： “ <span class="token operator">^</span><span class="token punctuation">[</span><span class="token constant">A</span><span class="token operator">-</span>Za<span class="token operator">-</span>z0<span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">+</span>$” 
英数字加下划线串： “<span class="token operator">^</span>\\w<span class="token operator">+</span>$” 
<span class="token constant">E</span><span class="token operator">-</span>mail地址：“<span class="token operator">^</span><span class="token punctuation">[</span>\\w<span class="token operator">-</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span>\\<span class="token punctuation">.</span><span class="token punctuation">[</span>\\w<span class="token operator">-</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">)</span><span class="token operator">*</span>@<span class="token punctuation">[</span>\\w<span class="token operator">-</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span>\\<span class="token punctuation">.</span><span class="token punctuation">[</span>\\w<span class="token operator">-</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">)</span><span class="token operator">+</span>$” 
<span class="token constant">URL</span>：“<span class="token operator">^</span><span class="token punctuation">[</span>a<span class="token operator">-</span>zA<span class="token operator">-</span><span class="token constant">Z</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token punctuation">(</span>\\w<span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">-</span>\\w<span class="token operator">+</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>\\<span class="token punctuation">.</span><span class="token punctuation">(</span>\\w<span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">-</span>\\w<span class="token operator">+</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>\\<span class="token operator">?</span>\\s<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">?</span>$” 

Java 常用正则表达式（数字，字符串处理）
匹配特定数字
<span class="token operator">^</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>d<span class="token operator">*</span>$　 　 <span class="token comment">//匹配正整数</span>
<span class="token operator">^</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>d<span class="token operator">*</span>$ 　 <span class="token comment">//匹配负整数</span>
<span class="token operator">^</span><span class="token operator">-</span><span class="token operator">?</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>d<span class="token operator">*</span>$　　 <span class="token comment">//匹配整数</span>
<span class="token operator">^</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>d<span class="token operator">*</span><span class="token operator">|</span>0$　 <span class="token comment">//匹配非负整数（正整数 + 0）</span>
<span class="token operator">^</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>d<span class="token operator">*</span><span class="token operator">|</span>0$　　 <span class="token comment">//匹配非正整数（负整数 + 0）</span>
<span class="token operator">^</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>d<span class="token operator">*</span><span class="token punctuation">.</span>d<span class="token operator">*</span><span class="token operator">|</span><span class="token number">0</span><span class="token punctuation">.</span>d<span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>d<span class="token operator">*</span>$　　 <span class="token comment">//匹配正浮点数</span>
<span class="token operator">^</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>d<span class="token operator">*</span><span class="token punctuation">.</span>d<span class="token operator">*</span><span class="token operator">|</span><span class="token number">0</span><span class="token punctuation">.</span>d<span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>d<span class="token operator">*</span><span class="token punctuation">)</span>$　 <span class="token comment">//匹配负浮点数</span>
<span class="token operator">^</span><span class="token operator">-</span><span class="token operator">?</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>d<span class="token operator">*</span><span class="token punctuation">.</span>d<span class="token operator">*</span><span class="token operator">|</span><span class="token number">0</span><span class="token punctuation">.</span>d<span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>d<span class="token operator">*</span><span class="token operator">|</span><span class="token number">0</span><span class="token operator">?</span><span class="token number">.0</span><span class="token operator">+</span><span class="token operator">|</span><span class="token number">0</span><span class="token punctuation">)</span>$　 <span class="token comment">//匹配浮点数</span>
<span class="token operator">^</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>d<span class="token operator">*</span><span class="token punctuation">.</span>d<span class="token operator">*</span><span class="token operator">|</span><span class="token number">0</span><span class="token punctuation">.</span>d<span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>d<span class="token operator">*</span><span class="token operator">|</span><span class="token number">0</span><span class="token operator">?</span><span class="token number">.0</span><span class="token operator">+</span><span class="token operator">|</span>0$　　 <span class="token comment">//匹配非负浮点数（正浮点数 + 0）</span>
<span class="token operator">^</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>d<span class="token operator">*</span><span class="token punctuation">.</span>d<span class="token operator">*</span><span class="token operator">|</span><span class="token number">0</span><span class="token punctuation">.</span>d<span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>d<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token number">0</span><span class="token operator">?</span><span class="token number">.0</span><span class="token operator">+</span><span class="token operator">|</span>0$　　<span class="token comment">//匹配非正浮点数（负浮点数 + 0）</span>

匹配特定字符串
<span class="token operator">^</span><span class="token punctuation">[</span><span class="token constant">A</span><span class="token operator">-</span>Za<span class="token operator">-</span>z<span class="token punctuation">]</span><span class="token operator">+</span>$　　<span class="token comment">//匹配由26个英文字母组成的字符串</span>
<span class="token operator">^</span><span class="token punctuation">[</span><span class="token constant">A</span><span class="token operator">-</span><span class="token constant">Z</span><span class="token punctuation">]</span><span class="token operator">+</span>$　　<span class="token comment">//匹配由26个英文字母的大写组成的字符串</span>
<span class="token operator">^</span><span class="token punctuation">[</span>a<span class="token operator">-</span>z<span class="token punctuation">]</span><span class="token operator">+</span>$　　<span class="token comment">//匹配由26个英文字母的小写组成的字符串</span>
<span class="token operator">^</span><span class="token punctuation">[</span><span class="token constant">A</span><span class="token operator">-</span>Za<span class="token operator">-</span>z0<span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">+</span>$　　<span class="token comment">//匹配由数字和26个英文字母组成的字符串</span>
<span class="token operator">^</span>w<span class="token operator">+</span>$　　<span class="token comment">//匹配由数字、26个英文字母或者下划线组成的字符串</span>

验证Email地址：“<span class="token operator">^</span>w<span class="token operator">+</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token operator">+</span><span class="token punctuation">.</span><span class="token punctuation">]</span>w<span class="token operator">+</span><span class="token punctuation">)</span><span class="token operator">*</span>@w<span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">]</span>w<span class="token operator">+</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">.</span>w<span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">]</span>w<span class="token operator">+</span><span class="token punctuation">)</span><span class="token operator">*</span>$”
验证InternetURL：“<span class="token operator">^</span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token punctuation">[</span>w<span class="token operator">-</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">[</span>w<span class="token operator">-</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">/</span><span class="token punctuation">[</span>w<span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token operator">?</span><span class="token operator">%</span><span class="token operator">&amp;=</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">?</span>$”
验证电话号码：“<span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">(</span>d<span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">|</span>d<span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token operator">-</span><span class="token punctuation">)</span><span class="token operator">?</span>d<span class="token punctuation">{</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">}</span>$”
验证身份证号（<span class="token number">15</span>位或<span class="token number">18</span>位数字）：“<span class="token operator">^</span>d<span class="token punctuation">{</span><span class="token number">15</span><span class="token punctuation">}</span><span class="token operator">|</span>d<span class="token punctuation">{</span><span class="token punctuation">}</span>18$”
验证一年的<span class="token number">12</span>个月：“<span class="token operator">^</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">?</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>$”正确格式为：“<span class="token number">01</span>”<span class="token operator">-</span>“<span class="token number">09</span>”和“<span class="token number">1</span>”“<span class="token number">12</span>”
验证一个月的<span class="token number">31</span>天：“<span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">?</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token number">30</span><span class="token operator">|</span><span class="token number">31</span><span class="token punctuation">)</span>$”
匹配中文字符的正则表达式： <span class="token punctuation">[</span>u4e00<span class="token operator">-</span>u9fa5<span class="token punctuation">]</span>
<span class="token function">匹配双字节字符</span><span class="token punctuation">(</span>包括汉字在内<span class="token punctuation">)</span>：<span class="token punctuation">[</span><span class="token operator">^</span>x00<span class="token operator">-</span>xff<span class="token punctuation">]</span>
匹配空行的正则表达式：n<span class="token punctuation">[</span>s<span class="token operator">|</span> <span class="token punctuation">]</span><span class="token operator">*</span>r
匹配<span class="token constant">HTML</span>标记的正则表达式：<span class="token operator">/</span><span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token operator">|</span><span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">/</span>
<span class="token function">匹配首尾空格的正则表达式：</span><span class="token punctuation">(</span><span class="token operator">^</span>s<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span>s<span class="token operator">*</span>$<span class="token punctuation">)</span>
匹配Email地址的正则表达式：w<span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token operator">+</span><span class="token punctuation">.</span><span class="token punctuation">]</span>w<span class="token operator">+</span><span class="token punctuation">)</span><span class="token operator">*</span>@w<span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">]</span>w<span class="token operator">+</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">.</span>w<span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">]</span>w<span class="token operator">+</span><span class="token punctuation">)</span><span class="token operator">*</span>
匹配网址<span class="token constant">URL</span><span class="token literal-property property">的正则表达式：http</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token punctuation">[</span>w<span class="token operator">-</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">[</span>w<span class="token operator">-</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">/</span><span class="token punctuation">[</span>w<span class="token operator">-</span> <span class="token punctuation">.</span><span class="token operator">/</span><span class="token operator">?</span><span class="token operator">%</span><span class="token operator">&amp;=</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">?</span>

Java这些常用的正则表达式在处理大数据查找，更新，替换的时候可以极大的提高效率。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-java中的regularexpressionvalidator" tabindex="-1"><a class="header-anchor" href="#_1-3-java中的regularexpressionvalidator" aria-hidden="true">#</a> 1.3 Java中的RegularExpressionValidator</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Java使用RegularExpressionValidator验证控件时，它的验证功能及其验证正则表达式如下：

只能输入数字：“^[0-9]*$”
只能输入n位的数字：“^d{n}$”
只能输入至少n位数字：“^d{n,}$”
只能输入m-n位的数字：“^d{m,n}$”
只能输入零和非零开头的数字：“^(0|[1-9][0-9]*)$”
只能输入有两位小数的正实数：“^[0-9]+(.[0-9]{2})?$”
只能输入有1-3位小数的正实数：“^[0-9]+(.[0-9]{1,3})?$”
只能输入非零的正整数：“^+?[1-9][0-9]*$”
只能输入非零的负整数：“^-[1-9][0-9]*$”
只能输入长度为3的字符：“^.{3}$”
只能输入由26个英文字母组成的字符串：“^[A-Za-z]+$”
只能输入由26个大写英文字母组成的字符串：“^[A-Z]+$”
只能输入由26个小写英文字母组成的字符串：“^[a-z]+$”
只能输入由数字和26个英文字母组成的字符串：“^[A-Za-z0-9]+$”
只能输入由数字、26个英文字母或者下划线组成的字符串：“^w+$”


验证用户密码:“^[a-zA-Z]w{5,17}$”正确格式为：以字母开头，长度在6-18之间，只能包含字符、数字和下划线。
只能输入汉字：“^[u4e00-u9fa5],{0,}$”
验证Email地址：“^w+[-+.]w+)*@w+([-.]w+)*.w+([-.]w+)*$”
验证InternetURL：“^http://([w-]+.)+[w-]+(/[w-./?%&amp;=]*)?$”
验证电话号码：“^((d{3,4})|d{3,4}-)?d{7,8}$”
验证身份证号（15位或18位数字）：“^d{15}|d{}18$”
验证一年的12个月：“^(0?[1-9]|1[0-2])$”正确格式为：“01”-“09”和“1”“12”
验证一个月的31天：“^((0?[1-9])|((1|2)[0-9])|30|31)$”


匹配中文字符的正则表达式： [u4e00-u9fa5]
匹配双字节字符(包括汉字在内)：[^x00-xff]
匹配空行的正则表达式：n[s| ]*r
匹配HTML标记的正则表达式：/&lt; (.*)&gt;.*|&lt; (.*) /&gt;/
匹配首尾空格的正则表达式：(^s*)|(s*$)
匹配Email地址的正则表达式：w+([-+.]w+)*@w+([-.]w+)*.w+([-.]w+)*
匹配网址URL的正则表达式：http://([w-]+.)+[w-]+(/[w- ./?%&amp;=]*)?
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-4-正则表达式匹配简单语法汇总" tabindex="-1"><a class="header-anchor" href="#_1-4-正则表达式匹配简单语法汇总" aria-hidden="true">#</a> 1.4 正则表达式匹配简单语法汇总</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1、字母：匹配单个字母
A：表示匹配字母A；
\\\\：匹配转义字符“\\”；
\\t：匹配转义字符“\\t”；
\\n：匹配转义字符“\\n”；

2、一组字符：任意匹配里面的一个单个字符
[abc]：表示可能是字母a，可能是字母b或者是字母c；
[^abc]：表示不是字母a，字母b，字母c的任意一个；
[a-zA-Z]：表示全部字母中的任意一个；
[0-9]：表示全部数字的任意一个；

3、边界匹配
^：表示一组正则的开始；
$：表示一组正则的结束；

4、简写表达式：每一位出现的简写标记也只表示一位
· ：表示任意的一位字符；
\\d ：表示任意的一位数字，等价于“[0-9]”；
\\D ：表示任意的一位非数字，等价于“[~0-9]”；
\\w ：表示任意的一位字母、数字、_，等价于“[a-zA-Z0-9_]”；
\\w ：表示任意的一位非字母、数字、_，等价于“[^a-zA-Z0-9_]”；
\\s ：表示任意的一位空格，例如：\\n、\\t等；
\\S ：表示任意的一位非空格；
5、数量表示：之前所有的正则都只是表示一位，如果要表示多位，则就需要数量表示。
？：此正则出现0次或1次；
*：此正则出现0次、1次或多次；
+：次正则出现1次或多次；
{n}：此正则出现正好n次；
{n,}：此正则出现n次以上；
{n,m}：此正则出现n – m次。
6、逻辑表示：与、或、非
正则表达式A正则表达式B： 表达式A之后紧跟着表达式B；
正则表达式|A正则表达式B： 表示表达式A或者表达式B，二者任选一个出现；
（正则表达式）：将多个子表达式合成一个表示，作为一组出现。

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、pattern类详解" tabindex="-1"><a class="header-anchor" href="#二、pattern类详解" aria-hidden="true">#</a> 二、Pattern类详解</h2><p>Pattern在java.util.regex包中，是正则表达式的编译表示形式，此类的实例是不可变的，可供多个并发线程安全使用。</p><h3 id="_2-1-获取pattern实例" tabindex="-1"><a class="header-anchor" href="#_2-1-获取pattern实例" aria-hidden="true">#</a> 2.1 获取Pattern实例</h3><p>Pattern的构造器被设计为私有，不允许通过new的方式创建Pattern。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">Pattern</span><span class="token punctuation">(</span><span class="token class-name">String</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    pattern <span class="token operator">=</span> p<span class="token punctuation">;</span>
    flags <span class="token operator">=</span> f<span class="token punctuation">;</span>

    <span class="token comment">// to use UNICODE_CASE if UNICODE_CHARACTER_CLASS present</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> <span class="token constant">UNICODE_CHARACTER_CLASS</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
        flags <span class="token operator">|=</span> <span class="token constant">UNICODE_CASE</span><span class="token punctuation">;</span>
    
    <span class="token comment">// Reset group index count</span>
    capturingGroupCount <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    localCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pattern<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">compile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Start</span><span class="token punctuation">(</span>lastAccept<span class="token punctuation">)</span><span class="token punctuation">;</span>
        matchRoot <span class="token operator">=</span> lastAccept<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要想获取Pattern的实例，可以使用其静态方法获取，将给定正则表达式编译为具有给定标志的模式。参数:</p><ul><li><p>regex -要编译的表达式</p></li><li><p>flags -匹配标志，位掩码，可以包括CASE_INSENSITIVE, MULTILINE, DOTALL, UNICODE_CASE, CANON_EQ, UNIX_LINES, LITERAL, UNICODE_CHARACTER_CLASS和COMMENTS</p></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Pattern</span> <span class="token function">compile</span><span class="token punctuation">(</span><span class="token class-name">String</span> regex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Pattern</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Pattern</span> <span class="token function">compile</span><span class="token punctuation">(</span><span class="token class-name">String</span> regex<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Pattern</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-1-1-实例" tabindex="-1"><a class="header-anchor" href="#_2-1-1-实例" aria-hidden="true">#</a> 2.1.1 实例</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Pattern</span> p<span class="token operator">=</span><span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\d+&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token class-name">Matcher</span> m<span class="token operator">=</span>p<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span><span class="token string">&quot;22bb23&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
m<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回false,因为bb不能被\\d+匹配,导致整个字符串匹配未成功. </span>
<span class="token class-name">Matcher</span> m2<span class="token operator">=</span>p<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span><span class="token string">&quot;2223&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
m2<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回true,因为\\d+匹配到了整个字符串 </span>

m<span class="token operator">=</span>p<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span><span class="token string">&quot;22bb23&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
m<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回true </span>
m2<span class="token operator">=</span>p<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span><span class="token string">&quot;aa2223&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
m2<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回true </span>
<span class="token class-name">Matcher</span> m3<span class="token operator">=</span>p<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span><span class="token string">&quot;aa2223bb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
m3<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回true </span>
<span class="token class-name">Matcher</span> m4<span class="token operator">=</span>p<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span><span class="token string">&quot;aabb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
m4<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回false </span>

m<span class="token operator">=</span>p<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span><span class="token string">&quot;22bb23&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
m<span class="token punctuation">.</span><span class="token function">lookingAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回true,因为\\d+匹配到了前面的22 </span>
m2<span class="token operator">=</span>p<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span><span class="token string">&quot;aa2223&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
m2<span class="token punctuation">.</span><span class="token function">lookingAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回false,因为\\d+不能匹配前面的aa </span>

m<span class="token operator">=</span>p<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span><span class="token string">&quot;aaa2223bb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
m<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//匹配2223 </span>
m<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回3 </span>
m<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回7,返回的是2223后的索引号 </span>
m<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回2223 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Pattern</span> p<span class="token operator">=</span><span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">&quot;([a-z]+)(\\\\d+)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token class-name">Matcher</span> m<span class="token operator">=</span>p<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span><span class="token string">&quot;aaa2223bb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
m<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//匹配aaa2223 </span>
m<span class="token punctuation">.</span><span class="token function">groupCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//返回2,因为有2组 </span>
m<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//返回0 返回第一组匹配到的子字符串在字符串中的索引号 </span>
m<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//返回3 </span>
m<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//返回3 返回第一组匹配到的子字符串的最后一个字符在字符串中的索引位置. </span>
m<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//返回7 </span>
m<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//返回aaa,返回第一组匹配到的子字符串 </span>
m<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//返回2223,返回第二组匹配到的子字符串 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-组和捕获" tabindex="-1"><a class="header-anchor" href="#_2-2-组和捕获" aria-hidden="true">#</a> 2.2 组和捕获</h3><p>捕获组可以通过从左到右计算其开括号来编号。</p><p>在表达式 ((A)(B©)) 中，存在四个组：</p><ul><li>ABC</li><li>A</li><li>BC</li><li>C</li></ul><p>组零始终代表整个表达式。</p><h3 id="_2-3-int-flags-方法" tabindex="-1"><a class="header-anchor" href="#_2-3-int-flags-方法" aria-hidden="true">#</a> 2.3 int flags()方法</h3><p>返回当前Pattern的匹配flag参数。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Pattern</span> p <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">&quot;a+&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">CASE_INSENSITIVE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">flags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-string-pattern-方法" tabindex="-1"><a class="header-anchor" href="#_2-4-string-pattern-方法" aria-hidden="true">#</a> 2.4 String pattern() 方法</h3><p>返回该Patter对象所编译的正则表达式。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Pattern</span> p <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\d+&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出\\d+</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">pattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出\\d+</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-5-split-charsequence-input" tabindex="-1"><a class="header-anchor" href="#_2-5-split-charsequence-input" aria-hidden="true">#</a> 2.5 split(CharSequence input)</h3><ul><li><p>input 要拆分的字符序列。</p></li><li><p>return 根据围绕此模式的匹配来拆分输入后所计算的字符串数组。</p></li></ul><p>此方法将目标字符串按照Pattern里所包含的正则表达式为模进行分割，它的工作方式类似于使用给定的输入序列和限制参数零调用两个参数的方法。因此，得到的数组中不包括尾部空字符串。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Pattern</span> p<span class="token operator">=</span><span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\d+&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str<span class="token operator">=</span>p<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;我的QQ是:456456我的电话是:0532214我的邮箱是:aaa@aaa.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：str[0]=&quot;我的QQ是:&quot; str[1]=&quot;我的电话是:&quot; str[2]=&quot;我的邮箱是:aaa@aaa.com&quot;</p><h3 id="_2-6-split-charsequence-input-int-limit" tabindex="-1"><a class="header-anchor" href="#_2-6-split-charsequence-input-int-limit" aria-hidden="true">#</a> 2.6 split(CharSequence input, int limit)</h3><ul><li>input 要拆分的字符序列。</li><li>limit 结果阈值，如上文中所述。</li><li>return 根据围绕此模式的匹配来拆分输入后所计算的字符串数组。</li></ul><p>limit参数控制应用模式的次数，从而影响结果数组的长度。</p><ol><li>如果 n 大于零，则模式至多应用 n- 1 次，数组长度不大于 n，且数组的最后条目将包含除最后匹配定界符之外的所有输入。</li><li>如果 n 非正，那么将应用模式的次数不受限制，并且数组可以为任意长度。</li><li>如果 n 为零，那么应用模式的次数不受限制，数组可以为任意长度，并且将丢弃尾部空字符串。</li></ol><p>此方法返回的数组包含输入序列的子字符串，由匹配此模式的另一子序列或输入序列的结尾终止。数组中子字符串的顺序与其在输入中出现的顺序相同。如果此模式与输入的任何子序列都不匹配，那么得到的数组仅包含一个元素，即字符串形式的输入序列。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Pattern</span> p <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">&quot;[/]+&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
string<span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;Kevin has seen《LEON》seveal times,because it is a good film./ 凯文已经看过《这个杀手不太冷》几次了，因为它是一部好电影。/名词:凯文。&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Kevin has seen《LEON》seveal times,because it is a good film. 
凯文已经看过《这个杀手不太冷》几次了，因为它是一部好电影。/名词:凯文。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>实战</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token class-name">CharSequence</span> input <span class="token operator">=</span> <span class="token string">&quot;boo:and:foo&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">Pattern</span> p <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">&quot;o&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    arr <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">printArr</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {&quot;b&quot;,&quot;&quot;,&quot;:and:f&quot;,&quot;&quot;,&quot;&quot;}，共有5个元素</span>
    arr <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">printArr</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {&quot;b&quot;,&quot;o:and:foo&quot;}，共有2个元素</span>
    arr <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">printArr</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {&quot;b&quot;,&quot;&quot;,&quot;:and:f&quot;,&quot;&quot;,&quot;&quot;}，共有5个元素</span>
    arr <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">printArr</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {&quot;b&quot;,&quot;&quot;,&quot;:and:f&quot;}，共有3个元素</span>
<span class="token punctuation">}</span>

<span class="token comment">// 打印String数组</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">printArr</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> length <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token class-name">StringBuffer</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;{&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;\\&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;\\&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;，共有&quot;</span> <span class="token operator">+</span> length <span class="token operator">+</span> <span class="token string">&quot;个元素&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>当limit=-2时，应用模式的次数不受限制且数组可以为任意长度；推测模式应用4次，数组的长度为5，数组为{“b”,“”,“:and:f”,“”,“”}。</li><li>当limit=2时，模式至多应用1次，数组的长度不大于 2，且第二个元素包含除最后的匹配定界符之外的所有输入；推测模式应用1次，数组的长度为2，数组为{“b”,“o:and:foo”}。</li><li>当limit=7时，模式至多应用6次，数组的长度不大于 7；推测模式应用4次，数组的长度为5，数组为{“b”,“”,“:and:f”,“”,“”}。</li><li>当limit=0时，应用模式的次数不受限制，数组可以为任意长度，并且将丢弃尾部空字符串；推测模式应用4次，数组的长度为3，数组为{“b”,“”,“:and:f”}。</li></ul><h3 id="_2-7-matches-string-regex-charsequence-input" tabindex="-1"><a class="header-anchor" href="#_2-7-matches-string-regex-charsequence-input" aria-hidden="true">#</a> 2.7 matches(String regex,CharSequence input)</h3><p>此方法是一个静态方法,用于快速匹配字符串,该方法适合用于只匹配一次,且匹配全部字符串。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\d+&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;2223&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回true </span>
<span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\d+&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;2223aa&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回false,需要匹配到所有字符串才能返回true,这里aa不能匹配到 </span>
<span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\d+&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;22bb23&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回false,需要匹配到所有字符串才能返回true,这里bb不能匹配到 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-8-matcher-charsequence-input" tabindex="-1"><a class="header-anchor" href="#_2-8-matcher-charsequence-input" aria-hidden="true">#</a> 2.8 matcher(CharSequence input)</h3><p>返回一个Matcher对象，Pattern类只能做一些简单的匹配操作,要想得到更强更便捷的正则匹配操作,那就需要将Pattern与Matcher一起合作.Matcher类提供了对正则表达式的分组支持,以及对正则表达式的多次匹配支持。</p><p>Matcher类的构造方法也是私有的,不能随意创建,只能通过Pattern.matcher(CharSequence input)方法得到该类的实例。</p><p>Pattern.matches(String regex,CharSequence input),它与下面这段代码等价 Pattern.compile(regex).matcher(input).matches() 。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Pattern</span> p<span class="token operator">=</span><span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\d+&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token class-name">Matcher</span> m<span class="token operator">=</span>p<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span><span class="token string">&quot;22bb23&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
m<span class="token punctuation">.</span><span class="token function">pattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回p 也就是返回该Matcher对象是由哪个Pattern对象的创建的 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（1）实例</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Pattern</span> p<span class="token operator">=</span><span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">&quot;([a-z]+)(\\\\d+)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token class-name">Matcher</span> m<span class="token operator">=</span>p<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span><span class="token string">&quot;aaa2223bb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
m<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//匹配aaa2223 </span>
m<span class="token punctuation">.</span><span class="token function">groupCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//返回2,因为有2组 </span>
m<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//返回0 返回第一组匹配到的子字符串在字符串中的索引号 </span>
m<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//返回3 </span>
m<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//返回3 返回第一组匹配到的子字符串的最后一个字符在字符串中的索引位置. </span>
m<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//返回7 </span>
m<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//返回aaa,返回第一组匹配到的子字符串 </span>
m<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//返回2223,返回第二组匹配到的子字符串</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、matcher类详解" tabindex="-1"><a class="header-anchor" href="#三、matcher类详解" aria-hidden="true">#</a> 三、Matcher类详解</h2><p>Matcher对象是一个状态机器，它依据Pattern对象做为匹配模式对字符串展开匹配检查，此类的实例用于多个并发线程是不安全的。</p><p>一个Matcher实例是被用来对目标字符串进行基于既有模式（也就是一个给定的Pattern所编译的正则表达式）进行匹配查找的，所有往Matcher的输入都是通过CharSequence接口提供的，这样做的目的在于可以支持对从多元化的数据源所提供的数据进行匹配工作。</p><h3 id="_3-1-获取matcher实例" tabindex="-1"><a class="header-anchor" href="#_3-1-获取matcher实例" aria-hidden="true">#</a> 3.1 获取Matcher实例</h3><p>Matcher类的构造方法也是私有的,不能随意创建,只能通过Pattern.matcher(CharSequence input)方法得到该类的实例。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Matcher</span><span class="token punctuation">(</span><span class="token class-name">Pattern</span> parent<span class="token punctuation">,</span> <span class="token class-name">CharSequence</span> text<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>parentPattern <span class="token operator">=</span> parent<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>text <span class="token operator">=</span> text<span class="token punctuation">;</span>

    <span class="token comment">// Allocate state storage</span>
    <span class="token keyword">int</span> parentGroupCount <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span>capturingGroupCount<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    groups <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>parentGroupCount <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    locals <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>parent<span class="token punctuation">.</span>localCount<span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token comment">// Put fields into initial states</span>
    <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实例</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Pattern</span> p<span class="token operator">=</span><span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\d+&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token class-name">Matcher</span> m<span class="token operator">=</span>p<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span><span class="token string">&quot;22bb23&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
m<span class="token punctuation">.</span><span class="token function">pattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回p 也就是返回该Matcher对象是由哪个Pattern对象的创建的 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.2</p>`,82),o=[e];function c(l,u){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","java-regex.html.vue"]]);export{k as default};
