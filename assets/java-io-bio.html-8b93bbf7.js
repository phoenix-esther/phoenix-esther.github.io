import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-e53dd85b.js";const p={},e=t(`<h1 id="深入分析-java-io-二-bio" tabindex="-1"><a class="header-anchor" href="#深入分析-java-io-二-bio" aria-hidden="true">#</a> 深入分析 Java IO （二）BIO</h1><h2 id="最原始bio" tabindex="-1"><a class="header-anchor" href="#最原始bio" aria-hidden="true">#</a> 最原始BIO</h2><p>网络编程的基本模型是C/S模型，即两个进程间的通信。</p><p>服务端提供IP和监听端口，客户端通过连接操作想服务端监听的地址发起连接请求，通过三次握手连接，如果连接成功建立，双方就可以通过套接字进行通信。</p><p>传统的同步阻塞模型开发中，ServerSocket负责绑定IP地址，启动监听端口；Socket负责发起连接操作。连接成功后，双方通过输入和输出流进行同步阻塞式通信。 最原始BIO通信模型图：</p><p><img src="http://image.skjava.com/article/group/common-serial/202202131612423191.png" alt="202202131612423191.png"></p><h3 id="存在的问题" tabindex="-1"><a class="header-anchor" href="#存在的问题" aria-hidden="true">#</a> 存在的问题：</h3><ul><li>同一时间，服务器只能接受来自于客户端A的请求信息；虽然客户端A和客户端B的请求是同时进行的，但客户端B发送的请求信息只能等到服务器接受完A的请求数据后，才能被接受。(acceptor只有在接受完client1的请求后才能接受client2的请求)</li><li>由于服务器一次只能处理一个客户端请求，当处理完成并返回后（或者异常时），才能进行第二次请求的处理。很显然，这样的处理方式在高并发的情况下，是不能采用的。</li></ul><h2 id="一请求一线程bio" tabindex="-1"><a class="header-anchor" href="#一请求一线程bio" aria-hidden="true">#</a> 一请求一线程BIO</h2><p>那有没有方法改进呢? ，答案是有的。改进后BIO通信模型图：</p><p><img src="http://image.skjava.com/article/group/common-serial/202202131612429802.png" alt="202202131612429802.png"></p><p>此种BIO通信模型的服务端，通常由一个独立的Acceptor线程负责监听客户端的连接，它接收到客户端连接请求之后为每个客户端创建一个新的线程进行链路处理没处理完成后，通过输出流返回应答给客户端，线程销毁。即典型的一请求一应答通宵模型。</p><h3 id="代码演示" tabindex="-1"><a class="header-anchor" href="#代码演示" aria-hidden="true">#</a> 代码演示</h3><p>服务端：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>               <span class="token keyword">package</span> <span class="token namespace">demo<span class="token punctuation">.</span>com<span class="token punctuation">.</span>test<span class="token punctuation">.</span>io<span class="token punctuation">.</span>bio</span><span class="token punctuation">;</span>
            
               <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>
               <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span></span><span class="token punctuation">;</span>
               <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">OutputStream</span></span><span class="token punctuation">;</span>
               <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">ServerSocket</span></span><span class="token punctuation">;</span>
               <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">Socket</span></span><span class="token punctuation">;</span>
            
               <span class="token keyword">import</span> <span class="token import"><span class="token namespace">demo<span class="token punctuation">.</span>com<span class="token punctuation">.</span>test<span class="token punctuation">.</span>io<span class="token punctuation">.</span>nio<span class="token punctuation">.</span></span><span class="token class-name">NioSocketServer</span></span><span class="token punctuation">;</span>
            
               <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BioSocketServer</span> <span class="token punctuation">{</span>
                   <span class="token comment">//默认的端口号  </span>
                   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_PORT</span> <span class="token operator">=</span> <span class="token number">8083</span><span class="token punctuation">;</span>  
            
                   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                       <span class="token class-name">ServerSocket</span> serverSocket <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                       <span class="token keyword">try</span> <span class="token punctuation">{</span>
                           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;监听来自于&quot;</span><span class="token operator">+</span><span class="token constant">DEFAULT_PORT</span><span class="token operator">+</span><span class="token string">&quot;的端口信息&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                           serverSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_PORT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                           <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                               <span class="token class-name">Socket</span> socket <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                               <span class="token class-name">SocketServerThread</span> socketServerThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SocketServerThread</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">;</span>
                               <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>socketServerThread<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                           <span class="token punctuation">}</span>
                       <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            
                       <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                           <span class="token keyword">if</span><span class="token punctuation">(</span>serverSocket <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                               <span class="token keyword">try</span> <span class="token punctuation">{</span>
                                   serverSocket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                               <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                   <span class="token comment">// TODO Auto-generated catch block</span>
                                   e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                               <span class="token punctuation">}</span>
                           <span class="token punctuation">}</span>
                       <span class="token punctuation">}</span>
            
                        <span class="token comment">//这个wait不涉及到具体的实验逻辑，只是为了保证守护线程在启动所有线程后，进入等待状态</span>
                       <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">NioSocketServer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                           <span class="token keyword">try</span> <span class="token punctuation">{</span>
                               <span class="token class-name">BioSocketServer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                           <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                               <span class="token comment">// TODO Auto-generated catch block</span>
                               e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                           <span class="token punctuation">}</span>
                       <span class="token punctuation">}</span>
                   <span class="token punctuation">}</span>
               <span class="token punctuation">}</span>  
            
               <span class="token keyword">class</span> <span class="token class-name">SocketServerThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>
                   <span class="token keyword">private</span> <span class="token class-name">Socket</span> socket<span class="token punctuation">;</span>
                   <span class="token keyword">public</span> <span class="token class-name">SocketServerThread</span> <span class="token punctuation">(</span><span class="token class-name">Socket</span> socket<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                       <span class="token keyword">this</span><span class="token punctuation">.</span>socket <span class="token operator">=</span> socket<span class="token punctuation">;</span>
                   <span class="token punctuation">}</span>
                   <span class="token annotation punctuation">@Override</span>
                   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                       <span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                       <span class="token class-name">OutputStream</span> out <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                       <span class="token keyword">try</span> <span class="token punctuation">{</span>
                           <span class="token comment">//下面我们收取信息</span>
                           in <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                           out <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                           <span class="token class-name">Integer</span> sourcePort <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                           <span class="token keyword">int</span> maxLen <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>
                           <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> contextBytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>maxLen<span class="token punctuation">]</span><span class="token punctuation">;</span>
                           <span class="token comment">//使用线程，同样无法解决read方法的阻塞问题，</span>
                           <span class="token comment">//也就是说read方法处同样会被阻塞，直到操作系统有数据准备好</span>
                           <span class="token keyword">int</span> realLen <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>contextBytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> maxLen<span class="token punctuation">)</span><span class="token punctuation">;</span>
                           <span class="token comment">//读取信息</span>
                           <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>contextBytes <span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">,</span> realLen<span class="token punctuation">)</span><span class="token punctuation">;</span>
            
                           <span class="token comment">//下面打印信息</span>
                           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;服务器收到来自于端口：&quot;</span> <span class="token operator">+</span> sourcePort <span class="token operator">+</span> <span class="token string">&quot;的信息：&quot;</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
            
                           <span class="token comment">//下面开始发送信息</span>
                           out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;回发响应信息！&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                       <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                       <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                           <span class="token comment">//试图关闭</span>
                           <span class="token keyword">try</span> <span class="token punctuation">{</span>
                               <span class="token keyword">if</span><span class="token punctuation">(</span>in <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                   in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                               <span class="token punctuation">}</span>
                               <span class="token keyword">if</span><span class="token punctuation">(</span>out <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                   out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                               <span class="token punctuation">}</span>
                               <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>socket <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                   <span class="token keyword">this</span><span class="token punctuation">.</span>socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                               <span class="token punctuation">}</span>
                           <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                           <span class="token punctuation">}</span>
                       <span class="token punctuation">}</span>
                   <span class="token punctuation">}</span>
               <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>客户端：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>               <span class="token keyword">package</span> <span class="token namespace">demo<span class="token punctuation">.</span>com<span class="token punctuation">.</span>test<span class="token punctuation">.</span>io<span class="token punctuation">.</span>bio</span><span class="token punctuation">;</span>
            
               <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>
               <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span></span><span class="token punctuation">;</span>
               <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">OutputStream</span></span><span class="token punctuation">;</span>
               <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">Socket</span></span><span class="token punctuation">;</span>
               <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">URLDecoder</span></span><span class="token punctuation">;</span>
               <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">CountDownLatch</span></span><span class="token punctuation">;</span>
            
               <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BioSocketClient</span><span class="token punctuation">{</span>
                   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
                       <span class="token class-name">Integer</span> clientNumber <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
                       <span class="token class-name">CountDownLatch</span> countDownLatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span>clientNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>
            
                       <span class="token comment">// 分别开始启动这20个客户端,并发访问</span>
                       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> clientNumber<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">,</span> countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                           <span class="token class-name">ClientRequestThread</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClientRequestThread</span><span class="token punctuation">(</span>countDownLatch<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
                           <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                       <span class="token punctuation">}</span>
            
                       <span class="token comment">// 这个wait不涉及到具体的实验逻辑，只是为了保证守护线程在启动所有线程后，进入等待状态</span>
                       <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">BioSocketClient</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                           <span class="token class-name">BioSocketClient</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                       <span class="token punctuation">}</span>
                   <span class="token punctuation">}</span>
               <span class="token punctuation">}</span>
            
            
            
               <span class="token doc-comment comment">/**
                * 一个ClientRequestThread线程模拟一个客户端请求。
                * <span class="token keyword">@author</span> keep_trying
                */</span>
               <span class="token keyword">class</span> <span class="token class-name">ClientRequestThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>
            
            
                   <span class="token keyword">private</span> <span class="token class-name">CountDownLatch</span> countDownLatch<span class="token punctuation">;</span>
            
                   <span class="token doc-comment comment">/**
                    * 这个线程的编号
                    * <span class="token keyword">@param</span> <span class="token parameter">countDownLatch</span>
                    */</span>
                   <span class="token keyword">private</span> <span class="token class-name">Integer</span> clientIndex<span class="token punctuation">;</span>
            
                   <span class="token doc-comment comment">/**
                    * countDownLatch是java提供的同步计数器。
                    * 当计数器数值减为0时，所有受其影响而等待的线程将会被激活。这样保证模拟并发请求的真实性
                    * <span class="token keyword">@param</span> <span class="token parameter">countDownLatch</span>
                    */</span>
                   <span class="token keyword">public</span> <span class="token class-name">ClientRequestThread</span><span class="token punctuation">(</span><span class="token class-name">CountDownLatch</span> countDownLatch <span class="token punctuation">,</span> <span class="token class-name">Integer</span> clientIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                       <span class="token keyword">this</span><span class="token punctuation">.</span>countDownLatch <span class="token operator">=</span> countDownLatch<span class="token punctuation">;</span>
                       <span class="token keyword">this</span><span class="token punctuation">.</span>clientIndex <span class="token operator">=</span> clientIndex<span class="token punctuation">;</span>
                   <span class="token punctuation">}</span>
            
                   <span class="token annotation punctuation">@Override</span>
                   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                       <span class="token class-name">Socket</span> socket <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                       <span class="token class-name">OutputStream</span> clientRequest <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                       <span class="token class-name">InputStream</span> clientResponse <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            
                       <span class="token keyword">try</span> <span class="token punctuation">{</span>
                           socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">&quot;localhost&quot;</span><span class="token punctuation">,</span><span class="token number">8083</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                           clientRequest <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                           clientResponse <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            
                           <span class="token comment">//等待，直到SocketClientDaemon完成所有线程的启动，然后所有线程一起发送请求</span>
                           <span class="token keyword">this</span><span class="token punctuation">.</span>countDownLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            
                           <span class="token comment">//发送请求信息</span>
                           clientRequest<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">&quot;这是第&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>clientIndex <span class="token operator">+</span> <span class="token string">&quot; 个客户端的请求。 over&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                           clientRequest<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            
                           <span class="token comment">//在这里等待，直到服务器返回信息</span>
                          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;第&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>clientIndex <span class="token operator">+</span> <span class="token string">&quot;个客户端的请求发送完成，等待服务器返回信息&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                           <span class="token keyword">int</span> maxLen <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>
                           <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> contextBytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>maxLen<span class="token punctuation">]</span><span class="token punctuation">;</span>
                           <span class="token keyword">int</span> realLen<span class="token punctuation">;</span>
                           <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
                           <span class="token comment">//程序执行到这里，会一直等待服务器返回信息（注意，前提是in和out都不能close，如果close了就收不到服务器的反馈了）</span>
                           <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>realLen <span class="token operator">=</span> clientResponse<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>contextBytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> maxLen<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                               message <span class="token operator">+=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>contextBytes <span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">,</span> realLen<span class="token punctuation">)</span><span class="token punctuation">;</span>
                           <span class="token punctuation">}</span>
                           <span class="token comment">//String messageEncode = new String(message , &quot;UTF-8&quot;);</span>
                           message <span class="token operator">=</span> <span class="token class-name">URLDecoder</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;第&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>clientIndex <span class="token operator">+</span> <span class="token string">&quot;个客户端接收到来自服务器的信息:&quot;</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
                       <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            
                       <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                           <span class="token keyword">try</span> <span class="token punctuation">{</span>
                               <span class="token keyword">if</span><span class="token punctuation">(</span>clientRequest <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                   clientRequest<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                               <span class="token punctuation">}</span>
                               <span class="token keyword">if</span><span class="token punctuation">(</span>clientResponse <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                   clientResponse<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                               <span class="token punctuation">}</span>
                           <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            
                           <span class="token punctuation">}</span>
                       <span class="token punctuation">}</span>
                   <span class="token punctuation">}</span>
               <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="存在的问题-1" tabindex="-1"><a class="header-anchor" href="#存在的问题-1" aria-hidden="true">#</a> 存在的问题：</h3><ul><li>虽然在服务器端，请求的处理交给了一个独立线程进行，但是操作系统通知accept()的方式还是单个的。也就是，实际上是服务器接收到数据报文后的“业务处理过程”可以多线程，但是数据报文的接受还是需要一个一个的来(acceptor只有在接受完client1的请求后才能接受client2的请求)，下文会验证。</li><li>在linux系统中，可以创建的线程是有限的。我们可以通过cat /proc/sys/kernel/threads-max 命令查看可以创建的最大线程数。当然这个值是可以更改的，但是线程越多，CPU切换所需的时间也就越长，用来处理真正业务的需求也就越少。</li><li>创建一个线程是有较大的资源消耗的。JVM创建一个线程的时候，即使这个线程不做任何的工作，JVM都会分配一个堆栈空间。这个空间的大小默认为128K，您可以通过-Xss参数进行调整。</li><li>另外，如果您的应用程序大量使用长连接的话，线程是不会关闭的。这样系统资源的消耗更容易失控。</li></ul><h2 id="伪异步i-o编程" tabindex="-1"><a class="header-anchor" href="#伪异步i-o编程" aria-hidden="true">#</a> 伪异步I/O编程</h2><p>为了改进这种一连接一线程的模型，我们可以使用线程池来管理这些线程，实现1个或多个线程处理N个客户端的模型（但是底层还是使用的同步阻塞I/O），通常被称为“伪异步I/O模型“。</p><p>伪异步I/O模型图：</p><p><img src="http://image.skjava.com/article/group/common-serial/202202131612436093.png" alt="202202131612436093.png"></p><h2 id="代码演示-1" tabindex="-1"><a class="header-anchor" href="#代码演示-1" aria-hidden="true">#</a> 代码演示</h2><p>只给出服务端，客户端和上面相同</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>               <span class="token keyword">package</span> <span class="token namespace">demo<span class="token punctuation">.</span>com<span class="token punctuation">.</span>test<span class="token punctuation">.</span>io<span class="token punctuation">.</span>bio</span><span class="token punctuation">;</span>
            
               <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>
               <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span></span><span class="token punctuation">;</span>
               <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">OutputStream</span></span><span class="token punctuation">;</span>
               <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">ServerSocket</span></span><span class="token punctuation">;</span>
               <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">Socket</span></span><span class="token punctuation">;</span>
               <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutorService</span></span><span class="token punctuation">;</span>
               <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Executors</span></span><span class="token punctuation">;</span>
            
               <span class="token keyword">import</span> <span class="token import"><span class="token namespace">demo<span class="token punctuation">.</span>com<span class="token punctuation">.</span>test<span class="token punctuation">.</span>io<span class="token punctuation">.</span>nio<span class="token punctuation">.</span></span><span class="token class-name">NioSocketServer</span></span><span class="token punctuation">;</span>
            
               <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BioSocketServerThreadPool</span> <span class="token punctuation">{</span>
                   <span class="token comment">//默认的端口号  </span>
                   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_PORT</span> <span class="token operator">=</span> <span class="token number">8083</span><span class="token punctuation">;</span>  
                   <span class="token comment">//线程池 懒汉式的单例  </span>
                   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
            
                   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                       <span class="token class-name">ServerSocket</span> serverSocket <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                       <span class="token keyword">try</span> <span class="token punctuation">{</span>
                           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;监听来自于&quot;</span><span class="token operator">+</span><span class="token constant">DEFAULT_PORT</span><span class="token operator">+</span><span class="token string">&quot;的端口信息&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                           serverSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_PORT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                           <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                               <span class="token class-name">Socket</span> socket <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                               <span class="token comment">//当然业务处理过程可以交给一个线程（这里可以使用线程池）,并且线程的创建是很耗资源的。</span>
                               <span class="token comment">//最终改变不了.accept()只能一个一个接受socket的情况,并且被阻塞的情况</span>
                               <span class="token class-name">SocketServerThreadPool</span> socketServerThreadPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SocketServerThreadPool</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">;</span>
                               executorService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>socketServerThreadPool<span class="token punctuation">)</span><span class="token punctuation">;</span>
                           <span class="token punctuation">}</span>
                       <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            
                       <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                           <span class="token keyword">if</span><span class="token punctuation">(</span>serverSocket <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                               <span class="token keyword">try</span> <span class="token punctuation">{</span>
                                   serverSocket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                               <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                   <span class="token comment">// TODO Auto-generated catch block</span>
                                   e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                               <span class="token punctuation">}</span>
                           <span class="token punctuation">}</span>
                       <span class="token punctuation">}</span>
            
                        <span class="token comment">//这个wait不涉及到具体的实验逻辑，只是为了保证守护线程在启动所有线程后，进入等待状态</span>
                       <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">NioSocketServer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                           <span class="token keyword">try</span> <span class="token punctuation">{</span>
                               <span class="token class-name">BioSocketServerThreadPool</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                           <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                               <span class="token comment">// TODO Auto-generated catch block</span>
                               e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                           <span class="token punctuation">}</span>
                       <span class="token punctuation">}</span>
                   <span class="token punctuation">}</span>
               <span class="token punctuation">}</span>  
            
               <span class="token keyword">class</span> <span class="token class-name">SocketServerThreadPool</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>
                   <span class="token keyword">private</span> <span class="token class-name">Socket</span> socket<span class="token punctuation">;</span>
                   <span class="token keyword">public</span> <span class="token class-name">SocketServerThreadPool</span> <span class="token punctuation">(</span><span class="token class-name">Socket</span> socket<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                       <span class="token keyword">this</span><span class="token punctuation">.</span>socket <span class="token operator">=</span> socket<span class="token punctuation">;</span>
                   <span class="token punctuation">}</span>
                   <span class="token annotation punctuation">@Override</span>
                   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                       <span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                       <span class="token class-name">OutputStream</span> out <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                       <span class="token keyword">try</span> <span class="token punctuation">{</span>
                           <span class="token comment">//下面我们收取信息</span>
                           in <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                           out <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                           <span class="token class-name">Integer</span> sourcePort <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                           <span class="token keyword">int</span> maxLen <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>
                           <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> contextBytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>maxLen<span class="token punctuation">]</span><span class="token punctuation">;</span>
                           <span class="token comment">//使用线程，同样无法解决read方法的阻塞问题，</span>
                           <span class="token comment">//也就是说read方法处同样会被阻塞，直到操作系统有数据准备好</span>
                           <span class="token keyword">int</span> realLen <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>contextBytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> maxLen<span class="token punctuation">)</span><span class="token punctuation">;</span>
                           <span class="token comment">//读取信息</span>
                           <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>contextBytes <span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">,</span> realLen<span class="token punctuation">)</span><span class="token punctuation">;</span>
            
                           <span class="token comment">//下面打印信息</span>
                           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;服务器收到来自于端口：&quot;</span> <span class="token operator">+</span> sourcePort <span class="token operator">+</span> <span class="token string">&quot;的信息：&quot;</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
            
                           <span class="token comment">//下面开始发送信息</span>
                           out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;回发响应信息！&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                       <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                       <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                           <span class="token comment">//试图关闭</span>
                           <span class="token keyword">try</span> <span class="token punctuation">{</span>
                               <span class="token keyword">if</span><span class="token punctuation">(</span>in <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                   in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                               <span class="token punctuation">}</span>
                               <span class="token keyword">if</span><span class="token punctuation">(</span>out <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                   out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                               <span class="token punctuation">}</span>
                               <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>socket <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                   <span class="token keyword">this</span><span class="token punctuation">.</span>socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                               <span class="token punctuation">}</span>
                           <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                           <span class="token punctuation">}</span>
                       <span class="token punctuation">}</span>
                   <span class="token punctuation">}</span>
               <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、服务器端的执行效果" tabindex="-1"><a class="header-anchor" href="#二、服务器端的执行效果" aria-hidden="true">#</a> 二、服务器端的执行效果</h2><p><img src="http://image.skjava.com/article/group/common-serial/202202131612442254.png" alt="202202131612442254.png"></p><p>在 Socket socket = serverSocket.accept(); 处打了断点，有20个客户端同时发出请求，可服务端还是一个一个的处理，其它线程都处于阻塞状态</p><h2 id="三、阻塞的问题根源" tabindex="-1"><a class="header-anchor" href="#三、阻塞的问题根源" aria-hidden="true">#</a> 三、阻塞的问题根源</h2><p>那么重点的问题并不是“是否使用了多线程、或是线程池”，而是为什么accept()、read()方法会被阻塞。API文档中对于 serverSocket.accept() 方法的使用描述：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code>               Listens for a connection to be made to this socket and accepts it. The method blocks until a connection is made.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>那么我们首先来看看为什么serverSocket.accept()会被阻塞。这里涉及到阻塞式同步IO的工作原理：</p><p><img src="http://image.skjava.com/article/group/common-serial/202202131612456865.png" alt="202202131612456865.png"></p><p>服务器线程发起一个accept动作，询问操作系统 是否有新的socket套接字信息从端口xx发送过来。</p><p><strong>注意，是询问操作系统</strong> 。也就是说socket套接字的IO模式支持是基于操作系统的，那么自然 同步IO/异步IO的支持就是需要操作系统级别的了。如下图：</p><p><img src="http://image.skjava.com/article/group/common-serial/202202131612466286.png" alt="202202131612466286.png"></p><p>如果操作系统没有发现有套接字从指定的端口xx来，那么操作系统就会等待。这样serverSocket.accept()方法就会一直等待。这就是为什么accept()方法为什么会阻塞： <strong>它内部的实现是使用的操作系统级别的同步IO。</strong></p><ul><li>阻塞IO 和 非阻塞IO 这两个概念是程序级别的。主要描述的是程序请求操作系统IO操作后，如果IO资源没有准备好，那么程序该如何处理的问题：前者等待；后者继续执行（并且使用线程一直轮询，直到有IO资源准备好了）</li><li>同步IO 和非同步IO 这两个概念是操作系统级别的。主要描述的是操作系统在收到程序请求IO操作后，如果IO资源没有准备好，该如何处理相应程序的问题：前者不响应，直到IO资源准备好以后；后者返回一个标记（好让程序和自己知道以后的数据往哪里通知），当IO资源准备好以后，再用事件机制返回给程序。</li></ul>`,39),c=[e];function o(l,i){return s(),a("div",null,c)}const r=n(p,[["render",o],["__file","java-io-bio.html.vue"]]);export{r as default};
