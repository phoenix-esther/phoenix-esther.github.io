import{_ as a,V as e,W as s,a0 as t}from"./framework-5dde3bca.js";const r="/assets/20230131100501-198eb117.png",i="/assets/20230131103301-3760fe14.png",p="/assets/image-20230131103504513-d393059b.png",n="/assets/image-20230131103804423-7bdbe4f1.png",o="/assets/image-20230131104349589-168f553f.png",c="/assets/image-20230131104622640-168dfdec.png",d="/assets/image-20230131110715141-688ea603.png",h={},g=t('<h1 id="kafka-概述" tabindex="-1"><a class="header-anchor" href="#kafka-概述" aria-hidden="true">#</a> Kafka 概述</h1><h2 id="一、kafka的简单介绍" tabindex="-1"><a class="header-anchor" href="#一、kafka的简单介绍" aria-hidden="true">#</a> 一、Kafka的简单介绍</h2><h3 id="_1-1-kakfa定义" tabindex="-1"><a class="header-anchor" href="#_1-1-kakfa定义" aria-hidden="true">#</a> 1.1 Kakfa定义</h3><p><strong>Kafka传统定义：</strong> Kafka是一个分布式的基于发布/订阅模式的消息队列（MessageQueue），主要应用于大数据实时处理领域。</p><p><strong>发布订阅：</strong> 消息的发布者不会将消息直接发送给特定的订阅者，而是将发布的消息分为不同的类别，订阅者只接收感兴趣的消息。</p><p><strong>Kafka最新定义 ：</strong> Kafka是 一个开源的 分 布式事件流平台 （Event StreamingPlatform），被数千家公司用于高性能数据管道、流分析、数据集成和关键任务应用。</p><p><img src="'+r+'" alt="20230131100501"></p><p>如上图所示的一个流程，首先通过网站首页浏览数据，页面会做一个买点，进行日志的记录，后台会通过flume来将日志发送到kafka集群，hadoop从kafka中获取数据进行消费。由于hadoop的数据处理能力有限，kafka集群在这里起到一个削峰的作用。</p><h3 id="_1-2-消息队列" tabindex="-1"><a class="header-anchor" href="#_1-2-消息队列" aria-hidden="true">#</a> 1.2 消息队列</h3><p>目前企业中比较见的消息队列产品主要有 Kafka、ActiveMQ 、RabbitMQ 、RocketMQ 等。在大数据场景主要采用 Kafka 作为消息队列。在 JavaEE 开发中主要采用 ActiveMQ、RabbitMQ、RocketMQ。</p><h4 id="_1-2-1-传统消息队列的应用场景" tabindex="-1"><a class="header-anchor" href="#_1-2-1-传统消息队列的应用场景" aria-hidden="true">#</a> 1.2.1 传统消息队列的应用场景</h4><p>传统的消息队列的主要应用场景包括：缓存/消峰、解耦和异步通信。</p><p><strong>缓冲/消峰：</strong></p><p>有助于控制和优化数据流经过系统的速度，解决生产消息和消费消息的处理速度不一致的情况。</p><p><img src="'+i+'" alt="20230131103301"></p><p><strong>解耦：</strong></p><p>允许你独立的扩展或修改两边的处理过程，只要确保它们遵守同样的接口约束。</p><p><img src="'+p+'" alt="image-20230131103504513"></p><p><strong>异步通信：</strong></p><p>允许用户把一个消息放入队列，但并不立即处理它，然后在需要的时候再去处理它们。</p><p><img src="'+n+'" alt="image-20230131103804423"></p><h4 id="_1-2-2-消息队列的两种模式" tabindex="-1"><a class="header-anchor" href="#_1-2-2-消息队列的两种模式" aria-hidden="true">#</a> 1.2.2 消息队列的两种模式</h4><p><strong>点对点模式：</strong></p><ul><li>消费者主动拉去数据，消息收到后清除消息</li></ul><p><img src="'+o+'" alt="image-20230131104349589"></p><p><strong>发布\\订阅模式:</strong></p><ul><li><p>可以有多个topic主题（浏览、点赞、收藏、评论等）</p></li><li><p>消费者消费数据之后，不删除数据</p></li><li><p>每个消费者相互独立，都可以消费到数据</p></li></ul><p><img src="'+c+'" alt="image-20230131104622640"></p><p>1.3 Kafka 的基础架构</p><p><img src="'+d+'" alt="image-20230131110715141"></p>',30),f=[g];function _(k,l){return e(),s("div",null,f)}const u=a(h,[["render",_],["__file","kafka-overview.html.vue"]]);export{u as default};
