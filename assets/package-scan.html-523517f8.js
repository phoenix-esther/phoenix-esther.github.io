import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as i,a as n,b as s,d as t,e}from"./app-e53dd85b.js";const l="/assets/up-3ed1cf4bd6fc2ef3f569376093a6462987d-08f5a3de.png",u="/assets/up-595687d3a766ffaacf69f31216a5b09f9d5-0d43775f.png",r="/assets/up-9df07587a3a8191231da87fe21d80052357-b0b79e82.png",d="/assets/up-f5c7e8768b92b7a4303c4e1beb58863fe03-1fe5c063.png",k="/assets/up-38b493e0b4b7b73dda5f06f371b66f16d3e-5db2057f.png",m="/assets/up-930a4e6844efd3f9f52c6d3f4e13a200337-2c281dc7.png",v="/assets/up-77271c438dde39f2bc905aa9f2cf9fb73d8-dab25c11.png",b="/assets/up-f31efb6252beb2108dc0ce93d482666f8d0-b1511075.png",g="/assets/up-a8ce5d11b4b02907f0ff497c6369a1c1dde-01a30d57.png",f="/assets/up-3e46b2ece5ddb2328342a469dc7dd554d9e-607a1c34.png",h="/assets/up-f8ff2e4071ba3941e2a0664f6e478b78961-1324a662.png",y={},R=n("h1",{id:"springframework-包扫描流程",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#springframework-包扫描流程","aria-hidden":"true"},"#"),s(" SpringFramework 包扫描流程")],-1),w=n("p",null,[n("img",{src:l,alt:"img"})],-1),C={href:"https://my.oschina.net/funcy/blog/4608767",target:"_blank",rel:"noopener noreferrer"},P=n("code",null,"applicationContext",-1),M=e(`<p>依旧是 <code>AnnotationConfigApplicationContext</code> 的构造方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> basePackages<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//对传入的包进行扫描，扫描完成后，会得到一个 BeanDefinition 的集合</span>
    <span class="token function">scan</span><span class="token punctuation">(</span>basePackages<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这次我们将目光放在 <code>scan(basePackages);</code> 上，进入该方法：</p><blockquote><p>AnnotationConfigApplicationContext#scan</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">scan</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> basePackages<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notEmpty</span><span class="token punctuation">(</span>basePackages<span class="token punctuation">,</span> <span class="token string">&quot;At least one base package must be specified&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token comment">// 这里的scanner对象就是在this()中创建的</span>
     <span class="token keyword">this</span><span class="token punctuation">.</span>scanner<span class="token punctuation">.</span><span class="token function">scan</span><span class="token punctuation">(</span>basePackages<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个方法关键代码是 <code>this.scanner.scan(basePackages);</code>，这个 <code>scanner</code> 就是在 <code>this()</code> 中创建的对象：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotatedBeanDefinitionReader</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// scanner 就是在这里创建的</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathBeanDefinitionScanner</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>继续追踪，这里我们对不重要的方法仅给出调用链，重点关注扫描包的过程：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">AnnotationConfigApplicationContext</span>#<span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
 <span class="token operator">|</span><span class="token operator">-</span><span class="token class-name">AnnotationConfigApplicationContext</span>#scan
  <span class="token operator">|</span><span class="token operator">-</span><span class="token class-name">ClassPathBeanDefinitionScanner</span>#scan
   <span class="token operator">|</span><span class="token operator">-</span><span class="token class-name">ClassPathBeanDefinitionScanner</span>#doScan
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ClassPathBeanDefinitionScanner#doScan</code> 代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BeanDefinitionHolder</span><span class="token punctuation">&gt;</span></span> <span class="token function">doScan</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> basePackages<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notEmpty</span><span class="token punctuation">(</span>basePackages<span class="token punctuation">,</span> <span class="token string">&quot;At least one base package must be specified&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BeanDefinitionHolder</span><span class="token punctuation">&gt;</span></span> beanDefinitions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//遍历需要扫描的包路径</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> basePackage <span class="token operator">:</span> basePackages<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//获取所有符合条件的BeanDefinition</span>
        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BeanDefinition</span><span class="token punctuation">&gt;</span></span> candidates <span class="token operator">=</span> <span class="token function">findCandidateComponents</span><span class="token punctuation">(</span>basePackage<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">BeanDefinition</span> candidate <span class="token operator">:</span> candidates<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//绑定BeanDefinition与Scope</span>
            <span class="token class-name">ScopeMetadata</span> scopeMetadata <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scopeMetadataResolver<span class="token punctuation">.</span><span class="token function">resolveScopeMetadata</span><span class="token punctuation">(</span>candidate<span class="token punctuation">)</span><span class="token punctuation">;</span>
            candidate<span class="token punctuation">.</span><span class="token function">setScope</span><span class="token punctuation">(</span>scopeMetadata<span class="token punctuation">.</span><span class="token function">getScopeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//查看是否配置类是否指定bean的名称，如没指定则使用类名首字母小写</span>
            <span class="token class-name">String</span> beanName <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>beanNameGenerator<span class="token punctuation">.</span><span class="token function">generateBeanName</span><span class="token punctuation">(</span>candidate<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//下面两个if是处理lazy、Autowire、DependencyOn、initMethod、enforceInitMethod、destroyMethod、</span>
            <span class="token comment">// enforceDestroyMethod、Primary、Role、Description这些逻辑的</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>candidate <span class="token keyword">instanceof</span> <span class="token class-name">AbstractBeanDefinition</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">postProcessBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">AbstractBeanDefinition</span><span class="token punctuation">)</span> candidate<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>candidate <span class="token keyword">instanceof</span> <span class="token class-name">AnnotatedBeanDefinition</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">AnnotationConfigUtils</span><span class="token punctuation">.</span><span class="token function">processCommonDefinitionAnnotations</span><span class="token punctuation">(</span>
                        <span class="token punctuation">(</span><span class="token class-name">AnnotatedBeanDefinition</span><span class="token punctuation">)</span> candidate<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">//检查bean是否存在</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">checkCandidate</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> candidate<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">//又包装了一层</span>
                <span class="token class-name">BeanDefinitionHolder</span> definitionHolder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionHolder</span><span class="token punctuation">(</span>candidate<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//检查scope是否创建，如未创建则进行创建</span>
                definitionHolder <span class="token operator">=</span> <span class="token class-name">AnnotationConfigUtils</span><span class="token punctuation">.</span><span class="token function">applyScopedProxyMode</span><span class="token punctuation">(</span>
                        scopeMetadata<span class="token punctuation">,</span> definitionHolder<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>
                beanDefinitions<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>definitionHolder<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//注册 beanDefinition</span>
                <span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span>definitionHolder<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> beanDefinitions<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码完成的功能很明了，大体上做了以下几件事：</p><ol><li>根据包路径，得到符合条件的 BeanDefinition</li><li>遍历 BeanDefinition，进一步丰富 beanDefinition 信息</li><li>将 BeanDefinition 添加到 beanFactory</li></ol>`,13),S={href:"https://my.oschina.net/funcy/blog/4597536",target:"_blank",rel:"noopener noreferrer"},D=e(`<p>接下来我们主要分析这三个的操作。</p><h3 id="_1-根据包路径得到-beandefinition" tabindex="-1"><a class="header-anchor" href="#_1-根据包路径得到-beandefinition" aria-hidden="true">#</a> 1. 根据包路径得到 BeanDefinition</h3><p>这一步主要发生在 <code>Set&lt;BeanDefinition&gt; candidates = findCandidateComponents(basePackage);</code>，我们跟进去看看代码的执行，这里依旧对不重要代码给出调用链，该方法的调用如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">AnnotationConfigApplicationContext</span>#<span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
 <span class="token operator">|</span><span class="token operator">-</span><span class="token class-name">AnnotationConfigApplicationContext</span>#scan
  <span class="token operator">|</span><span class="token operator">-</span><span class="token class-name">ClassPathBeanDefinitionScanner</span>#scan
   <span class="token operator">|</span><span class="token operator">-</span><span class="token class-name">ClassPathBeanDefinitionScanner</span>#doScan
    <span class="token operator">|</span><span class="token operator">-</span><span class="token class-name">ClassPathScanningCandidateComponentProvider</span>#findCandidateComponents
     <span class="token operator">|</span><span class="token operator">-</span><span class="token class-name">ClassPathScanningCandidateComponentProvider</span>#scanCandidateComponents
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终调用到了 <code>ClassPathScanningCandidateComponentProvider#scanCandidateComponents</code>，代码如下 (有删减)：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BeanDefinition</span><span class="token punctuation">&gt;</span></span> <span class="token function">scanCandidateComponents</span><span class="token punctuation">(</span><span class="token class-name">String</span> basePackage<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BeanDefinition</span><span class="token punctuation">&gt;</span></span> candidates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//组装扫描路径（组装完成后是这种格式：classpath*:org/springframework/learn/demo01/**/*.class）</span>
    <span class="token class-name">String</span> packageSearchPath <span class="token operator">=</span> <span class="token class-name">ResourcePatternResolver</span><span class="token punctuation">.</span><span class="token constant">CLASSPATH_ALL_URL_PREFIX</span> <span class="token operator">+</span>
            <span class="token function">resolveBasePackage</span><span class="token punctuation">(</span>basePackage<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token char">&#39;/&#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourcePattern<span class="token punctuation">;</span>
    <span class="token comment">//根据路径获取资源对象，即扫描出该路径下的的所有class文件，得到 Resource</span>
    <span class="token class-name">Resource</span><span class="token punctuation">[</span><span class="token punctuation">]</span> resources <span class="token operator">=</span> <span class="token function">getResourcePatternResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span>packageSearchPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Resource</span> resource <span class="token operator">:</span> resources<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>resource<span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//根据资源对象获取资源对象的MetadataReader</span>
            <span class="token class-name">MetadataReader</span> metadataReader <span class="token operator">=</span> <span class="token function">getMetadataReaderFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMetadataReader</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 这里做了两件事：</span>
            <span class="token comment">// 1. 是否需要初始化为spring bean，即是否有 @Component、@Service等注解</span>
            <span class="token comment">// 2. 查看配置类是否有@Conditional一系列的注解，然后是否满足注册Bean的条件</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isCandidateComponent</span><span class="token punctuation">(</span>metadataReader<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">ScannedGenericBeanDefinition</span> sbd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ScannedGenericBeanDefinition</span><span class="token punctuation">(</span>metadataReader<span class="token punctuation">)</span><span class="token punctuation">;</span>
                sbd<span class="token punctuation">.</span><span class="token function">setResource</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>
                sbd<span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isCandidateComponent</span><span class="token punctuation">(</span>sbd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    candidates<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sbd<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> candidates<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，以上代码做了三件事：</p><ol><li>根据传入的 basePackage 得到扫描路径</li><li>根据扫描路径得到该路径下的所有 class 文件对应的 Resource</li><li>将 Resource 转化为 beanDefinition</li></ol><p>接下来我们就以上代码进行分析。</p><h4 id="_1-1-根据-basepackage-得到包扫描路径" tabindex="-1"><a class="header-anchor" href="#_1-1-根据-basepackage-得到包扫描路径" aria-hidden="true">#</a> 1.1 根据 basePackage 得到包扫描路径</h4><p>这一步没啥好分析，就是一个字符串的拼接与替换，将传入的 <code>org.springframework.learn.demo01</code> 转换为 <code>classpath*:org/springframework/learn/demo01/**/*.class</code>，相关代码就一行：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> packageSearchPath <span class="token operator">=</span> <span class="token class-name">ResourcePatternResolver</span><span class="token punctuation">.</span><span class="token constant">CLASSPATH_ALL_URL_PREFIX</span> <span class="token operator">+</span>
        <span class="token function">resolveBasePackage</span><span class="token punctuation">(</span>basePackage<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token char">&#39;/&#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourcePattern<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-2-扫描包路径" tabindex="-1"><a class="header-anchor" href="#_1-2-扫描包路径" aria-hidden="true">#</a> 1.2 扫描包路径</h4><p>得到包扫描路径后，接下来就是进行扫描了。spring 在扫描时，会把扫描路径下的所有 class 文件扫描出来，然后封装成 <code>Resource</code>，代码如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Resource</span><span class="token punctuation">[</span><span class="token punctuation">]</span> resources <span class="token operator">=</span> <span class="token function">getResourcePatternResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span>packageSearchPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>跟进代码，同样地，我们对不重要的方法，依旧只给出方法调用：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">AnnotationConfigApplicationContext</span>#<span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
 <span class="token operator">|</span><span class="token operator">-</span><span class="token class-name">AnnotationConfigApplicationContext</span>#scan
  <span class="token operator">|</span><span class="token operator">-</span><span class="token class-name">ClassPathBeanDefinitionScanner</span>#scan
   <span class="token operator">|</span><span class="token operator">-</span><span class="token class-name">ClassPathBeanDefinitionScanner</span>#doScan
    <span class="token operator">|</span><span class="token operator">-</span><span class="token class-name">ClassPathScanningCandidateComponentProvider</span>#findCandidateComponents
     <span class="token operator">|</span><span class="token operator">-</span><span class="token class-name">ClassPathScanningCandidateComponentProvider</span>#scanCandidateComponents
      <span class="token operator">|</span><span class="token operator">-</span> <span class="token class-name">GenericApplicationContext</span>#getResources
       <span class="token operator">|</span><span class="token operator">-</span><span class="token class-name">AbstractApplicationContext</span>#getResources
        <span class="token operator">|</span><span class="token operator">-</span><span class="token class-name">PathMatchingResourcePatternResolver</span>#getResources
         <span class="token operator">|</span><span class="token operator">-</span><span class="token class-name">PathMatchingResourcePatternResolver</span>#findPathMatchingResources
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们将代码聚集于 <code>PathMatchingResourcePatternResolver#findPathMatchingResources</code>:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token class-name">Resource</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">findPathMatchingResources</span><span class="token punctuation">(</span><span class="token class-name">String</span> locationPattern<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token comment">// 传入的 locationPattern 是 classpath*:org/springframework/learn/demo01/**/*.class</span>
    <span class="token comment">// rootDirPath 是 classpath*:org/springframework/learn/demo01/</span>
    <span class="token class-name">String</span> rootDirPath <span class="token operator">=</span> <span class="token function">determineRootDir</span><span class="token punctuation">(</span>locationPattern<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// subPattern 是 **/*.class</span>
    <span class="token class-name">String</span> subPattern <span class="token operator">=</span> locationPattern<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>rootDirPath<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 这里返回的 Resource 是 rootDirPath 的绝对路径(用url表示)</span>
    <span class="token comment">// URL [file:/xxx/spring-learn/build/classes/java/main/org/springframework/learn/demo01/]</span>
    <span class="token class-name">Resource</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rootDirResources <span class="token operator">=</span> <span class="token function">getResources</span><span class="token punctuation">(</span>rootDirPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Resource</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Resource</span> rootDirResource <span class="token operator">:</span> rootDirResources<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        rootDirResource <span class="token operator">=</span> <span class="token function">resolveRootDirResource</span><span class="token punctuation">(</span>rootDirResource<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">URL</span> rootDirUrl <span class="token operator">=</span> rootDirResource<span class="token punctuation">.</span><span class="token function">getURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>equinoxResolveMethod <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> rootDirUrl<span class="token punctuation">.</span><span class="token function">getProtocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;bundle&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">URL</span> resolvedUrl <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token constant">URL</span><span class="token punctuation">)</span> <span class="token class-name">ReflectionUtils</span><span class="token punctuation">.</span><span class="token function">invokeMethod</span><span class="token punctuation">(</span>equinoxResolveMethod<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> rootDirUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>resolvedUrl <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                rootDirUrl <span class="token operator">=</span> resolvedUrl<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            rootDirResource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrlResource</span><span class="token punctuation">(</span>rootDirUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 处理 vfs 资源查找</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>rootDirUrl<span class="token punctuation">.</span><span class="token function">getProtocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token class-name">ResourceUtils</span><span class="token punctuation">.</span><span class="token constant">URL_PROTOCOL_VFS</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            result<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token class-name">VfsResourceMatchingDelegate</span>
                    <span class="token punctuation">.</span><span class="token function">findMatchingResources</span><span class="token punctuation">(</span>rootDirUrl<span class="token punctuation">,</span> subPattern<span class="token punctuation">,</span> <span class="token function">getPathMatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 处理jar包文件查找</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ResourceUtils</span><span class="token punctuation">.</span><span class="token function">isJarURL</span><span class="token punctuation">(</span>rootDirUrl<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isJarResource</span><span class="token punctuation">(</span>rootDirResource<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            result<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token function">doFindPathMatchingJarResources</span><span class="token punctuation">(</span>rootDirResource<span class="token punctuation">,</span> rootDirUrl<span class="token punctuation">,</span> subPattern<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 处理文件路径下的文件查找</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            result<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token function">doFindPathMatchingFileResources</span><span class="token punctuation">(</span>rootDirResource<span class="token punctuation">,</span> subPattern<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Resource</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过分析，发现该类的处理过程如下：</p><ol><li>通过传入的 locationPattern 得到该 pattern 下的 url 绝对路径，封装为 Resource</li><li>遍历返回的路径，查找 class 文件，封装为 Resource</li></ol><p>我们来看看 spring 是如何将 pattrn 转换为 url 路径的，我们跟进代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">|</span><span class="token operator">-</span><span class="token class-name">PathMatchingResourcePatternResolver</span>#getResources
 <span class="token operator">|</span><span class="token operator">-</span><span class="token class-name">PathMatchingResourcePatternResolver</span>#findAllClassPathResources
  <span class="token operator">|</span><span class="token operator">-</span><span class="token class-name">PathMatchingResourcePatternResolver</span>#doFindAllClassPathResources
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终代码到了 <code>PathMatchingResourcePatternResolver#doFindAllClassPathResources</code>:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Resource</span><span class="token punctuation">&gt;</span></span> <span class="token function">doFindAllClassPathResources</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Resource</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ClassLoader</span> cl <span class="token operator">=</span> <span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// path对应的url</span>
    <span class="token class-name">Enumeration</span><span class="token generics"><span class="token punctuation">&lt;</span>URL<span class="token punctuation">&gt;</span></span> resourceUrls <span class="token operator">=</span> <span class="token punctuation">(</span>cl <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> cl<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">:</span> 
            <span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token function">getSystemResources</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>resourceUrls<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">URL</span> url <span class="token operator">=</span> resourceUrls<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 将url转换为Resource，并添加到结果中</span>
        result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">convertClassLoaderURL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">addAllClassLoaderJarRoots</span><span class="token punctuation">(</span>cl<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 将url转换为Resource</span>
<span class="token keyword">protected</span> <span class="token class-name">Resource</span> <span class="token function">convertClassLoaderURL</span><span class="token punctuation">(</span><span class="token class-name">URL</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UrlResource</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时传入的 <code>path</code> 为 <code>org/springframework/learn/demo01/</code>，从代码可知，最终调用了 java 的 <code>ClassLoader</code> 方法来获取 path 对应的 url，然后将 url 转换为 <code>Resource</code> 添加到结果集中并返回。</p><p>拿到类的绝对路径之后，接下就是对路径进行遍历，拿到 class 文件了。让我们再回到 <code>PathMatchingResourcePatternResolver#findPathMatchingResources</code>，spring 扫描时，会根据传入的 url 类型，共扫描 3 个地方：</p><ol><li>vfs</li><li>jar 包</li><li>文件路径</li></ol><p><code>vfs</code> 注释上说是 &quot;URL protocol for a general JBoss VFS resource&quot;，即通用 JBoss VFS 资源的 URL 协议，这里不深究。如果项目中引入了 jar 包且需要扫描 jar 中的路径，就会使用 jar 包扫描方式进行 class 文件查找，由于调试时，<code>demo01</code> 是使用文件方式扫描的，这里就重点分析文件扫描方式，至于 jar 是如何扫描的，有兴趣的小伙伴可自行研究下。</p><p>我们跟进 <code>findPathMatchingResources</code> 方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">|</span><span class="token operator">-</span><span class="token class-name">PathMatchingResourcePatternResolver</span>#findPathMatchingResources
 <span class="token operator">|</span><span class="token operator">-</span><span class="token class-name">PathMatchingResourcePatternResolver</span>#doFindPathMatchingFileResources
  <span class="token operator">|</span><span class="token operator">-</span><span class="token class-name">PathMatchingResourcePatternResolver</span>#doFindMatchingFileSystemResources
<span class="token keyword">protected</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Resource</span><span class="token punctuation">&gt;</span></span> <span class="token function">doFindMatchingFileSystemResources</span><span class="token punctuation">(</span><span class="token class-name">File</span> rootDir<span class="token punctuation">,</span> 
            <span class="token class-name">String</span> subPattern<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token comment">// 这里进行文件查找</span>
    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">File</span><span class="token punctuation">&gt;</span></span> matchingFiles <span class="token operator">=</span> <span class="token function">retrieveMatchingFiles</span><span class="token punctuation">(</span>rootDir<span class="token punctuation">,</span> subPattern<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Resource</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>matchingFiles<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">File</span> file <span class="token operator">:</span> matchingFiles<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileSystemResource</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>PathMatchingResourcePatternResolver#doFindMatchingFileSystemResources</code> 中，spring 将扫描到的 File 转换为 <code>FileSystemResource</code> 保存，这是我们遇到的第二个 <code>Resource</code> 类型了 (前面为 <code>UrlResource</code>，这里为 <code>FileSystemResource</code>).</p><p>接下我们重点关注 <code>Set&lt;File&gt; matchingFiles = retrieveMatchingFiles(rootDir, subPattern);</code>，看看 spring 是如何完成文件查找的：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">|</span><span class="token operator">-</span><span class="token class-name">PathMatchingResourcePatternResolver</span>#findPathMatchingResources
 <span class="token operator">|</span><span class="token operator">-</span><span class="token class-name">PathMatchingResourcePatternResolver</span>#doFindPathMatchingFileResources
  <span class="token operator">|</span><span class="token operator">-</span><span class="token class-name">PathMatchingResourcePatternResolver</span>#doFindMatchingFileSystemResources
   <span class="token operator">|</span><span class="token operator">-</span><span class="token class-name">PathMatchingResourcePatternResolver</span>#retrieveMatchingFiles
    <span class="token operator">|</span><span class="token operator">-</span><span class="token class-name">PathMatchingResourcePatternResolver</span>#doRetrieveMatchingFiles
<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doRetrieveMatchingFiles</span><span class="token punctuation">(</span><span class="token class-name">String</span> fullPattern<span class="token punctuation">,</span> <span class="token class-name">File</span> dir<span class="token punctuation">,</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">File</span><span class="token punctuation">&gt;</span></span> result<span class="token punctuation">)</span> 
        <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">File</span> content <span class="token operator">:</span> <span class="token function">listDirectory</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> currPath <span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>content<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">File</span><span class="token punctuation">.</span>separator<span class="token punctuation">,</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>content<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">getPathMatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matchStart</span><span class="token punctuation">(</span>fullPattern<span class="token punctuation">,</span> currPath <span class="token operator">+</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>content<span class="token punctuation">.</span><span class="token function">canRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// 如果是文件夹，递归调用</span>
                <span class="token function">doRetrieveMatchingFiles</span><span class="token punctuation">(</span>fullPattern<span class="token punctuation">,</span> content<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 如果是文件且文件路径</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getPathMatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>fullPattern<span class="token punctuation">,</span> currPath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码比较简单，与我们平常遍历文件的方式是一样的。</p><p>值得一提的是，<code>getPathMatcher().match(fullPattern, currPath)</code> 最终调用到的是 <code>AntPathMatcher#doMatch</code>，这是一个 ant 风格的路径匹配验证，即路径中带有 <code>*</code>，如传入的 pattern 是 <code>/xxx/spring-framework/spring-learn/build/classes/java/main/org/springframework/learn/demo01/**/*.class</code>，表示匹配 <code>/xxx/spring-framework/spring-learn/build/classes/java/main/org/springframework/learn/demo01/</code> 及其子文件夹下所有以<code>.class</code> 文件结尾的文件，当前传入的 path 是 <code>/xxx/spring-framework/spring-learn/build/classes/java/main/org/springframework/learn/demo01/BeanObj2.class</code>，显然匹配。关于 <code>AntPathMatcher#doMatch</code> 方法是如何进行匹配的，这里就不进行展开了。</p><p>经过了以上步骤，我们终于得到了 class 文件对应的 Resource 了.</p><h4 id="_1-3-将-resource-转化为-beandefinition" tabindex="-1"><a class="header-anchor" href="#_1-3-将-resource-转化为-beandefinition" aria-hidden="true">#</a> 1.3 将 Resource 转化为 BeanDefinition</h4><p>将 Resource 转化为 BeanDefinition，代码是</p><blockquote><p>ClassPathScanningCandidateComponentProvider#scanCandidateComponents</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 从 resource 得到 MetadataReader</span>
<span class="token class-name">MetadataReader</span> metadataReader <span class="token operator">=</span> <span class="token function">getMetadataReaderFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMetadataReader</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 这里做了两件事：</span>
<span class="token comment">// 1. 是否需要初始化为spring bean，即是否有 @Component、@Service等注解</span>
<span class="token comment">// 2. 查看配置类是否有@Conditional一系列的注解，然后是否满足注册Bean的条件</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isCandidateComponent</span><span class="token punctuation">(</span>metadataReader<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 将 metadataReader 转换为 ScannedGenericBeanDefinition，这也是BeanDefinition家族中的一员</span>
    <span class="token class-name">ScannedGenericBeanDefinition</span> sbd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ScannedGenericBeanDefinition</span><span class="token punctuation">(</span>metadataReader<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_1-从-resource-得到-metadatareader" tabindex="-1"><a class="header-anchor" href="#_1-从-resource-得到-metadatareader" aria-hidden="true">#</a> 1. 从 Resource 得到 MetadataReader</h5><p>我们追踪下 <code>MetadataReader</code> 的获取：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>|-ClassPathScanningCandidateComponentProvider#scanCandidateComponents
 |-CachingMetadataReaderFactory#getMetadataReader
  |-SimpleMetadataReaderFactory#getMetadataReader(Resource)
   |-SimpleMetadataReader#SimpleMetadataReader
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码最终运行到了 <code>SimpleMetadataReader</code> 的构造方法:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">SimpleMetadataReader</span><span class="token punctuation">(</span><span class="token class-name">Resource</span> resource<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ClassLoader</span> classLoader<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token class-name">SimpleAnnotationMetadataReadingVisitor</span> visitor 
        <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAnnotationMetadataReadingVisitor</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 这里发生了class文件的读取与解析</span>
    <span class="token function">getClassReader</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>visitor<span class="token punctuation">,</span> <span class="token constant">PARSING_OPTIONS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>resource <span class="token operator">=</span> resource<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>annotationMetadata <span class="token operator">=</span> visitor<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再进一步追踪，发现 class 文件的读取与解析发生在 <code>ClassReader</code> 类：</p><p><img src="`+u+'" alt="img"></p><p>这个类使用 asm 来读取 class 文件，代码比较复杂，就不深究了。</p><p>一直以来，我都以为 spring 是通过反射来获取类信息的，到这里才知道，<strong>原来 spring 是通过 asm 直接读取 class 文件来获取类的信息的</strong> 。</p><p>最后我们来看下得到的 <code>MetadataReader</code> 的结果：</p><p><img src="'+r+`" alt="img"></p><p>这里重点关注 <code>annotations</code> 属性，里面有一个 <code>annotations</code> 和 <code>mappings</code>，<code>annotations</code> 内容为 <code>@Service</code>，<code>mappings</code> 是一个数组，内容为</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>0-@Service
1-@Component
2-@Index
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+d+'" alt="img"></p><p><img src="'+k+'" alt="img"></p><p><img src="'+m+'" alt="img"></p><p><code>annotations</code> 本人猜测是 <code>BeanObj1</code> 上的注解：</p><p><img src="'+v+'" alt="img"></p><p>至于 <code>mappings</code> 是啥，我不好猜测，不过也可以从注解中发现一些端倪：</p><p><img src="'+b+'" alt="img"></p><p><img src="'+g+`" alt="img"></p><p><code>@Service</code> 上有 <code>@Component</code> 注解，<code>@Component</code> 上有 <code>@Indexed</code>，而这三者都出现在了 <code>mappings</code> 中，这看着像是专门用来保存拿注解之上的注解的？不纠结这个了，暂且就当作是这功能吧！<strong>注意：<code>mappings</code> 里面的内容很重要，后面会用来！</strong></p><h5 id="_2-iscandidatecomponent-metadatareader-判断是否需要实例化为-spring-bean" tabindex="-1"><a class="header-anchor" href="#_2-iscandidatecomponent-metadatareader-判断是否需要实例化为-spring-bean" aria-hidden="true">#</a> 2. <code>isCandidateComponent(MetadataReader)</code>：判断是否需要实例化为 spring bean</h5><p>在上一步中，我们得到了 basePackage 下<strong>所有类</strong>的 <code>MetadataReader</code> 描述文件，注意这里是<strong>所有类</strong>，但这些类是不是都要转成 <code>spring bean</code>，托管到 spring 容器呢？这就是 <code>isCandidateComponent(MetadataReader)</code> 的功能了。废话少说，上代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">isCandidateComponent</span><span class="token punctuation">(</span><span class="token class-name">MetadataReader</span> metadataReader<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token comment">// 省略部分代码</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">TypeFilter</span> tf <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>includeFilters<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 这里判断是否需要托管到spring容器</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>tf<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>metadataReader<span class="token punctuation">,</span> <span class="token function">getMetadataReaderFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 判断是否有@Conditional一系列的注解</span>
            <span class="token keyword">return</span> <span class="token function">isConditionMatch</span><span class="token punctuation">(</span>metadataReader<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段主要是做了两个判断：</p><ul><li>是否需要为 spring bean</li><li>是否有 <code>@Conditional</code> 等一系列的注解</li></ul><p>这里我们先来看第一个判断。</p><p>在 spring 中，标明 spring bean 的注解有很多，像 <code>@Component</code>、<code>@Repository</code>、<code>@Service</code>、<code>@Controller</code>、<code>@Configuration</code>，甚至是你自己写的注解类，只要上面标了这些注解，像</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token comment">// 添加 @Component 或 @Service 或 @Repository 等其中之一</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MySpringBean</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>都能被 spring 识别。如果是 spring 提供的注解（<code>@Component</code>、<code>@Repository</code> 等），在判断是不是 spring bean 时，只需要做类似</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span><span class="token punctuation">(</span>annotation <span class="token operator">==</span> <span class="token class-name">Component</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">||</span> annotation <span class="token operator">==</span> <span class="token class-name">Repository</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>的判断就行了。但对于自定义的注解 <code>@MySpringBean</code>，spring 是怎么知道这是 spring bean 呢？在我们定义 <code>@MySpringBean</code> 时，一定要在类上添加 <code>@Component</code> 或 <code>@Service</code> 或 <code>@Repository</code> 等其中之一才能被 spring 识别，这其中有什么玄机呢？我们跟进代码 <code>AbstractTypeHierarchyTraversingFilter#match(MetadataReader, MetadataReaderFactory)</code>，这里我们对不重要的代码依旧只给出调用链：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">|</span><span class="token operator">-</span><span class="token class-name">ClassPathScanningCandidateComponentProvider</span>#<span class="token function">isCandidateComponent</span><span class="token punctuation">(</span><span class="token class-name">MetadataReader</span><span class="token punctuation">)</span>
 <span class="token operator">|</span><span class="token operator">-</span><span class="token class-name">AbstractTypeHierarchyTraversingFilter</span>#<span class="token function">match</span><span class="token punctuation">(</span><span class="token class-name">MetadataReader</span><span class="token punctuation">,</span> <span class="token class-name">MetadataReaderFactory</span><span class="token punctuation">)</span>
  <span class="token operator">|</span><span class="token operator">-</span><span class="token class-name">AnnotationTypeFilter</span>#matchSelf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码最终到了 <code>AnnotationTypeFilter#matchSelf</code>:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">matchSelf</span><span class="token punctuation">(</span><span class="token class-name">MetadataReader</span> metadataReader<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">AnnotationMetadata</span> metadata <span class="token operator">=</span> metadataReader<span class="token punctuation">.</span><span class="token function">getAnnotationMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 这里的annotationType就是 @Component</span>
    <span class="token keyword">return</span> metadata<span class="token punctuation">.</span><span class="token function">hasAnnotation</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>annotationType<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span>
        <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>considerMetaAnnotations <span class="token operator">&amp;&amp;</span> metadata<span class="token punctuation">.</span><span class="token function">hasMetaAnnotation</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>annotationType<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关键就在这了：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>metadata<span class="token punctuation">.</span><span class="token function">hasAnnotation</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>annotationType<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
与
<span class="token keyword">this</span><span class="token punctuation">.</span>considerMetaAnnotations <span class="token operator">&amp;&amp;</span> metadata<span class="token punctuation">.</span><span class="token function">hasMetaAnnotation</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>annotationType<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们先看 <code>metadata.hasAnnotation(this.annotationType.getName())</code> 的比较：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// AnnotationMetadata#hasAnnotation</span>
<span class="token keyword">default</span> <span class="token keyword">boolean</span> <span class="token function">hasAnnotation</span><span class="token punctuation">(</span><span class="token class-name">String</span> annotationName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">getAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isDirectlyPresent</span><span class="token punctuation">(</span>annotationName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的 <code>getAnnotations()</code> 得到的结果是</p><p><img src="`+f+`" alt="img"></p><p>mappings 里的内容是</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>0-@Service
1-@Component
2-@Index
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这其实就是我们前面得到的 <code>MetadataReader</code> 里的内容！</p><p>再追踪下去，发现 <code>isDirectlyPresent</code> 就是判断 <code>annotations</code> 与 <code>mappings</code> 里有没有出现 <code>@Component</code>:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token class-name">Object</span> requiredType<span class="token punctuation">,</span> <span class="token keyword">boolean</span> directOnly<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 判断 annotations 里有没有出现 @Component</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MergedAnnotation</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> annotation <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>annotations<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token punctuation">&gt;</span></span> type <span class="token operator">=</span> annotation<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> requiredType <span class="token operator">||</span> type<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>requiredType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>directOnly<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 判断 mappings 里有没有出现 @Component</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">AnnotationTypeMappings</span> mappings <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mappings<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> mappings<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">AnnotationTypeMapping</span> mapping <span class="token operator">=</span> mappings<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isMappingForType</span><span class="token punctuation">(</span>mapping<span class="token punctuation">,</span> requiredType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着我们再来看 <code>this.considerMetaAnnotations &amp;&amp; metadata.hasMetaAnnotation(this.annotationType.getName())</code>，查看调用：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">|</span><span class="token operator">-</span><span class="token class-name">AnnotationTypeFilter</span>#matchSelf
 <span class="token operator">|</span><span class="token operator">-</span><span class="token class-name">AnnotationMetadata</span>#hasMetaAnnotation
  <span class="token operator">|</span><span class="token operator">-</span><span class="token class-name">MergedAnnotationsCollection</span>#<span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Predicate</span><span class="token punctuation">)</span>
   <span class="token operator">|</span><span class="token operator">-</span><span class="token class-name">MergedAnnotationsCollection</span>#<span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Predicate</span><span class="token punctuation">,</span> <span class="token class-name">MergedAnnotationSelector</span><span class="token punctuation">)</span>
    <span class="token operator">|</span><span class="token operator">-</span><span class="token class-name">MergedAnnotationsCollection</span>#find
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终的查找方法在 <code>MergedAnnotationsCollection#find</code>:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">A</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">MergedAnnotation</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">A</span><span class="token punctuation">&gt;</span></span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token class-name">Object</span> requiredType<span class="token punctuation">,</span>
        <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">MergedAnnotation</span><span class="token punctuation">&lt;</span><span class="token class-name">A</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> predicate<span class="token punctuation">,</span>
        <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">MergedAnnotationSelector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">A</span><span class="token punctuation">&gt;</span></span> selector<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token class-name">MergedAnnotation</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">A</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">MergedAnnotation</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> root <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>annotations<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name">AnnotationTypeMappings</span> mappings <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mappings<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// mappings 遍历 mappings</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> mappingIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> mappingIndex <span class="token operator">&lt;</span> mappings<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> mappingIndex<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">AnnotationTypeMapping</span> mapping <span class="token operator">=</span> mappings<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>mappingIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isMappingForType</span><span class="token punctuation">(</span>mapping<span class="token punctuation">,</span> requiredType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 到这里，就是找到了 @Component 注解</span>
            <span class="token class-name">MergedAnnotation</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">A</span><span class="token punctuation">&gt;</span></span> candidate <span class="token operator">=</span> <span class="token punctuation">(</span>mappingIndex <span class="token operator">==</span> <span class="token number">0</span>
                <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token class-name">MergedAnnotation</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">A</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> root
                <span class="token operator">:</span> <span class="token class-name">TypeMappedAnnotation</span><span class="token punctuation">.</span><span class="token function">createIfPossible</span><span class="token punctuation">(</span>mapping<span class="token punctuation">,</span> root<span class="token punctuation">,</span> <span class="token class-name">IntrospectionFailureLogger</span><span class="token punctuation">.</span><span class="token constant">INFO</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>candidate <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>predicate <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> predicate<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>candidate<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>selector<span class="token punctuation">.</span><span class="token function">isBestCandidate</span><span class="token punctuation">(</span>candidate<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> candidate<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                result <span class="token operator">=</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> candidate<span class="token punctuation">)</span> <span class="token operator">:</span> candidate<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，查找方式跟上面的 <code>metadata.hasAnnotation(this.annotationType.getName())</code> 高度相似。</p><p>以上就是 spring 用来判断是否包含 <code>@Service</code>、<code>@Component</code> 等注解的逻辑了。</p><p>在 <code>java</code> 中，注解是不能继承的，如</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Child</span> <span class="token keyword">extends</span>  <span class="token class-name">Base</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上语法在 java 中不被允许的，spring 就是采用这解析<code>注解的注解</code>的方式，实现了类似于继承的功能。</p><p>接着我们再来看 <code>ClassPathScanningCandidateComponentProvider#isConditionMatch</code> 方法。实际上，这个方法是用来判断类是否含有 <code>@Conditional</code> 注解的，满足条件则会识别为 spring bean，代码最终调用到了 <code>ConditionEvaluator#shouldSkip(AnnotatedTypeMetadata, ConfigurationCondition.ConfigurationPhase)</code>:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">shouldSkip</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">AnnotatedTypeMetadata</span> metadata<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ConfigurationPhase</span> phase<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 省略了一些代码</span>

    <span class="token comment">// 得到 condition 对象</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Condition</span><span class="token punctuation">&gt;</span></span> conditions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> conditionClasses <span class="token operator">:</span> <span class="token function">getConditionClasses</span><span class="token punctuation">(</span>metadata<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> conditionClass <span class="token operator">:</span> conditionClasses<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">Condition</span> condition <span class="token operator">=</span> <span class="token function">getCondition</span><span class="token punctuation">(</span>conditionClass<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                conditions<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">AnnotationAwareOrderComparator</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>conditions<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 遍历，判断 condition 条件是否成立</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Condition</span> condition <span class="token operator">:</span> conditions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ConfigurationPhase</span> requiredPhase <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>condition <span class="token keyword">instanceof</span> <span class="token class-name">ConfigurationCondition</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            requiredPhase <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ConfigurationCondition</span><span class="token punctuation">)</span> condition<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConfigurationPhase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>requiredPhase <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> requiredPhase <span class="token operator">==</span> phase<span class="token punctuation">)</span> 
                <span class="token comment">// 判断 condition 条件是否成立，一个条件满足就返回true</span>
                <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>condition<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">,</span> metadata<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 通过反射获取 Condition 对象</span>
<span class="token keyword">private</span> <span class="token class-name">Condition</span> <span class="token function">getCondition</span><span class="token punctuation">(</span><span class="token class-name">String</span> conditionClassName<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ClassLoader</span> classloader<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> conditionClass <span class="token operator">=</span> <span class="token class-name">ClassUtils</span><span class="token punctuation">.</span><span class="token function">resolveClassName</span><span class="token punctuation">(</span>conditionClassName<span class="token punctuation">,</span> classloader<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Condition</span><span class="token punctuation">)</span> <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">instantiateClass</span><span class="token punctuation">(</span>conditionClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里做了两件事：</p><ol><li>获取 condition 对象</li><li>遍历 condition 对象，调用 <code>condition.matches()</code> 方法，判断条件是否成立</li></ol><h5 id="_3-从-metadatareader-得到-scannedgenericbeandefinition" tabindex="-1"><a class="header-anchor" href="#_3-从-metadatareader-得到-scannedgenericbeandefinition" aria-hidden="true">#</a> 3. 从 <code>MetadataReader</code> 得到 <code>ScannedGenericBeanDefinition</code></h5><p>这里仅是做了一个简单的赋值，看下 <code>ScannedGenericBeanDefinition</code> 的构造方法就明白了：</p><blockquote><p>ScannedGenericBeanDefinition#ScannedGenericBeanDefinition</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">ScannedGenericBeanDefinition</span><span class="token punctuation">(</span><span class="token class-name">MetadataReader</span> metadataReader<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>metadataReader<span class="token punctuation">,</span> <span class="token string">&quot;MetadataReader must not be null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>metadata <span class="token operator">=</span> metadataReader<span class="token punctuation">.</span><span class="token function">getAnnotationMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setBeanClassName</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>metadata<span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码比较简单，就不多做分析了。</p><h3 id="_2-丰富-beandefinition-信息" tabindex="-1"><a class="header-anchor" href="#_2-丰富-beandefinition-信息" aria-hidden="true">#</a> 2. 丰富 beanDefinition 信息</h3><p>历经千难万险，终于得到了 <code>beanDefinition</code>，但此时 <code>beanDefinition</code> 并不丰富，接下来就是进一步扩展 <code>beanDefinition</code> 的信息了。这些信息包括 <code>bean的名称</code>、<code>bean的作用域</code>、<code>@Lazy</code> 注解、<code>@Primary</code> 注解、<code>@DependsOn</code> 注解等，代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AnnotationConfigUtils</span> <span class="token punctuation">{</span>

    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token doc-comment comment">/**
     * 进一步丰富 BeanDefinition
     */</span>
    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">processCommonDefinitionAnnotations</span><span class="token punctuation">(</span><span class="token class-name">AnnotatedBeanDefinition</span> abd<span class="token punctuation">,</span> 
            <span class="token class-name">AnnotatedTypeMetadata</span> metadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 处理 @Lazy</span>
        <span class="token class-name">AnnotationAttributes</span> lazy <span class="token operator">=</span> <span class="token function">attributesFor</span><span class="token punctuation">(</span>metadata<span class="token punctuation">,</span> <span class="token class-name">Lazy</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>lazy <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            abd<span class="token punctuation">.</span><span class="token function">setLazyInit</span><span class="token punctuation">(</span>lazy<span class="token punctuation">.</span><span class="token function">getBoolean</span><span class="token punctuation">(</span><span class="token string">&quot;value&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>abd<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> metadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            lazy <span class="token operator">=</span> <span class="token function">attributesFor</span><span class="token punctuation">(</span>abd<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Lazy</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>lazy <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                abd<span class="token punctuation">.</span><span class="token function">setLazyInit</span><span class="token punctuation">(</span>lazy<span class="token punctuation">.</span><span class="token function">getBoolean</span><span class="token punctuation">(</span><span class="token string">&quot;value&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 处理 @Primary</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>metadata<span class="token punctuation">.</span><span class="token function">isAnnotated</span><span class="token punctuation">(</span><span class="token class-name">Primary</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            abd<span class="token punctuation">.</span><span class="token function">setPrimary</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 处理 @DependsOn</span>
        <span class="token class-name">AnnotationAttributes</span> dependsOn <span class="token operator">=</span> <span class="token function">attributesFor</span><span class="token punctuation">(</span>metadata<span class="token punctuation">,</span> <span class="token class-name">DependsOn</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>dependsOn <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            abd<span class="token punctuation">.</span><span class="token function">setDependsOn</span><span class="token punctuation">(</span>dependsOn<span class="token punctuation">.</span><span class="token function">getStringArray</span><span class="token punctuation">(</span><span class="token string">&quot;value&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 处理 @Role</span>
        <span class="token class-name">AnnotationAttributes</span> role <span class="token operator">=</span> <span class="token function">attributesFor</span><span class="token punctuation">(</span>metadata<span class="token punctuation">,</span> <span class="token class-name">Role</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>role <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            abd<span class="token punctuation">.</span><span class="token function">setRole</span><span class="token punctuation">(</span>role<span class="token punctuation">.</span><span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token string">&quot;value&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 处理 @Description</span>
        <span class="token class-name">AnnotationAttributes</span> description <span class="token operator">=</span> <span class="token function">attributesFor</span><span class="token punctuation">(</span>metadata<span class="token punctuation">,</span> <span class="token class-name">Description</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>description <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            abd<span class="token punctuation">.</span><span class="token function">setDescription</span><span class="token punctuation">(</span>description<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;value&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-registerbeandefinition-definitionholder-this-registry-添加-beandefinition-到-beanfactory" tabindex="-1"><a class="header-anchor" href="#_3-registerbeandefinition-definitionholder-this-registry-添加-beandefinition-到-beanfactory" aria-hidden="true">#</a> 3.<code> registerBeanDefinition(definitionHolder, this.registry)</code>: 添加 BeanDefinition 到 beanFactory</h3><p>将 <code>BeanDefinition</code> 到 <code>beanFactory</code> 的操作比较简单，关键的代码如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>|-ClassPathBeanDefinitionScanner#registerBeanDefinition
 |-BeanDefinitionReaderUtils#registerBeanDefinition
  |-GenericApplicationContext#registerBeanDefinition
   |-DefaultListableBeanFactory#registerBeanDefinition
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>DefaultListableBeanFactory#registerBeanDefinition</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">this</span><span class="token punctuation">.</span>beanDefinitionMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>从 <code>ClassPathBeanDefinitionScanner#registerBeanDefinition</code> 到 <code>DefaultListableBeanFactory#registerBeanDefinition</code>，这其中虽然经历了一些弯弯绕绕，但依旧不妨碍我们找到关键的代码。</p><p>到此，磁盘上的 class 文件，经过 spring 扫描，终于变成了 <code>BeanDefinition</code>，保存在 <code>BeanFactory</code> 中了。</p><h3 id="_4-总结" tabindex="-1"><a class="header-anchor" href="#_4-总结" aria-hidden="true">#</a> 4. 总结</h3><p>本文比较长，主要分析了 spring 扫描包路径得到 <code>beanDefinition</code> 的过程，主要流程如下：</p><ol><li>根据包名得到路径 <code>Resource</code>；</li><li>根据路径 <code>Resouce</code> 得到该路径下所有 class 文件的 <code>Resouce</code>；</li><li>根据 class 文件的 <code>Resouce</code> 通过 asm 解析得到 <code>MetadataReader</code>，注意：这里的 <code>MetadataReader</code> 还是所有 class 文件的 <code>MetadataReader</code>；</li><li>从 <code>MetadataReader</code> 中找到需要 spring 托管的 <code>MetadataReader</code>，将其转化为 <code>ScannedGenericBeanDefinition</code>，<code>ScannedGenericBeanDefinition</code> 为 <code>BeanDefinition</code> 的子类；</li><li>进一步丰富 <code>ScannedGenericBeanDefinition</code> 的信息；</li><li>将上面得到的 <code>BeanDefinition</code> 添加到 <code>BeanFactory</code> 中</li></ol><p>至此，包名转换为 <code>BeanDefinition</code> 完成。</p><p><img src="`+h+'" alt="img"></p><p>本文还有两个值得注意的地方：</p><ol><li>spring 在获取类上的注解时，不是通过反射，而是使用 asm 直接解析 class 文件，然后再获取类上的注解的</li><li>在处理注解时，spring 通过解析 “注解的注解” 实现了一套类似于注解继承的方式，这也是 spring 能识别 <code>@Component</code>、<code>@Service</code> 甚至是开发者自定义注解的原因。</li></ol><p>得到了 <code>BeanDefinition</code> 后，接着就是 spring 容器的初始化了，我们下篇文章再见。</p>',124);function A(x,j){const a=o("ExternalLinkIcon");return c(),i("div",null,[R,w,n("p",null,[s("在 "),n("a",C,[s("applicationContext 的创建"),t(a)]),s("中，我们分析了 "),P,s(" 的创建过程，在本文中，我们将分析 spring 是如何进行包扫描的。")]),M,n("blockquote",null,[n("p",null,[s("BeanDefinition 也是 spring 的重要组件之一，关于 BeanDefinition 的分析，可参考 "),n("a",S,[s("spring 组件之 BeanDefinition"),t(a)]),s("。")])]),D])}const F=p(y,[["render",A],["__file","package-scan.html.vue"]]);export{F as default};
