const e=JSON.parse('{"key":"v-76aba258","path":"/quality/design-mode/design-factory.html","title":"工厂模式","lang":"zh-CN","frontmatter":{"article":true,"sticky":false,"star":false,"timeline":true,"category":["设计模式"],"tag":["设计模式"],"date":"2022-12-21T00:00:00.000Z"},"headers":[{"level":2,"title":"1、概述","slug":"_1、概述","link":"#_1、概述","children":[]},{"level":2,"title":"2、简单工厂模式","slug":"_2、简单工厂模式","link":"#_2、简单工厂模式","children":[{"level":3,"title":"2.1 结构","slug":"_2-1-结构","link":"#_2-1-结构","children":[]},{"level":3,"title":"2.2 实现","slug":"_2-2-实现","link":"#_2-2-实现","children":[]},{"level":3,"title":"2.3 优缺点","slug":"_2-3-优缺点","link":"#_2-3-优缺点","children":[]},{"level":3,"title":"2.4 扩展","slug":"_2-4-扩展","link":"#_2-4-扩展","children":[]}]},{"level":2,"title":"3、工厂方法模式","slug":"_3、工厂方法模式","link":"#_3、工厂方法模式","children":[{"level":3,"title":"3.1 概念","slug":"_3-1-概念","link":"#_3-1-概念","children":[]},{"level":3,"title":"3.2 结构","slug":"_3-2-结构","link":"#_3-2-结构","children":[]},{"level":3,"title":"3.3 实现","slug":"_3-3-实现","link":"#_3-3-实现","children":[]},{"level":3,"title":"3.4 优缺点","slug":"_3-4-优缺点","link":"#_3-4-优缺点","children":[]}]},{"level":2,"title":"4、 抽象工厂模式","slug":"_4、-抽象工厂模式","link":"#_4、-抽象工厂模式","children":[{"level":3,"title":"4.1 概念","slug":"_4-1-概念","link":"#_4-1-概念","children":[]},{"level":3,"title":"4.2 结构","slug":"_4-2-结构","link":"#_4-2-结构","children":[]},{"level":3,"title":"4.2 实现","slug":"_4-2-实现","link":"#_4-2-实现","children":[]},{"level":3,"title":"4.3 优缺点","slug":"_4-3-优缺点","link":"#_4-3-优缺点","children":[]},{"level":3,"title":"4.4 使用场景","slug":"_4-4-使用场景","link":"#_4-4-使用场景","children":[]}]},{"level":2,"title":"5、 模式扩展","slug":"_5、-模式扩展","link":"#_5、-模式扩展","children":[]},{"level":2,"title":"6、JDK源码解析-Collection.iterator","slug":"_6、jdk源码解析-collection-iterator","link":"#_6、jdk源码解析-collection-iterator","children":[]}],"git":{"createdTime":1671609004000,"updatedTime":1673767263000,"contributors":[{"name":"xuliang","email":"895252461@qq.com","commits":2},{"name":"诗人都藏在水底","email":"895252461@qq.com","commits":1}]},"readingTime":{"minutes":10.85,"words":3254},"filePathRelative":"quality/design-mode/design-factory.md","localizedDate":"2022年12月21日","excerpt":"<h1> 工厂模式</h1>\\n<h2> 1、概述</h2>\\n<p>需求：设计一个咖啡店点餐系统。</p>\\n<p>设计一个咖啡类（Coffee），并定义其两个子类（美式咖啡【AmericanCoffee】和拿铁咖啡【LatteCoffee】）；再设计一个咖啡店类（CoffeeStore），咖啡店具有点咖啡的功能。</p>\\n<p>具体类的设计如下：</p>\\n\\n<p>在java中，万物皆对象，这些对象都需要创建，如果创建的时候直接new该对象，就会对该对象耦合严重，假如我们要更换对象，所有new对象的地方都需要修改一遍，这显然违背了软件设计的开闭原则。如果我们使用工厂来生产对象，我们就只和工厂打交道就可以了，彻底和对象解耦，如果要更换对象，直接在工厂里更换该对象即可，达到了与对象解耦的目的；所以说，工厂模式最大的优点就是：<strong>解耦</strong>。</p>"}');export{e as data};
