import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-e53dd85b.js";const e="/assets/adc4831fdf2244e6b49bf2dfd58faf3btplv-k3u1fbpfcp-zoom-in-crop-mark1512000-9d802e7b.webp",p="/assets/323580d48e7848ed9788c1608a1a4ff3tplv-k3u1fbpfcp-zoom-in-crop-mark1512000-60f4073a.webp",o="/assets/607245e559104d01a1ab3445ba579097tplv-k3u1fbpfcp-zoom-in-crop-mark1512000-4d17c84a.webp",c="/assets/11009ad8e9b6424d8a95b0e91da54719tplv-k3u1fbpfcp-zoom-in-crop-mark1512000-40772af0.webp",l="/assets/7f224b8b6e114cd482c7f4de9fcf9d00tplv-k3u1fbpfcp-zoom-in-crop-mark1512000-0a42c6be.webp",i="/assets/7da75ecd944945448169d450a1d55428tplv-k3u1fbpfcp-zoom-in-crop-mark1512000-1728e72d.webp",u="/assets/c01532e03f8a43a688ed8c3f43b40157tplv-k3u1fbpfcp-zoom-in-crop-mark1512000-ecb84121.webp",k={},d=t(`<h1 id="spring-组合注解的处理" tabindex="-1"><a class="header-anchor" href="#spring-组合注解的处理" aria-hidden="true">#</a> Spring 组合注解的处理</h1><h2 id="一、什么是组合注解" tabindex="-1"><a class="header-anchor" href="#一、什么是组合注解" aria-hidden="true">#</a> 一、什么是组合注解？</h2><p>在spring中，有一类特别的注解：组合注解。举例来说，springmvc中，<code>@Controller</code>注解用来配置访问路径等，<code>@ResponseBody</code> 注解用来表明不做视图渲染，直接展示方法的运行结果（一般是转成json返回），而<code>@RestController</code>组合了两者的功能，可以配置访问路径，同时也可以直接展示方法的运行结果，代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@ResponseBody</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">RestController</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 注解别名
     */</span>
    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span>annotation <span class="token operator">=</span> <span class="token class-name">Controller</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，<code>@RestController</code>上标记了两个注解：<code>@Controller</code>与<code>@ResponseBody</code>，这样它就同时拥有了两者的功能。</p><p>再来看一个例子，spring中，我们在标识一个类为spring bean的时候，可以用到这些注解：<code>@Component</code>、<code>@Repository</code>、<code>@Service</code>等，再进一步看其代码，发现<code>@Repository</code>、<code>@Service</code>中都有<code>@Component</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Repository</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span>annotation <span class="token operator">=</span> <span class="token class-name">Component</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span>annotation <span class="token operator">=</span> <span class="token class-name">Component</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也就是说，<code>@Repository</code>、<code>@Service</code>都组合了<code>@Component</code>的功能！</p><p>实际上，如果我们自己写一个注解，像这样：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MyComponent</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span>annotation <span class="token operator">=</span> <span class="token class-name">Component</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后这样使用：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@MyComponent</span><span class="token punctuation">(</span><span class="token string">&quot;beanObj3&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanObj3</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>spring 依然会把<code>BeanObj3</code>初始化为spring bean。</p><p>那么spring是如何做到这一步的呢？实际上，spring在处理<code>@MyComponent</code>时，会判断该注解中是否包含<code>@Component</code>注解，如果包含，就获取该注解的配置，然后按<code>@Component</code>的处理逻辑来进行处理。</p><p>同样地，spring在处理<code>@RestController</code>时，如果当前是处理<code>@Controller</code>的逻辑，就从<code>@RestController</code>中获取<code>@Controller</code>的配置然后进行处理，如果当前是处理<code>@ResponseBody</code>逻辑，就从<code>@RestController</code>中获取<code>@ResponseBody</code>的配置然后进行处理。</p><h2 id="二、递归获取指定类的所有注解" tabindex="-1"><a class="header-anchor" href="#二、递归获取指定类的所有注解" aria-hidden="true">#</a> 二、递归获取指定类的所有注解</h2><p>问题又来了：组合注解中的注解要怎么获取呢？</p><p>如果按照jdk提供的方法，像这样：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">RestController</span> annotation <span class="token operator">=</span> <span class="token class-name">BeanObj3</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">MyComponent</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>得到的<code>annotation</code>必定为<code>null</code>，原因是<code>Class#getAnnotation</code>方法只能获取到类上直接出现的注解，<code>BeanObj3</code>是没有直接出现<code>@Component</code>的，因此得到的结果为null，办法也许你也想到了，就是继续往下读取&quot;注解的注解&quot;，用代码示意下，类似这样：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnnotationHandler</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 存放jdk提供的元注解
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> metaAnnotations <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        metaAnnotations<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Target</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        metaAnnotations<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Documented</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        metaAnnotations<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Retention</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token function">getAnnotations</span><span class="token punctuation">(</span><span class="token class-name">BeanObj3</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 获取操作，递归调用
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">getAnnotations</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> cls<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 用来存放该类上的所有注解，包括注解的注解</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 调用 doGetAnnotations(...) 获取</span>
        <span class="token function">doGetAnnotations</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> cls<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> list<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 获取注解的具体操作
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">doGetAnnotations</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> cls<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 获取所有的注解</span>
        <span class="token class-name">Annotation</span><span class="token punctuation">[</span><span class="token punctuation">]</span> annotations <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>annotations <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> annotations<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Annotation</span> annotation <span class="token operator">:</span> annotations<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 获取注解的类型</span>
                <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> annotationType <span class="token operator">=</span> annotation<span class="token punctuation">.</span><span class="token function">annotationType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 过滤jdk提供的元注解</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>metaAnnotations<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>annotationType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">continue</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// 递归调用</span>
                <span class="token function">doGetAnnotations</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> annotationType<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 如果是注解，就添加到 list 中</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>cls<span class="token punctuation">.</span><span class="token function">isAnnotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们要获取<code>BeanObj3</code>上所有注解，就可以这样操作了：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 得到 BeanObj3 上的所有注解，包括“注解的注解”</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">AnnotationHandler</span><span class="token punctuation">.</span><span class="token function">getAnnotations</span><span class="token punctuation">(</span><span class="token class-name">BeanObj3</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 判断 BeanObj3 的注解中是否包含 @Component</span>
list<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">Component</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上demo还是比较粗糙，首先是jdk的元注解，这里只排除了三个，这三个都是在<code>@Component</code>中出现的，处理<code>@Component</code>之上的注解读取已经足够了；其次也是最重要的，就是没有获取注解的数据。在spring中，注解并不只是一个标记，还可以定义一系列数量，像这样：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 定义 spring bean 的名称为 beanObj3</span>
<span class="token annotation punctuation">@MyComponent</span><span class="token punctuation">(</span><span class="token string">&quot;beanObj3&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanObj3</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而<code>AnnotationHandler</code>并不能获取到注解的数据！</p><p>接下来我们来看看spring是怎么做到注解数据的读取的。</p><h2 id="三、spring-读取注解信息" tabindex="-1"><a class="header-anchor" href="#三、spring-读取注解信息" aria-hidden="true">#</a> 三、spring 读取注解信息</h2><p>spring 5.2 中，对于注解信息的读取有提供了三个类：</p><ul><li><code>AnnotationMetadataReadingVisitor</code>：注解数据的读取类，基于asm实现，不过在spring5.2中已经废弃（标记了<code>@Deprecated</code>），建议使用<code>SimpleAnnotationMetadataReadingVisitor</code>，因此本文不作分析</li><li><code>SimpleAnnotationMetadataReadingVisitor</code>：注解数据的读取类，基于asm实现，spring 5.2 中新增的类，用于替代<code>AnnotationMetadataReadingVisitor</code>，需要注解的是，<code>SimpleAnnotationMetadataReadingVisitor</code>的访问级别是默认的，无法在所在包之外访问，同时它也是<code>final</code>的，不能被继承，因此我们无法直接操作它，不过spring提供了一个类：<code>SimpleMetadataReaderFactory</code>，通过它就可以使用<code>SimpleAnnotationMetadataReadingVisitor</code>了</li><li><code>StandardAnnotationMetadata</code>：注解数据的读取类，基于反射实现</li></ul><h3 id="_3-1-simpleannotationmetadatareadingvisitor" tabindex="-1"><a class="header-anchor" href="#_3-1-simpleannotationmetadatareadingvisitor" aria-hidden="true">#</a> 3.1 SimpleAnnotationMetadataReadingVisitor</h3><p>spring 并没有提供直接操作<code>SimpleAnnotationMetadataReadingVisitor</code>的机会，而是封装到 <code>SimpleMetadataReaderFactory</code> 了，我们先来看看这个类：</p><p><img src="`+e+'" alt="img"></p><p>可以看到，<code>SimpleMetadataReaderFactory</code>的类主要分为两部分：</p><ol><li>构造方法</li><li>资源的获取</li></ol><p>这里我们直接看获取的获取，也就是<code>getMetadataReader(...)</code>方法：</p><p><code>getMetadataReader(Resource resource)</code>: 根据<code>Resource</code>读取数据 <code>getMetadataReader(String className)</code>: 根据类名读取数据，传入的是全限定类名（即“包名.类名”），从代码来看，这个类名最终也会转化为<code>Resource</code>，然后调用<code>getMetadataReader(Resource)</code>进行读取</p><p>这两个方法的返回值都是<code>MetadataReader</code>，这是个啥呢？我们继续往下看.</p><h4 id="_3-1-1-metadatareader" tabindex="-1"><a class="header-anchor" href="#_3-1-1-metadatareader" aria-hidden="true">#</a> 3.1.1 <code>MetadataReader</code></h4><p><code>MetadataReader</code> 的部分方法如下：</p><p><img src="'+p+`" alt="img"></p><p>可以看到，它是个接口（这里返回的具体类型就是<code>SimpleMetadataReader</code>了），里面就3个方法：</p><ul><li><code>getResource()</code>: 获取资源</li><li><code>getClassMetadata()</code>: 获取类的元数据</li><li><code>getAnnotationMetadata()</code>: 获取注解的元数据</li></ul><p>由于是获取注解的信息，这里我们只关注<code>getAnnotationMetadata()</code>方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>java
复制代码<span class="token class-name">AnnotationMetadata</span> <span class="token function">getAnnotationMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这个方法返回的是<code>AnnotationMetadata</code>，这又是个啥？</p><h4 id="_3-1-2-annotationmetadata" tabindex="-1"><a class="header-anchor" href="#_3-1-2-annotationmetadata" aria-hidden="true">#</a> 3.1.2 <code>AnnotationMetadata</code></h4><p>先来看看它的方法：</p><p><img src="`+o+`" alt="img"></p><p>这些方法分为两类：</p><ul><li><code>getXxx(...)</code>：根据注解获取对应的信息</li><li><code>hasXxx(...)</code>：判断是否包含某注解</li></ul><p>如果进一步看这几个方法的默认实现，发现都调用<code>getAnnotations()</code>方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AnnotationMetadata</span> <span class="token keyword">extends</span> <span class="token class-name">ClassMetadata</span><span class="token punctuation">,</span> <span class="token class-name">AnnotatedTypeMetadata</span> <span class="token punctuation">{</span>

    <span class="token keyword">default</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getAnnotationTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 调用了 getAnnotations()</span>
    <span class="token keyword">return</span> <span class="token function">getAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">MergedAnnotation</span><span class="token operator">::</span><span class="token function">isDirectlyPresent</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>annotation <span class="token operator">-&gt;</span> annotation<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toCollection</span><span class="token punctuation">(</span><span class="token class-name">LinkedHashSet</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">default</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getMetaAnnotationTypes</span><span class="token punctuation">(</span><span class="token class-name">String</span> annotationName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 调用了 getAnnotations()</span>
    <span class="token class-name">MergedAnnotation</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> annotation <span class="token operator">=</span> <span class="token function">getAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>annotationName<span class="token punctuation">,</span> 
        <span class="token class-name">MergedAnnotation</span><span class="token operator">::</span><span class="token function">isDirectlyPresent</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>annotation<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token class-name">MergedAnnotations</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>annotation<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">SearchStrategy</span><span class="token punctuation">.</span><span class="token constant">INHERITED_ANNOTATIONS</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>mergedAnnotation <span class="token operator">-&gt;</span> mergedAnnotation<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toCollection</span><span class="token punctuation">(</span><span class="token class-name">LinkedHashSet</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">default</span> <span class="token keyword">boolean</span> <span class="token function">hasAnnotation</span><span class="token punctuation">(</span><span class="token class-name">String</span> annotationName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 调用了 getAnnotations()</span>
    <span class="token keyword">return</span> <span class="token function">getAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isDirectlyPresent</span><span class="token punctuation">(</span>annotationName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再进一步查看<code>getAnnotations()</code>方法，进入了<code>AnnotatedTypeMetadata</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AnnotatedTypeMetadata</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 获取注解
     */</span>
    <span class="token class-name">MergedAnnotations</span> <span class="token function">getAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这一样看，似乎注解得到的终极类就是<code>MergedAnnotations</code>了？我们继续探索。</p><h4 id="_3-1-3-mergedannotations" tabindex="-1"><a class="header-anchor" href="#_3-1-3-mergedannotations" aria-hidden="true">#</a> 3.1.3 <code>MergedAnnotations</code></h4><p><code>MergedAnnotations</code>的部分注释如下：</p><blockquote><p>Provides access to a collection of merged annotations, usually obtained from a source such as a {@link Class} or {@link Method}.</p><p>提供对组合注解的集合的访问，这些注解通常是从Class或Method之类的来源获得的。</p></blockquote><p>看来，<code>MergedAnnotations</code> 才是最终的组合注解的集合了，我们来看看它的几个方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 判断注解是否存在，会从所有的注解中判断</span>
<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">A</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">boolean</span> <span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">A</span><span class="token punctuation">&gt;</span></span> annotationType<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 判断注解是否存在，会从所有的注解中判断，与上面的方法不同的是，这里传入的是字符串</span>
<span class="token keyword">boolean</span> <span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token class-name">String</span> annotationType<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 判断直接注解是否存在，也就是只判断当前类上有没有该注解，不判断注解的注解</span>
<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">A</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">boolean</span> <span class="token function">isDirectlyPresent</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">A</span><span class="token punctuation">&gt;</span></span> annotationType<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 功能同上，这里传入的类型是字符串，格式为&quot;包名.类名&quot;</span>
<span class="token keyword">boolean</span> <span class="token function">isDirectlyPresent</span><span class="token punctuation">(</span><span class="token class-name">String</span> annotationType<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 获取注解</span>
<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">A</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">MergedAnnotation</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">A</span><span class="token punctuation">&gt;</span></span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">A</span><span class="token punctuation">&gt;</span></span> annotationType<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 获取注解，这里传入的类型是字符串，格式为&quot;包名.类名&quot;</span>
<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">A</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">MergedAnnotation</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">A</span><span class="token punctuation">&gt;</span></span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">String</span> annotationType<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从方法上大致可以看出，<code>MergedAnnotations</code>是组合注解的集合，提供的注解可以判断某注解是否存在，也可以获取其中的某个注解。</p><h4 id="_3-1-5-mergedannotation" tabindex="-1"><a class="header-anchor" href="#_3-1-5-mergedannotation" aria-hidden="true">#</a> 3.1.5 <code>MergedAnnotation</code></h4><p><code>MergedAnnotations</code> 是注解的集合，那这个集合中放的是啥呢？从它的<code>get(...)</code>方法来看，它存放的是<code>MergedAnnotation</code>，我们再来看看<code>MergedAnnotation</code>支持的方法：</p><p><img src="`+c+`" alt="img"></p><p>从以上的方法可以看到，<code>MergedAnnotation</code> 就是注解的数据抽象，它提供了丰富的api用来获取注解的数据。</p><h4 id="_3-1-6-使用示例" tabindex="-1"><a class="header-anchor" href="#_3-1-6-使用示例" aria-hidden="true">#</a> 3.1.6 使用示例</h4><p>下面来看个示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 得到 SimpleMetadataReaderFactory 实例，最终调用的是 SimpleAnnotationMetadataReadingVisitor 来读取</span>
<span class="token class-name">SimpleMetadataReaderFactory</span> readerFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleMetadataReaderFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">MetadataReader</span> metadataReader <span class="token operator">=</span> readerFactory<span class="token punctuation">.</span><span class="token function">getMetadataReader</span><span class="token punctuation">(</span><span class="token class-name">BeanObj3</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">AnnotationMetadata</span> annotationMetadata <span class="token operator">=</span> metadataReader<span class="token punctuation">.</span><span class="token function">getAnnotationMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// AnnotationMetadata 提供了许多的操作，重点关注注解相关的</span>
<span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> annotationTypes <span class="token operator">=</span> annotationMetadata<span class="token punctuation">.</span><span class="token function">getAnnotationTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;-------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
annotationTypes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>type <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;-------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 这里是直接获取，BeanObj3 上直接标记 @MyComponent的，返回的是true</span>
<span class="token keyword">boolean</span> exist1 <span class="token operator">=</span> annotationMetadata<span class="token punctuation">.</span><span class="token function">hasAnnotation</span><span class="token punctuation">(</span><span class="token class-name">MyComponent</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hasAnnotation @MyComponent:&quot;</span> <span class="token operator">+</span> exist1<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 这里是直接获取，BeanObj3 上是没有直接标记 @Component的，返回的是false</span>
<span class="token keyword">boolean</span> exist2 <span class="token operator">=</span> annotationMetadata<span class="token punctuation">.</span><span class="token function">hasAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Component</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hasAnnotation @Component:&quot;</span> <span class="token operator">+</span> exist2<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 获取 MergedAnnotations</span>
<span class="token class-name">MergedAnnotations</span> annotations <span class="token operator">=</span> annotationMetadata<span class="token punctuation">.</span><span class="token function">getAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;-------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
annotations<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>annotationMergedAnnotation <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>annotationMergedAnnotation<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;-------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 这里是直接获取，BeanObj3 上是没有直接标记 @Component的，返回的是false</span>
<span class="token keyword">boolean</span> directlyPresent <span class="token operator">=</span> annotations<span class="token punctuation">.</span><span class="token function">isDirectlyPresent</span><span class="token punctuation">(</span><span class="token class-name">Component</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;directlyPresent Component:&quot;</span> <span class="token operator">+</span> directlyPresent<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 判断有没有这个注解，BeanObj3 上的@MyComponent中，标记了 @Component 的，返回的是true</span>
<span class="token keyword">boolean</span> present <span class="token operator">=</span> annotations<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token class-name">Component</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;present Component:&quot;</span> <span class="token operator">+</span> present<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 获取 @Component 注解</span>
<span class="token class-name">MergedAnnotation</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Component</span><span class="token punctuation">&gt;</span></span> mergedAnnotation <span class="token operator">=</span> annotations<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Component</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 由于 @MyComponent 的 value() 加了 @AliasFor(annotation = Component.class)</span>
<span class="token comment">// 因此这里得到的 value 是 beanObj3 （BeanObj3里这么指定的：@MyComponent(&quot;beanObj3&quot;)）</span>
<span class="token class-name">String</span> value <span class="token operator">=</span> mergedAnnotation<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;value&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Component value:&quot;</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 将 @Component 的注解的数据转换为 AnnotationAttributes</span>
<span class="token class-name">AnnotationAttributes</span> annotationAttributes <span class="token operator">=</span> mergedAnnotation<span class="token punctuation">.</span><span class="token function">asAnnotationAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>annotationAttributes<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行，结果如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
<span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>learn<span class="token punctuation">.</span>explore<span class="token punctuation">.</span>demo01<span class="token punctuation">.</span></span>MyComponent</span>
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
hasAnnotation <span class="token annotation punctuation">@MyComponent</span><span class="token operator">:</span><span class="token boolean">true</span>
hasAnnotation <span class="token annotation punctuation">@Component</span><span class="token operator">:</span><span class="token boolean">false</span>
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
<span class="token annotation punctuation">@org.springframework.learn.explore.demo01.MyComponent</span><span class="token punctuation">(</span>value<span class="token operator">=</span>beanObj3<span class="token punctuation">)</span>
<span class="token annotation punctuation">@org.springframework.stereotype.Component</span><span class="token punctuation">(</span>value<span class="token operator">=</span>beanObj3<span class="token punctuation">)</span>
<span class="token annotation punctuation">@org.springframework.stereotype.Indexed</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
directlyPresent <span class="token class-name">Component</span><span class="token operator">:</span><span class="token boolean">false</span>
present <span class="token class-name">Component</span><span class="token operator">:</span><span class="token boolean">true</span>
<span class="token class-name">Component</span> value<span class="token operator">:</span>beanObj3
<span class="token punctuation">{</span>value<span class="token operator">=</span>beanObj3<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-1-7-补充-annotationattributes" tabindex="-1"><a class="header-anchor" href="#_3-1-7-补充-annotationattributes" aria-hidden="true">#</a> 3.1.7 补充：<code>AnnotationAttributes</code></h4><p>补充说明下<code>AnnotationAttributes</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnnotationAttributes</span> <span class="token keyword">extends</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它实现了<code>LinkedHashMap</code>，提供的部分方法如下：</p><p><img src="`+l+`" alt="img"></p><p>从这里不难看出，<code>AnnotationAttributes</code>就是包含注解所有属性值的map，key为属性名，value为属性值。</p><h3 id="_3-2-standardannotationmetadata" tabindex="-1"><a class="header-anchor" href="#_3-2-standardannotationmetadata" aria-hidden="true">#</a> 3.2 <code>StandardAnnotationMetadata</code></h3><p>我们接着来看看<code>StandardAnnotationMetadata</code>:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StandardAnnotationMetadata</span> <span class="token keyword">extends</span> <span class="token class-name">StandardClassMetadata</span> 
        <span class="token keyword">implements</span> <span class="token class-name">AnnotationMetadata</span> <span class="token punctuation">{</span>
    
    <span class="token doc-comment comment">/**
     * Create a new <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">StandardAnnotationMetadata</span></span></span><span class="token punctuation">}</span> wrapper for the given Class.
     * <span class="token keyword">@param</span> <span class="token parameter">introspectedClass</span> the Class to introspect
     * <span class="token keyword">@see</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">StandardAnnotationMetadata</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">,</span> <span class="token keyword">boolean</span><span class="token punctuation">)</span></span>
     * <span class="token keyword">@deprecated</span> since 5.2 in favor of the factory method 
     *   <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">AnnotationMetadata</span><span class="token punctuation">#</span><span class="token function">introspect</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
     */</span>
    <span class="token annotation punctuation">@Deprecated</span>
    <span class="token keyword">public</span> <span class="token class-name">StandardAnnotationMetadata</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> introspectedClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">(</span>introspectedClass<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>StandardAnnotationMetadata</code>实现了<code>AnnotationMetadata</code>接口，对于注解的操作与上面介绍的<code>AnnotationMetadata</code>并无太大区别，这里就不赘述了。</p><p>从<code>StandardAnnotationMetadata</code>的构造方法来看，它已经废弃了，让我们使用<code>AnnotationMetadata#introspect(Class)</code>来获取<code>StandardAnnotationMetadata</code>的实例，于是，我们可以像这样来操作：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 获取到的 annotationMetadata 实际上是 StandardAnnotationMetadata</span>
<span class="token class-name">AnnotationMetadata</span> annotationMetadata <span class="token operator">=</span> <span class="token class-name">AnnotationMetadata</span><span class="token punctuation">.</span><span class="token function">introspect</span><span class="token punctuation">(</span><span class="token class-name">BeanObj3</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//----------- 以下内容与SimpleAnnotationMetadataReadingVisitor 一模一样</span>

<span class="token comment">// AnnotationMetadata 提供了许多的操作，重点关注注解相关的</span>
<span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> annotationTypes <span class="token operator">=</span> annotationMetadata<span class="token punctuation">.</span><span class="token function">getAnnotationTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;-------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
annotationTypes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>type <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;-------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 这里是直接获取，BeanObj3 上直接标记 @MyComponent的，返回的是true</span>
<span class="token keyword">boolean</span> exist1 <span class="token operator">=</span> annotationMetadata<span class="token punctuation">.</span><span class="token function">hasAnnotation</span><span class="token punctuation">(</span><span class="token class-name">MyComponent</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hasAnnotation @MyComponent:&quot;</span> <span class="token operator">+</span> exist1<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 这里是直接获取，BeanObj3 上是没有直接标记 @Component的，返回的是false</span>
<span class="token keyword">boolean</span> exist2 <span class="token operator">=</span> annotationMetadata<span class="token punctuation">.</span><span class="token function">hasAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Component</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hasAnnotation @Component:&quot;</span> <span class="token operator">+</span> exist2<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 获取 MergedAnnotations</span>
<span class="token class-name">MergedAnnotations</span> annotations <span class="token operator">=</span> annotationMetadata<span class="token punctuation">.</span><span class="token function">getAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;-------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
annotations<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>annotationMergedAnnotation <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>annotationMergedAnnotation<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;-------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 这里是直接获取，BeanObj3 上是没有直接标记 @Component的，返回的是false</span>
<span class="token keyword">boolean</span> directlyPresent <span class="token operator">=</span> annotations<span class="token punctuation">.</span><span class="token function">isDirectlyPresent</span><span class="token punctuation">(</span><span class="token class-name">Component</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;directlyPresent Component:&quot;</span> <span class="token operator">+</span> directlyPresent<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 判断有没有这个注解，BeanObj3 上的@MyComponent中，标记了 @Component 的，返回的是true</span>
<span class="token keyword">boolean</span> present <span class="token operator">=</span> annotations<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token class-name">Component</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;present Component:&quot;</span> <span class="token operator">+</span> present<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 获取 @Component 注解</span>
<span class="token class-name">MergedAnnotation</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Component</span><span class="token punctuation">&gt;</span></span> mergedAnnotation <span class="token operator">=</span> annotations<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Component</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 由于 @MyComponent 的 value() 加了 @AliasFor(annotation = Component.class)</span>
<span class="token comment">// 因此这里得到的 value 是 beanObj3 （BeanObj3里这么指定的：@MyComponent(&quot;beanObj3&quot;)）</span>
<span class="token class-name">String</span> value <span class="token operator">=</span> mergedAnnotation<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;value&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Component value:&quot;</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 将 @Component 的注解的数据转换为 AnnotationAttributes</span>
<span class="token class-name">AnnotationAttributes</span> annotationAttributes <span class="token operator">=</span> mergedAnnotation<span class="token punctuation">.</span><span class="token function">asAnnotationAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>annotationAttributes<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">sql</span>复制代码<span class="token comment">-------------</span>
org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>learn<span class="token punctuation">.</span>explore<span class="token punctuation">.</span>demo01<span class="token punctuation">.</span>MyComponent
<span class="token comment">-------------</span>
hasAnnotation <span class="token variable">@MyComponent</span>:<span class="token boolean">true</span>
hasAnnotation <span class="token variable">@Component</span>:<span class="token boolean">false</span>
<span class="token comment">-------------</span>
<span class="token variable">@org.springframework.learn.explore.demo01.MyComponent</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token operator">=</span>beanObj3<span class="token punctuation">)</span>
<span class="token variable">@org.springframework.stereotype.Component</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token operator">=</span>beanObj3<span class="token punctuation">)</span>
<span class="token variable">@org.springframework.stereotype.Indexed</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">-------------</span>
directlyPresent Component:<span class="token boolean">false</span>
present Component:<span class="token boolean">true</span>
Component <span class="token keyword">value</span>:beanObj3
{<span class="token keyword">value</span><span class="token operator">=</span>beanObj3}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的示例来看，我们历经千辛万苦，最终得到了<code>MergedAnnotations</code>，然后通过它来判断注解是否存在、获取注解的值。</p><h3 id="_3-3-两者的使用场景" tabindex="-1"><a class="header-anchor" href="#_3-3-两者的使用场景" aria-hidden="true">#</a> 3.3 两者的使用场景</h3><p><code>SimpleAnnotationMetadataReadingVisitor</code>与<code>StandardAnnotationMetadata</code>的主要区别在于，<code>SimpleAnnotationMetadataReadingVisitor</code>是基于asm的实现，<code>StandardAnnotationMetadata</code>是基于反射的实现，那我们在使用时，应该要怎么选呢？</p><p>由于基于反射是要先加类加载到jvm中的，因此我的判断是，<strong>如果当前类没有加载到jvm中，就使用<code>SimpleAnnotationMetadataReadingVisitor</code>，如果类已经加载到jvm中了，两者皆可使用</strong>。</p><p>事实上，在spring包扫描阶段，读取类上的注解时，使用的都是<code>SimpleAnnotationMetadataReadingVisitor</code>，因为此时类并没有加载到jvm，如果使用<code>StandardAnnotationMetadata</code>读取，就会导致类提前加载。类提前加载有什么问题呢？java类是按需加载的，有的类可能在整个jvm生命周期内都没用到，如果全都加载了，就白白浪费内存了。</p><h2 id="四、spring提供的注解工具类" tabindex="-1"><a class="header-anchor" href="#四、spring提供的注解工具类" aria-hidden="true">#</a> 四、spring提供的注解工具类</h2><p>在前面的示例中，我们是这样读取注解的：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 读取 annotationMetadata，也可以使用 SimpleMetadataReaderFactory 读取</span>
<span class="token class-name">AnnotationMetadata</span> annotationMetadata <span class="token operator">=</span> <span class="token class-name">AnnotationMetadata</span><span class="token punctuation">.</span><span class="token function">introspect</span><span class="token punctuation">(</span><span class="token class-name">BeanObj3</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">MergedAnnotations</span> annotations <span class="token operator">=</span> annotationMetadata<span class="token punctuation">.</span><span class="token function">getAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 判断注解是否存在</span>
<span class="token keyword">boolean</span> present <span class="token operator">=</span> annotations<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token class-name">Component</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 获取注解的属性</span>
<span class="token class-name">MergedAnnotation</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Component</span><span class="token punctuation">&gt;</span></span> mergedAnnotation <span class="token operator">=</span> annotations<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Component</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">AnnotationAttributes</span> annotationAttributes <span class="token operator">=</span> mergedAnnotation<span class="token punctuation">.</span><span class="token function">asAnnotationAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相对来说，获取注解的属性步骤比较多，聪明如你，就想到可以将这些步骤封装到一个方法中进行处理，spring也是这么做的，这就得介绍spring中与注解相关的两个类：<code>AnnotationUtils</code>与<code>AnnotatedElementUtils</code>。<code>AnnotationUtils</code> 是直接获取注解的值，不会处理属性覆盖，而<code>AnnotatedElementUtils</code>会处理属性覆盖。</p><p>什么是属性覆盖呢？</p><p>举例来说，<code>@MyComponent</code> 长这样：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token comment">// 注意Component指定的值：123</span>
<span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MyComponent</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span>annotation <span class="token operator">=</span> <span class="token class-name">Component</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>@MyComponent</code>注解中，我们指定了<code>@Component</code>的<code>value</code>值为“123”，然后又这么指定<code>@MyComponent</code>的<code>value</code>值：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@MyComponent</span><span class="token punctuation">(</span><span class="token string">&quot;beanObj3&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanObj3</span> <span class="token punctuation">{</span>

    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终spring初始化得到的<code>BeanObj3</code>的名称是<code>123</code>还是<code>beanObj3</code>呢？从我们设置<code>@MyComponent</code>的<code>value</code>为<code>beanObj3</code>来说，当然是希望 bean 的名称为<code>beanObj3</code>，而最终spring也是这么做的，这就是属性覆盖了：<code>@MyComponent</code>的<code>value</code>覆盖了<code>@Component</code>的<code>value</code>值。</p><p><code>AnnotationUtils</code>/<code>AnnotatedElementUtils</code>与上面介绍的<code>SimpleAnnotationMetadataReadingVisitor</code>/<code>StandardAnnotationMetadata</code>是何关系呢？</p><p>在我们使用<code>SimpleAnnotationMetadataReadingVisitor</code>/<code>StandardAnnotationMetadata</code>时，我们需要得到<code>MergedAnnotations</code>再进行一系列操作（判断注解是否存在、获取注解的属性值等），如果进入<code>AnnotationUtils</code>/<code>AnnotatedElementUtils</code>的源码，就会发现它们的相关方法也是操作<code>MergedAnnotations</code>类，比如获取注解：</p><p><code>AnnotationUtils#getAnnotation(AnnotatedElement, Class&lt;A&gt;)</code> 方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">A</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">A</span> <span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">AnnotatedElement</span> annotatedElement<span class="token punctuation">,</span> 
        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">A</span><span class="token punctuation">&gt;</span></span> annotationType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">AnnotationFilter</span><span class="token punctuation">.</span><span class="token constant">PLAIN</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>annotationType<span class="token punctuation">)</span> <span class="token operator">||</span>
            <span class="token class-name">AnnotationsScanner</span><span class="token punctuation">.</span><span class="token function">hasPlainJavaAnnotationsOnly</span><span class="token punctuation">(</span>annotatedElement<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> annotatedElement<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>annotationType<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 通过操作 MergedAnnotations 进行获取</span>
    <span class="token keyword">return</span> <span class="token class-name">MergedAnnotations</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>annotatedElement<span class="token punctuation">,</span> 
            <span class="token class-name">SearchStrategy</span><span class="token punctuation">.</span><span class="token constant">INHERITED_ANNOTATIONS</span><span class="token punctuation">,</span> <span class="token class-name">RepeatableContainers</span><span class="token punctuation">.</span><span class="token function">none</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>annotationType<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withNonMergedAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">synthesize</span><span class="token punctuation">(</span><span class="token class-name">AnnotationUtils</span><span class="token operator">::</span><span class="token function">isSingleLevelPresent</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>AnnotatedElementUtils#getAllMergedAnnotations(AnnotatedElement, Class&lt;A&gt;)</code> 方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">A</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">A</span><span class="token punctuation">&gt;</span></span> <span class="token function">getAllMergedAnnotations</span><span class="token punctuation">(</span>
        <span class="token class-name">AnnotatedElement</span> element<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">A</span><span class="token punctuation">&gt;</span></span> annotationType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">getAnnotations</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>annotationType<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">MergedAnnotationCollectors</span><span class="token punctuation">.</span><span class="token function">toAnnotationSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// AnnotatedElementUtils#getAnnotations 方法，也是操作 MergedAnnotations 的方法</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">MergedAnnotations</span> <span class="token function">getAnnotations</span><span class="token punctuation">(</span><span class="token class-name">AnnotatedElement</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">MergedAnnotations</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> <span class="token class-name">SearchStrategy</span><span class="token punctuation">.</span><span class="token constant">INHERITED_ANNOTATIONS</span><span class="token punctuation">,</span> 
            <span class="token class-name">RepeatableContainers</span><span class="token punctuation">.</span><span class="token function">none</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此，<code>AnnotationUtils</code>/<code>AnnotatedElementUtils</code>与<code>SimpleAnnotationMetadataReadingVisitor</code>/<code>StandardAnnotationMetadata</code>底层都是操作<code>MergedAnnotations</code>类的。</p><h3 id="_4-1-annotationutils" tabindex="-1"><a class="header-anchor" href="#_4-1-annotationutils" aria-hidden="true">#</a> 4.1 <code>AnnotationUtils</code></h3><p><code>AnnotationUtils</code>支持的部分方法如下：</p><p><img src="`+i+`" alt="img"></p><p>我们来实际使用下这些方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 在 BeanObj3 获取 @Component</span>
<span class="token class-name">Annotation</span> annotation <span class="token operator">=</span> <span class="token class-name">AnnotationUtils</span><span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">BeanObj3</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Component</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> annotation<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;注解不存在！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;annotation: &quot;</span> <span class="token operator">+</span> annotation<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 获取 AnnotationAttributes</span>
<span class="token class-name">AnnotationAttributes</span> annotationAttributes
        <span class="token operator">=</span> <span class="token class-name">AnnotationUtils</span><span class="token punctuation">.</span><span class="token function">getAnnotationAttributes</span><span class="token punctuation">(</span><span class="token class-name">BeanObj3</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> annotation<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;AnnotationAttributes: &quot;</span> <span class="token operator">+</span> annotationAttributes<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 获取 annotationAttributeMap</span>
<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> annotationAttributeMap <span class="token operator">=</span> <span class="token class-name">AnnotationUtils</span><span class="token punctuation">.</span><span class="token function">getAnnotationAttributes</span><span class="token punctuation">(</span>annotation<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;annotationAttributeMap: &quot;</span> <span class="token operator">+</span> annotationAttributeMap<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 获取value的值</span>
<span class="token class-name">Object</span> value <span class="token operator">=</span> <span class="token class-name">AnnotationUtils</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>annotation<span class="token punctuation">,</span> <span class="token string">&quot;value&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;value: &quot;</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果如下：</p><div class="language-ini line-numbers-mode" data-ext="ini"><pre class="language-ini"><code><span class="token key attr-name">annotation: @org.springframework.stereotype.Component(value</span><span class="token punctuation">=</span><span class="token value attr-value">123)</span>
<span class="token key attr-name">AnnotationAttributes: {value</span><span class="token punctuation">=</span><span class="token value attr-value">123}</span>
<span class="token key attr-name">annotationAttributeMap: {value</span><span class="token punctuation">=</span><span class="token value attr-value">123}</span>
value: 123
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从结果来看，直接通过 <code>AnnotationUtils.getAnnotation(...)</code> 也是能获取到<code>@Component</code>注解的，尽管<code>BeanObj3</code>并没有直接标记<code>@Component</code>.需要注意的是，这样获取到的<code>@Component</code>的<code>value</code>值是&quot;123&quot;，并不是<code>@MyComponent</code>设置的<code>beanObj3</code>，这也证明了<code>AnnotationUtils</code>获取属性值时并不进行属性覆盖操作。</p><h3 id="_4-2-annotatedelementutils" tabindex="-1"><a class="header-anchor" href="#_4-2-annotatedelementutils" aria-hidden="true">#</a> 4.2 <code>AnnotatedElementUtils</code></h3><p><code>AnnotatedElementUtils</code>支持的部分方法如下：</p><p><img src="`+u+`" alt="img"></p><p>给个示例吧：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 1. 判断是否有 Component 注解</span>
<span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token class-name">AnnotatedElementUtils</span><span class="token punctuation">.</span><span class="token function">hasAnnotation</span><span class="token punctuation">(</span><span class="token class-name">BeanObj3</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Component</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hasAnnotation: &quot;</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 2. 获取 attributeMap，可以看到的是，获取 @Component 与 @MyComponent 得到的结果不一样</span>
<span class="token comment">// Component attributeMap: {value=[123]}</span>
<span class="token class-name">MultiValueMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> attributeMap1 <span class="token operator">=</span> <span class="token class-name">AnnotatedElementUtils</span>
        <span class="token punctuation">.</span><span class="token function">getAllAnnotationAttributes</span><span class="token punctuation">(</span><span class="token class-name">BeanObj3</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Component</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Component attributeMap: &quot;</span> <span class="token operator">+</span> attributeMap1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// MyComponent attributeMap: {value=[beanObj3]}</span>
<span class="token class-name">MultiValueMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> attributeMap2 <span class="token operator">=</span> <span class="token class-name">AnnotatedElementUtils</span>
        <span class="token punctuation">.</span><span class="token function">getAllAnnotationAttributes</span><span class="token punctuation">(</span><span class="token class-name">BeanObj3</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">MyComponent</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;MyComponent attributeMap: &quot;</span> <span class="token operator">+</span> attributeMap2<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 3. 获取所有的 @Component 注解，value=beanObj3</span>
<span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Component</span><span class="token punctuation">&gt;</span></span> mergedAnnotations <span class="token operator">=</span> <span class="token class-name">AnnotatedElementUtils</span>
        <span class="token punctuation">.</span><span class="token function">getAllMergedAnnotations</span><span class="token punctuation">(</span><span class="token class-name">BeanObj3</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Component</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;mergedAnnotations: &quot;</span> <span class="token operator">+</span> mergedAnnotations<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
<span class="token comment">// 4. 获取属性值，{value=beanObj3}</span>
<span class="token class-name">AnnotationAttributes</span> attributes <span class="token operator">=</span> <span class="token class-name">AnnotatedElementUtils</span>
        <span class="token punctuation">.</span><span class="token function">getMergedAnnotationAttributes</span><span class="token punctuation">(</span><span class="token class-name">BeanObj3</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Component</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;attributes: &quot;</span> <span class="token operator">+</span> attributes<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 5. 获取 MyComponent 上的注解</span>
<span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> types <span class="token operator">=</span> <span class="token class-name">AnnotatedElementUtils</span>
        <span class="token punctuation">.</span><span class="token function">getMetaAnnotationTypes</span><span class="token punctuation">(</span><span class="token class-name">BeanObj3</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">MyComponent</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;types: &quot;</span> <span class="token operator">+</span> types<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果如下：</p><div class="language-ini line-numbers-mode" data-ext="ini"><pre class="language-ini"><code>hasAnnotation: true
<span class="token key attr-name">Component attributeMap: {value</span><span class="token punctuation">=</span><span class="token value attr-value">[123]}</span>
<span class="token key attr-name">MyComponent attributeMap: {value</span><span class="token punctuation">=</span><span class="token value attr-value">[beanObj3]}</span>
<span class="token key attr-name">mergedAnnotations: [@org.springframework.stereotype.Component(value</span><span class="token punctuation">=</span><span class="token value attr-value">beanObj3)]</span>
<span class="token key attr-name">attributes: {value</span><span class="token punctuation">=</span><span class="token value attr-value">beanObj3}</span>
types: [org.springframework.stereotype.Component, org.springframework.stereotype.Indexed]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从代码来看，在得到的<code>Set&lt;Component&gt;</code>与<code>AnnotationAttributes</code>中，属性值已经合并了.</p><p>在选择使用<code>AnnotationUtils</code>还是<code>AnnotatedElementUtils</code>时，可以根据要不要属性覆盖来选择，如果需要处理属性覆盖，就使用<code>AnnotatedElementUtils</code>，如果不需要，就使用<code>AnnotationUtils</code>吧！</p><h2 id="五、总结" tabindex="-1"><a class="header-anchor" href="#五、总结" aria-hidden="true">#</a> 五、总结</h2><p>本文介绍了spring处理注解的操作，主要介绍了<code>SimpleAnnotationMetadataReadingVisitor</code>与<code>StandardAnnotationMetadata</code>的区别与使用方法。由于这两个类使用起来步骤比较多，文中又介绍了spring提供的两个工具类：<code>AnnotationUtils</code>与<code>AnnotatedElementUtils</code>，如果需要处理属性覆盖，需要使用<code>AnnotatedElementUtils</code>，如果不需要，就使用<code>AnnotationUtils</code>。</p>`,126),r=[d];function m(v,b){return s(),a("div",null,r)}const A=n(k,[["render",m],["__file","spring-collection-annotation.html.vue"]]);export{A as default};
