const e=JSON.parse('{"key":"v-2cba169d","path":"/quality/design-mode/design-mediator.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"中介者模式","slug":"中介者模式","link":"#中介者模式","children":[{"level":3,"title":"6.7.1 概述","slug":"_6-7-1-概述","link":"#_6-7-1-概述","children":[]},{"level":3,"title":"6.7.2 结构","slug":"_6-7-2-结构","link":"#_6-7-2-结构","children":[]},{"level":3,"title":"6.7.3 案例实现","slug":"_6-7-3-案例实现","link":"#_6-7-3-案例实现","children":[]},{"level":3,"title":"6.7.4 优缺点","slug":"_6-7-4-优缺点","link":"#_6-7-4-优缺点","children":[]},{"level":3,"title":"6.7.5 使用场景","slug":"_6-7-5-使用场景","link":"#_6-7-5-使用场景","children":[]}]}],"git":{"createdTime":1673767263000,"updatedTime":1673767263000,"contributors":[{"name":"xuliang","email":"895252461@qq.com","commits":1}]},"readingTime":{"minutes":4.64,"words":1393},"filePathRelative":"quality/design-mode/design-mediator.md","localizedDate":"2023年1月15日","excerpt":"<h2> 中介者模式</h2>\\n<h3> 6.7.1 概述</h3>\\n<p>一般来说，同事类之间的关系是比较复杂的，多个同事类之间互相关联时，他们之间的关系会呈现为复杂的网状结构，这是一种过度耦合的架构，即不利于类的复用，也不稳定。例如在下左图中，有六个同事类对象，假如对象1发生变化，那么将会有4个对象受到影响。如果对象2发生变化，那么将会有5个对象受到影响。也就是说，同事类之间直接关联的设计是不好的。</p>\\n<p>如果引入中介者模式，那么同事类之间的关系将变为星型结构，从下右图中可以看到，任何一个类的变动，只会影响的类本身，以及中介者，这样就减小了系统的耦合。一个好的设计，必定不会把所有的对象关系处理逻辑封装在本类中，而是使用一个专门的类来管理那些不属于自己的行为。</p>"}');export{e as data};
