const l=JSON.parse('{"key":"v-2b64c240","path":"/java/java-base/java-reflect.html","title":"Java的类型信息与反射机制","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"一、深入理解Class对象","slug":"一、深入理解class对象","link":"#一、深入理解class对象","children":[{"level":3,"title":"1.1 RRTI的概念以及Class对象作用","slug":"_1-1-rrti的概念以及class对象作用","link":"#_1-1-rrti的概念以及class对象作用","children":[]},{"level":3,"title":"1.2 Class对象的加载及其获取方式","slug":"_1-2-class对象的加载及其获取方式","link":"#_1-2-class对象的加载及其获取方式","children":[]}]},{"level":2,"title":"二、理解反射技术","slug":"二、理解反射技术","link":"#二、理解反射技术","children":[{"level":3,"title":"2.1 Constructor类及其用法","slug":"_2-1-constructor类及其用法","link":"#_2-1-constructor类及其用法","children":[]},{"level":3,"title":"2.2 Field类及其用法","slug":"_2-2-field类及其用法","link":"#_2-2-field类及其用法","children":[]},{"level":3,"title":"2.3 Method类及其用法","slug":"_2-3-method类及其用法","link":"#_2-3-method类及其用法","children":[]},{"level":3,"title":"2.4 反射包中的Array类","slug":"_2-4-反射包中的array类","link":"#_2-4-反射包中的array类","children":[]}]}],"git":{"createdTime":1696594256000,"updatedTime":1705554578000,"contributors":[{"name":"诗人都藏在水底","email":"895252461@qq.com","commits":2},{"name":"xuliang","email":"895252461@qq.com","commits":1}]},"readingTime":{"minutes":36.31,"words":10894},"filePathRelative":"java/java-base/java-reflect.md","localizedDate":"2023年10月6日","excerpt":"<h1> Java的类型信息与反射机制</h1>\\n<h2> 一、深入理解Class对象</h2>\\n<h3> 1.1 RRTI的概念以及Class对象作用</h3>\\n<p>认识Class对象之前，先来了解一个概念，RTTI（Run-Time Type Identification）运行时类型识别，对于这个词一直是 C++ 中的概念，至于Java中出现RRTI的说法则是源于《Thinking in Java》一书，其作用是在运行时识别一个对象的类型和类的信息，这里分两种：传统的”RRTI”,它假定我们在编译期已知道了所有类型(在没有反射机制创建和使用类对象时，一般都是编译期已确定其类型，如new对象时该类必须已定义好)，另外一种是反射机制，它允许我们在运行时发现和使用类型的信息。在Java中用来表示运行时类型信息的对应类就是Class类，Class类也是一个实实在在的类，存在于JDK的java.lang包中，其部分源码如下：</p>"}');export{l as data};
