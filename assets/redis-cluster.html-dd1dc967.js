import{_ as i,V as t,W as l,X as s,Y as n,Z as r,a0 as a,D as d}from"./framework-5dde3bca.js";const c="/assets/1460000022808581-a1b67110.png",p="/assets/1460000022808583-63d52a1e.png",o="/assets/1460000022808580-9138cec3.png",u="/assets/1460000022808582-fbded0a3.png",m="/assets/1460000022808584-033fd1cc.png",v="/assets/1460000022808585-ac2016e4.png",b="/assets/1460000022808586-f0d31797.png",h="/assets/1460000022808587-12d9f682.png",k="/assets/1460000022808590-ecb03df2.png",g="/assets/1460000022808588-5b2d6cfa.png",f="/assets/1460000022808592-abb71a33.png",_="/assets/1460000022808589-ff24b065.png",x="/assets/1460000022808594-6c96c50e.png",S="/assets/1460000022808591-1c213e17.png",R="/assets/1460000022808593-e742cf58.png",y={},M=a('<h1 id="redis-cluster" tabindex="-1"><a class="header-anchor" href="#redis-cluster" aria-hidden="true">#</a> Redis Cluster</h1><blockquote><p>最近在面试过程中被面试官问到 Redis 集群数据是如何复制的，由于之前没有准备直接懵了。</p><p>事后查了查这个问题其实也挺简单，如果你之前也不知道，没问题，赶紧浅尝辄止，速度3遍即可入门。</p></blockquote><p>阅读本文，你可能会有哪些收获呢？</p><ul><li>首先，你会知道有三种集群模式</li><li>然后对每种集群模式的原理有个大概了解</li><li>当然还能看到集群演变的影子</li><li>最后还会有手把手的实操</li></ul><p><strong>Redis 支持三种集群方案</strong></p><ul><li>主从复制模式</li><li>Sentinel（哨兵）模式</li><li>Cluster 模式</li></ul><p>集群搭建</p><p>https://blog.csdn.net/u010784529/article/details/125178984</p><p>Redis集群架构 写的详细的文章</p><p>https://blog.csdn.net/weixin_40242845/article/details/123491390</p><p>Redis 事物</p><p>https://segmentfault.com/a/1190000023951592</p><h2 id="redis-集群的三种模式" tabindex="-1"><a class="header-anchor" href="#redis-集群的三种模式" aria-hidden="true">#</a> Redis 集群的三种模式</h2><h3 id="主从复制模式" tabindex="-1"><a class="header-anchor" href="#主从复制模式" aria-hidden="true">#</a> 主从复制模式</h3><p><img src="'+c+'" alt="img"></p><h4 id="主从复制的作用" tabindex="-1"><a class="header-anchor" href="#主从复制的作用" aria-hidden="true">#</a> 主从复制的作用</h4><p>通过持久化功能，Redis保证了即使在服务器重启的情况下也不会丢失（或少量丢失）数据，因为持久化会把内存中数据保存到硬盘上，重启会从硬盘上加载数据。 但是由于数据是存储在一台服务器上的，如果这台服务器出现硬盘故障等问题，也会导致数据丢失。</p><p>为了避免单点故障，通常的做法是将数据库复制多个副本以部署在不同的服务器上，这样即使有一台服务器出现故障，其他服务器依然可以继续提供服务。</p><p>为此， <strong>Redis 提供了复制（replication）功能，可以实现当一台数据库中的数据更新后，自动将更新的数据同步到其他数据库上</strong>。</p><p>在复制的概念中，数据库分为两类，一类是主数据库（master），另一类是从数据库(slave）。主数据库可以进行读写操作，当写操作导致数据变化时会自动将数据同步给从数据库。而从数据库一般是只读的，并接受主数据库同步过来的数据。一个主数据库可以拥有多个从数据库，而一个从数据库只能拥有一个主数据库。</p><p><strong>总结：引入主从复制机制的目的有两个</strong></p><ul><li>一个是读写分离，分担 &quot;master&quot; 的读写压力</li><li>一个是方便做容灾恢复</li></ul><h4 id="主从复制原理" tabindex="-1"><a class="header-anchor" href="#主从复制原理" aria-hidden="true">#</a> <strong>主从复制原理</strong></h4><p><img src="'+p+'" alt="img"></p><ul><li>从数据库启动成功后，连接主数据库，发送 SYNC 命令；</li><li>主数据库接收到 SYNC 命令后，开始执行 BGSAVE 命令生成 RDB 文件并使用缓冲区记录此后执行的所有写命令；</li><li>主数据库 BGSAVE 执行完后，向所有从数据库发送快照文件，并在发送期间继续记录被执行的写命令；</li><li>从数据库收到快照文件后丢弃所有旧数据，载入收到的快照；</li><li>主数据库快照发送完毕后开始向从数据库发送缓冲区中的写命令；</li><li>从数据库完成对快照的载入，开始接收命令请求，并执行来自主数据库缓冲区的写命令；（<strong>从数据库初始化完成</strong>）</li><li>主数据库每执行一个写命令就会向从数据库发送相同的写命令，从数据库接收并执行收到的写命令（<strong>从数据库初始化完成后的操作</strong>）</li><li>出现断开重连后，2.8之后的版本会将断线期间的命令传给重数据库，增量复制。</li><li>主从刚刚连接的时候，进行全量同步；全同步结束后，进行增量同步。当然，如果有需要，slave 在任何时候都可以发起全量同步。Redis 的策略是，无论如何，首先会尝试进行增量同步，如不成功，要求从机进行全量同步。</li></ul><h4 id="主从复制优缺点" tabindex="-1"><a class="header-anchor" href="#主从复制优缺点" aria-hidden="true">#</a> 主从复制优缺点</h4><p><strong>主从复制优点</strong></p><ul><li>支持主从复制，主机会自动将数据同步到从机，可以进行读写分离；</li><li>为了分载 Master 的读操作压力，Slave 服务器可以为客户端提供只读操作的服务，写服务仍然必须由Master来完成；</li><li>Slave 同样可以接受其它 Slaves 的连接和同步请求，这样可以有效的分载 Master 的同步压力；</li><li>Master Server 是以非阻塞的方式为 Slaves 提供服务。所以在 Master-Slave 同步期间，客户端仍然可以提交查询或修改请求；</li><li>Slave Server 同样是以非阻塞的方式完成数据同步。在同步期间，如果有客户端提交查询请求，Redis则返回同步之前的数据；</li></ul><p><strong>主从复制缺点</strong></p><ul><li>Redis不具备自动容错和恢复功能，主机从机的宕机都会导致前端部分读写请求失败，需要等待机器重启或者手动切换前端的IP才能恢复（<strong>也就是要人工介入</strong>）；</li><li>主机宕机，宕机前有部分数据未能及时同步到从机，切换IP后还会引入数据不一致的问题，降低了系统的可用性；</li><li>如果多个 Slave 断线了，需要重启的时候，尽量不要在同一时间段进行重启。因为只要 Slave 启动，就会发送sync 请求和主机全量同步，当多个 Slave 重启的时候，可能会导致 Master IO 剧增从而宕机。</li><li>Redis 较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂；</li></ul><h3 id="sentinel-哨兵-模式" tabindex="-1"><a class="header-anchor" href="#sentinel-哨兵-模式" aria-hidden="true">#</a> Sentinel（哨兵）模式</h3><p>第一种主从同步/复制的模式，当主服务器宕机后，需要手动把一台从服务器切换为主服务器，这就需要人工干预，费事费力，还会造成一段时间内服务不可用。这不是一种推荐的方式，更多时候，我们优先考虑哨兵模式。</p><p>哨兵模式是一种特殊的模式，首先 Redis 提供了哨兵的命令，<strong>哨兵是一个独立的进程，作为进程，它会独立运行。其原理是哨兵通过发送命令，等待Redis服务器响应，从而监控运行的多个 Redis 实例</strong>。</p><p><img src="'+o+'" alt="单哨兵"></p><h4 id="哨兵模式的作用" tabindex="-1"><a class="header-anchor" href="#哨兵模式的作用" aria-hidden="true">#</a> <strong>哨兵模式的作用</strong></h4><ul><li>通过发送命令，让 Redis 服务器返回监控其运行状态，包括主服务器和从服务器；</li><li>当哨兵监测到 master 宕机，会自动将 slave 切换成 master ，然后通过<strong>发布订阅模式</strong>通知其他的从服务器，修改配置文件，让它们切换主机；</li></ul><p>然而一个哨兵进程对Redis服务器进行监控，也可能会出现问题，为此，我们可以使用多个哨兵进行监控。各个哨兵之间还会进行监控，这样就形成了多哨兵模式。</p><p><img src="'+u+'" alt="多哨兵"></p><h4 id="故障切换的过程" tabindex="-1"><a class="header-anchor" href="#故障切换的过程" aria-hidden="true">#</a> <strong>故障切换的过程</strong></h4><p>假设主服务器宕机，哨兵1先检测到这个结果，系统并不会马上进行 failover 过程，仅仅是哨兵1主观的认为主服务器不可用，这个现象成为<strong>主观下线</strong>。当后面的哨兵也检测到主服务器不可用，并且数量达到一定值时，那么哨兵之间就会进行一次投票，投票的结果由一个哨兵发起，进行 failover 操作。切换成功后，就会通过发布订阅模式，让各个哨兵把自己监控的从服务器实现切换主机，这个过程称为<strong>客观下线</strong>。这样对于客户端而言，一切都是透明的。</p><h4 id="哨兵模式的工作方式" tabindex="-1"><a class="header-anchor" href="#哨兵模式的工作方式" aria-hidden="true">#</a> 哨兵模式的工作方式：</h4><ul><li>每个Sentinel（哨兵）进程以每秒钟一次的频率向整个集群中的 Master 主服务器，Slave 从服务器以及其他Sentinel（哨兵）进程发送一个 PING 命令。</li><li>如果一个实例（instance）距离最后一次有效回复 PING 命令的时间超过 down-after-milliseconds 选项所指定的值， 则这个实例会被 Sentinel（哨兵）进程标记为主观下线（SDOWN）</li><li>如果一个 Master 主服务器被标记为主观下线（SDOWN），则正在监视这个 Master 主服务器的所有 Sentinel（哨兵）进程要以每秒一次的频率确认 Master 主服务器的确进入了主观下线状态</li><li>当有足够数量的 Sentinel（哨兵）进程（大于等于配置文件指定的值）在指定的时间范围内确认 Master 主服务器进入了主观下线状态（SDOWN）， 则 Master 主服务器会被标记为客观下线（ODOWN）</li><li>在一般情况下， 每个 Sentinel（哨兵）进程会以每 10 秒一次的频率向集群中的所有 Master 主服务器、Slave 从服务器发送 INFO 命令。</li><li>当 Master 主服务器被 Sentinel（哨兵）进程标记为客观下线（ODOWN）时，Sentinel（哨兵）进程向下线的 Master 主服务器的所有 Slave 从服务器发送 INFO 命令的频率会从 10 秒一次改为每秒一次。</li><li>若没有足够数量的 Sentinel（哨兵）进程同意 Master主服务器下线， Master 主服务器的客观下线状态就会被移除。若 Master 主服务器重新向 Sentinel（哨兵）进程发送 PING 命令返回有效回复，Master主服务器的主观下线状态就会被移除。</li></ul><h4 id="哨兵模式的优缺点" tabindex="-1"><a class="header-anchor" href="#哨兵模式的优缺点" aria-hidden="true">#</a> 哨兵模式的优缺点</h4><p><strong>优点：</strong></p><ul><li>哨兵模式是基于主从模式的，所有主从的优点，哨兵模式都具有。</li><li>主从可以自动切换，系统更健壮，可用性更高(<strong>可以看作自动版的主从复制</strong>)。</li></ul><p><strong>缺点：</strong></p><ul><li>Redis较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。</li></ul><h3 id="cluster-集群模式-redis官方" tabindex="-1"><a class="header-anchor" href="#cluster-集群模式-redis官方" aria-hidden="true">#</a> Cluster 集群模式（Redis官方）</h3><p>集群中并没有sentinel，如何做到高可用？</p><p>这里并没有说清楚。看这里https://cloud.tencent.com/developer/article/1592432</p><p>Redis Cluster是一种服务器 Sharding 技术，3.0版本开始正式提供。</p><p>Redis 的哨兵模式基本已经可以实现高可用，读写分离 ，但是在这种模式下每台 Redis 服务器都存储相同的数据，很浪费内存，所以在 redis3.0上加入了 Cluster 集群模式，实现了 Redis 的分布式存储，<strong>也就是说每台 Redis 节点上存储不同的内容</strong>。</p><p><img src="'+m+'" alt="image-20200531184321294"></p><p>在这个图中，每一个蓝色的圈都代表着一个 redis 的服务器节点。它们任何两个节点之间都是相互连通的。客户端可以与任何一个节点相连接，然后就可以访问集群中的任何一个节点。对其进行存取和其他操作。</p><h4 id="集群的数据分片" tabindex="-1"><a class="header-anchor" href="#集群的数据分片" aria-hidden="true">#</a> <strong>集群的数据分片</strong></h4><p>Redis 集群没有使用一致性 hash，而是引入了哈希槽【hash slot】的概念。</p><p>Redis 集群有16384 个哈希槽，每个 key 通过 CRC16 校验后对 16384 取模来决定放置哪个槽。集群的每个节点负责一部分hash槽，举个例子，比如当前集群有3个节点，那么：</p><ul><li>节点 A 包含 0 到 5460 号哈希槽</li><li>节点 B 包含 5461 到 10922 号哈希槽</li><li>节点 C 包含 10923 到 16383 号哈希槽</li></ul><p>这种结构很容易添加或者删除节点。比如如果我想新添加个节点 D ， 我需要从节点 A， B， C 中得部分槽到 D 上。如果我想移除节点 A ，需要将 A 中的槽移到 B 和 C 节点上，然后将没有任何槽的 A 节点从集群中移除即可。由于从一个节点将哈希槽移动到另一个节点并不会停止服务，所以无论添加删除或者改变某个节点的哈希槽的数量都不会造成集群不可用的状态。</p><p>在 Redis 的每一个节点上，都有这么两个东西，一个是插槽（slot），它的的取值范围是：0-16383。还有一个就是 cluster，可以理解为是一个集群管理的插件。当我们的存取的 Key到达的时候，Redis 会根据 CRC16 的算法得出一个结果，然后把结果对 16384 求余数，这样每个 key 都会对应一个编号在 0-16383 之间的哈希槽，通过这个值，去找到对应的插槽所对应的节点，然后直接自动跳转到这个对应的节点上进行存取操作。</p><h4 id="redis-集群的主从复制模型" tabindex="-1"><a class="header-anchor" href="#redis-集群的主从复制模型" aria-hidden="true">#</a> Redis 集群的主从复制模型</h4><p>为了保证高可用，redis-cluster集群引入了主从复制模型，一个主节点对应一个或者多个从节点，当主节点宕机的时候，就会启用从节点。当其它主节点 ping 一个主节点 A 时，如果半数以上的主节点与 A 通信超时，那么认为主节点 A 宕机了。如果主节点 A 和它的从节点 A1 都宕机了，那么该集群就无法再提供服务了。</p><h4 id="集群的特点" tabindex="-1"><a class="header-anchor" href="#集群的特点" aria-hidden="true">#</a> <strong>集群的特点</strong></h4><ul><li>所有的 redis 节点彼此互联(PING-PONG机制)，内部使用二进制协议优化传输速度和带宽。</li><li>节点的 fail 是通过集群中超过半数的节点检测失效时才生效。</li><li>客户端与 Redis 节点直连，不需要中间代理层.客户端不需要连接集群所有节点，连接集群中任何一个可用节点即可。</li></ul><hr><blockquote><p>理论课结束了，不如实操下感受一下？</p></blockquote><h2 id="手把手体验集群配置" tabindex="-1"><a class="header-anchor" href="#手把手体验集群配置" aria-hidden="true">#</a> 手把手体验集群配置</h2><p>前提条件</p>',68),C={href:"https://link.segmentfault.com/?enc=KULyH%2BPG3BmWq4qFIvjIhg%3D%3D.LV9e%2BRRFkTMF5LdiKwnvY4N7Co35zTsZuGlw8vaj2ukWOWMpKjOmjNZVtwkTWs%2F1",target:"_blank",rel:"noopener noreferrer"},N=s("li",null,"linux 环境，我用的 centos 7.7， VM 环境",-1),q=a(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># redis 准备</span>
$ <span class="token builtin class-name">cd</span> /opt
$ <span class="token function">wget</span> http://download.redis.io/releases/redis-5.0.5.tar.gz
$ <span class="token function">tar</span> xzf redis-5.0.5.tar.gz
$ <span class="token builtin class-name">cd</span> redis-5.0.5
$ <span class="token function">make</span>
$ <span class="token function">make</span> <span class="token function">install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>生产环境做集群一般会采用多个独立主机，这里做演示在一台虚拟机上同时运行多个节点的，这点注意一下。</p><h3 id="主从复制" tabindex="-1"><a class="header-anchor" href="#主从复制" aria-hidden="true">#</a> 主从复制</h3><p>主要有两步</p><ul><li>准备 master/slave 配置文件</li><li>先启动 master 再启动 slave，进行验证</li></ul><h5 id="集群规划" tabindex="-1"><a class="header-anchor" href="#集群规划" aria-hidden="true">#</a> 集群规划</h5><table><thead><tr><th>节点</th><th>配置文件</th><th>端口</th></tr></thead><tbody><tr><td>master</td><td>redis6379.conf</td><td>6379</td></tr><tr><td>slave1</td><td>redis6380.conf</td><td>6380</td></tr><tr><td>slave1</td><td>redis6381.conf</td><td>6380</td></tr></tbody></table><h5 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件" aria-hidden="true">#</a> 配置文件</h5><p>内容如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># redis6379.conf    master</span>
<span class="token comment"># 包含命令，有点复用的意思</span>
include /opt/redis-5.0.5/redis.conf
pidfile /var/run/redis_6379.pid
port    <span class="token number">6379</span>
dbfilename dump6379.rdb
logfile <span class="token string">&quot;my-redis-6379.log&quot;</span>

<span class="token comment"># redis6380.conf    slave1</span>
include /opt/redis-5.0.5/redis.conf
pidfile /var/run/redis_6380.pid
port    <span class="token number">6380</span>
dbfilename dump6380.rdb
logfile <span class="token string">&quot;my-redis-6380.log&quot;</span>
<span class="token comment"># 最后一行设置了主节点的 ip 端口</span>
replicaof <span class="token number">127.0</span>.0.1 <span class="token number">6379</span>

<span class="token comment"># redis6381.conf    slave2</span>
include /opt/redis-5.0.5/redis.conf
pidfile /var/run/redis_6381.pid
port    <span class="token number">6381</span>
dbfilename dump6381.rdb
logfile <span class="token string">&quot;my-redis-6381.log&quot;</span>
<span class="token comment"># 最后一行设置了主节点的 ip 端口</span>
replicaof <span class="token number">127.0</span>.0.1 <span class="token number">6379</span>

<span class="token comment">## 注意 redis.conf 要调整一项，设置后台运行，对咱们操作比较友好</span>
daemonize <span class="token function">yes</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+v+`" alt="image-20200531215821358"></p><h5 id="启动节点" tabindex="-1"><a class="header-anchor" href="#启动节点" aria-hidden="true">#</a> 启动节点</h5><p>启动节点，然后查看节点信息</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 顺序启动节点</span>
$ redis-server redis6379.conf
$ redis-server redis6380.conf
$ redis-server redis6381.conf

<span class="token comment"># 进入redis 客户端，开多个窗口查看方便些</span>
$ redis-cli <span class="token parameter variable">-p</span> <span class="token number">6379</span>
$ info replication
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>info replication</strong> 命令可以查看连接该数据库的其它库的信息，可看到有两个 slave 连接到 master</p><p><img src="`+b+'" alt="主节点信息"></p><p><img src="'+h+`" alt="从节点信息"></p><h5 id="数据同步验证" tabindex="-1"><a class="header-anchor" href="#数据同步验证" aria-hidden="true">#</a> 数据同步验证</h5><p><strong>在 master 节点设置值，在 slave1/slave2 节点可以查看数据同步情况</strong></p><div class="language-accesslog line-numbers-mode" data-ext="accesslog"><pre class="language-accesslog"><code># master
$ redis-cli -p 6379
127.0.0.1:6379&gt; set k1 v1
OK

# slave1
$ redis-cli -p 6380
127.0.0.1:6380&gt; get k1
&quot;v1&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sentinel-哨兵-模式-1" tabindex="-1"><a class="header-anchor" href="#sentinel-哨兵-模式-1" aria-hidden="true">#</a> Sentinel（哨兵）模式</h3><p>上面也说了哨兵其实主动复制的自动版，所以需要先配置好主从复制，不同点在于要增加几个哨兵进行监控。</p><p>主要有两步：</p><ul><li>准备主从复制集群，并启动</li><li>增加哨兵配置，启动验证</li></ul><h5 id="集群规划-1" tabindex="-1"><a class="header-anchor" href="#集群规划-1" aria-hidden="true">#</a> 集群规划</h5><p>一般来说，哨兵模式的集群是：一主，二从，三哨兵。</p><p>那咱们就来演示一下三个哨兵的集群。</p><table><thead><tr><th>节点</th><th>配置</th><th>端口</th></tr></thead><tbody><tr><td>master</td><td>redis6379.conf</td><td>6379</td></tr><tr><td>slave1</td><td>redis6380.conf</td><td>6380</td></tr><tr><td>slave2</td><td>redis6381.conf</td><td>6381</td></tr><tr><td>sentinel1</td><td>sentinel1.conf</td><td>26379</td></tr><tr><td>sentinel2</td><td>sentinel2.conf</td><td>26380</td></tr><tr><td>sentinel3</td><td>sentinel3.conf</td><td>26381</td></tr></tbody></table><h5 id="哨兵配置" tabindex="-1"><a class="header-anchor" href="#哨兵配置" aria-hidden="true">#</a> 哨兵配置</h5><p>哨兵的配置其实跟 redis.conf 有点像，可以看一下自带的 <code>sentinel.conf</code></p><p>这里咱们创建三个哨兵文件， <strong>哨兵文件的区别在于启动端口不同</strong></p><div class="language-smali line-numbers-mode" data-ext="smali"><pre class="language-smali"><code><span class="token comment"># 文件内容</span>
<span class="token comment"># sentinel1.conf</span>
port <span class="token number">26379</span>
sentinel monitor mymaster 127.0.0.1 <span class="token number">6379</span> <span class="token number">1</span>
<span class="token comment"># sentinel2.conf</span>
port <span class="token number">26380</span>
sentinel monitor mymaster 127.0.0.1 <span class="token number">6379</span> <span class="token number">1</span>
<span class="token comment"># sentinel3.conf</span>
port <span class="token number">26381</span>
sentinel monitor mymaster 127.0.0.1 <span class="token number">6379</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+k+`" alt="image-20200531225859175"></p><h5 id="启动哨兵" tabindex="-1"><a class="header-anchor" href="#启动哨兵" aria-hidden="true">#</a> 启动哨兵</h5><p>先把 master-slave 启动！</p><p>然后，挨个把三个都启动了</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ redis-sentinel sentinel1.conf
$ redis-sentinel sentinel2.conf
$ redis-sentinel sentinel3.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动之后日志如下，可以看到监听到的主/从节点情况以及哨兵集群情况</p><p><img src="`+g+'" alt="image-20200531230243940"></p><h5 id="主节点下线模拟" tabindex="-1"><a class="header-anchor" href="#主节点下线模拟" aria-hidden="true">#</a> 主节点下线模拟</h5><p>我们在 master(6379) 节点 执行 <code>shutdown</code>，然后观察哨兵会帮我做什么？</p><p>可以看到哨兵扫描到了 master 下线， 然后经过一系列判断，投票等操作重新选举了master(6381) 节点</p><p><img src="'+f+'" alt="image-20200531230641149"></p><p>可以查看到，6381 已成为 master</p><p><img src="'+_+'" alt="image-20200531231015090"></p><p>然后我们可以看到， 即使我们把原 master 节点恢复运行， 它也只是 slave 身份了存在了， 失去了大哥的身份， 可谓是风水轮流转了</p><p><img src="'+x+`" alt="image-20200531231120269"></p><h3 id="cluster-集群模式" tabindex="-1"><a class="header-anchor" href="#cluster-集群模式" aria-hidden="true">#</a> Cluster 集群模式</h3><p>Redis 的 Cluster 集群模式， 启动还挺简单</p><p>主要有两步</p><ul><li>配置文件</li><li>启动验证</li></ul><h5 id="集群规划-2" tabindex="-1"><a class="header-anchor" href="#集群规划-2" aria-hidden="true">#</a> 集群规划</h5><p>根据官方推荐，集群部署至少要 3 台以上的master节点，最好使用 3 主 3 从六个节点的模式。</p><table><thead><tr><th>节点</th><th>配置</th><th>端口</th></tr></thead><tbody><tr><td>cluster-master1</td><td>redis7001.conf</td><td>7001</td></tr><tr><td>cluster-master2</td><td>redis7002.conf</td><td>7002</td></tr><tr><td>cluster-master3</td><td>redis7003.conf</td><td>7003</td></tr><tr><td>cluster-slave1</td><td>redis7004.conf</td><td>7004</td></tr><tr><td>cluster-slave2</td><td>redis7006.conf</td><td>7005</td></tr><tr><td>cluster-slave3</td><td>redis7006.conf</td><td>7006</td></tr></tbody></table><h5 id="配置文件-1" tabindex="-1"><a class="header-anchor" href="#配置文件-1" aria-hidden="true">#</a> 配置文件</h5><p>咱们准备 6 个配置文件 ，端口 7001，7002，7003，7004，7005，7006</p><p>分别命名成 redis7001.conf ......redis7006.conf</p><p>redis7001.conf 配置文件内容如下(记得复制6份并替换端口号)</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 端口</span>
port <span class="token number">7001</span>  
<span class="token comment"># 启用集群模式</span>
cluster-enabled <span class="token function">yes</span> 
<span class="token comment"># 根据你启用的节点来命名，最好和端口保持一致，这个是用来保存其他节点的名称，状态等信息的</span>
cluster-config-file nodes_7001.conf 
<span class="token comment"># 超时时间</span>
cluster-node-timeout <span class="token number">5000</span>
appendonly <span class="token function">yes</span>
<span class="token comment"># 后台运行</span>
daemonize <span class="token function">yes</span>
<span class="token comment"># 非保护模式</span>
protected-mode no 
pidfile  /var/run/redis_7001.pid
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="启动-redis-节点" tabindex="-1"><a class="header-anchor" href="#启动-redis-节点" aria-hidden="true">#</a> 启动 redis 节点</h5><ul><li>挨个启动节点</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-server redis7001.conf
<span class="token punctuation">..</span>.
redis-server redis7006.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看以下启动情况</p><p><img src="`+S+`" alt="image-20200601002803562"></p><ul><li>启动集群</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 执行命令</span>
<span class="token comment"># --cluster-replicas 1 命令的意思是创建master的时候同时创建一个slave</span>

$ redis-cli <span class="token parameter variable">--cluster</span> create <span class="token number">127.0</span>.0.1:7001 <span class="token number">127.0</span>.0.1:7002 <span class="token number">127.0</span>.0.1:7003 <span class="token number">127.0</span>.0.1:7004 <span class="token number">127.0</span>.0.1:7005 <span class="token number">127.0</span>.0.1:7006 <span class="token parameter variable">--cluste</span>    r-replicas <span class="token number">1</span>
<span class="token comment"># 执行成功结果如下</span>
<span class="token comment"># 我们可以看到 7001，7002，7003 成为了 master 节点，</span>
<span class="token comment"># 分别占用了 slot [0-5460]，[5461-10922]，[10923-16383]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Performing <span class="token builtin class-name">hash</span> slots allocation on <span class="token number">6</span> nodes<span class="token punctuation">..</span>.
Master<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> -<span class="token operator">&gt;</span> Slots <span class="token number">0</span> - <span class="token number">5460</span>
Master<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> -<span class="token operator">&gt;</span> Slots <span class="token number">5461</span> - <span class="token number">10922</span>
Master<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> -<span class="token operator">&gt;</span> Slots <span class="token number">10923</span> - <span class="token number">16383</span>
Adding replica <span class="token number">127.0</span>.0.1:7005 to <span class="token number">127.0</span>.0.1:7001
Adding replica <span class="token number">127.0</span>.0.1:7006 to <span class="token number">127.0</span>.0.1:7002
Adding replica <span class="token number">127.0</span>.0.1:7004 to <span class="token number">127.0</span>.0.1:7003
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Trying to optimize slaves allocation <span class="token keyword">for</span> anti-affinity
<span class="token punctuation">[</span>WARNING<span class="token punctuation">]</span> Some slaves are <span class="token keyword">in</span> the same <span class="token function">host</span> as their master
M: 0313641a28e42014a48cdaee47352ce88a2ae083 <span class="token number">127.0</span>.0.1:7001
   slots:<span class="token punctuation">[</span><span class="token number">0</span>-5460<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">5461</span> slots<span class="token punctuation">)</span> master
M: 4ada3ff1b6dbbe57e7ba94fe2a1ab4a22451998e <span class="token number">127.0</span>.0.1:7002
   slots:<span class="token punctuation">[</span><span class="token number">5461</span>-10922<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">5462</span> slots<span class="token punctuation">)</span> master
M: 719b2f9daefb888f637c5dc4afa2768736241f74 <span class="token number">127.0</span>.0.1:7003
   slots:<span class="token punctuation">[</span><span class="token number">10923</span>-16383<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">5461</span> slots<span class="token punctuation">)</span> master
S: 987b3b816d3d1bb07e6c801c5048b0ed626766d4 <span class="token number">127.0</span>.0.1:7004
   replicates 4ada3ff1b6dbbe57e7ba94fe2a1ab4a22451998e
S: a876e977fc2ff9f18765a89c12fbd2c5b5b1f3bf <span class="token number">127.0</span>.0.1:7005
   replicates 719b2f9daefb888f637c5dc4afa2768736241f74
S: ac8d6c4067dec795168ca705bf16efaa5f04095a <span class="token number">127.0</span>.0.1:7006
   replicates 0313641a28e42014a48cdaee47352ce88a2ae083
Can I <span class="token builtin class-name">set</span> the above configuration? <span class="token punctuation">(</span>type <span class="token string">&#39;yes&#39;</span> to accept<span class="token punctuation">)</span>: <span class="token function">yes</span> 
<span class="token comment"># 这里有个要手动输入 yes 确认的过程</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Nodes configuration updated
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Assign a different config epoch to each <span class="token function">node</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Sending CLUSTER MEET messages to <span class="token function">join</span> the cluster
Waiting <span class="token keyword">for</span> the cluster to <span class="token function">join</span>
<span class="token punctuation">..</span>.
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Performing Cluster Check <span class="token punctuation">(</span>using <span class="token function">node</span> <span class="token number">127.0</span>.0.1:7001<span class="token punctuation">)</span>
M: 0313641a28e42014a48cdaee47352ce88a2ae083 <span class="token number">127.0</span>.0.1:7001
   slots:<span class="token punctuation">[</span><span class="token number">0</span>-5460<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">5461</span> slots<span class="token punctuation">)</span> master
   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
M: 4ada3ff1b6dbbe57e7ba94fe2a1ab4a22451998e <span class="token number">127.0</span>.0.1:7002
   slots:<span class="token punctuation">[</span><span class="token number">5461</span>-10922<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">5462</span> slots<span class="token punctuation">)</span> master
   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
S: ac8d6c4067dec795168ca705bf16efaa5f04095a <span class="token number">127.0</span>.0.1:7006
   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave
   replicates 0313641a28e42014a48cdaee47352ce88a2ae083
S: a876e977fc2ff9f18765a89c12fbd2c5b5b1f3bf <span class="token number">127.0</span>.0.1:7005
   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave
   replicates 719b2f9daefb888f637c5dc4afa2768736241f74
M: 719b2f9daefb888f637c5dc4afa2768736241f74 <span class="token number">127.0</span>.0.1:7003
   slots:<span class="token punctuation">[</span><span class="token number">10923</span>-16383<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">5461</span> slots<span class="token punctuation">)</span> master
   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
S: 987b3b816d3d1bb07e6c801c5048b0ed626766d4 <span class="token number">127.0</span>.0.1:7004
   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave
   replicates 4ada3ff1b6dbbe57e7ba94fe2a1ab4a22451998e
<span class="token punctuation">[</span>OK<span class="token punctuation">]</span> All nodes agree about slots configuration.
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Check <span class="token keyword">for</span> <span class="token function">open</span> slots<span class="token punctuation">..</span>.
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Check slots coverage<span class="token punctuation">..</span>.
<span class="token punctuation">[</span>OK<span class="token punctuation">]</span> All <span class="token number">16384</span> slots covered.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+R+`" alt="image-20200601001049144"></p><h5 id="数据验证" tabindex="-1"><a class="header-anchor" href="#数据验证" aria-hidden="true">#</a> 数据验证</h5><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 注意 集群模式下要带参数 -c，表示集群，否则不能正常存取数据！！！</span>
<span class="token punctuation">[</span>root@localhost redis-5.0.5<span class="token punctuation">]</span><span class="token comment"># redis-cli -p 7100 -c</span>
<span class="token comment"># 设置 k1 v1</span>
<span class="token number">127.0</span>.0.1:700<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span> <span class="token builtin class-name">set</span> k1 v1
-<span class="token operator">&gt;</span> Redirected to slot <span class="token punctuation">[</span><span class="token number">12706</span><span class="token punctuation">]</span> located at <span class="token number">127.0</span>.0.1:7003
OK
<span class="token comment"># 这可以看到集群的特点:把数据存到计算得出的 slot，这里还自动跳到了 7003</span>
<span class="token number">127.0</span>.0.1:700<span class="token operator"><span class="token file-descriptor important">3</span>&gt;</span> get k1
<span class="token string">&quot;v1&quot;</span>

<span class="token comment"># 我们还回到 7001 获取 k1 试试</span>
<span class="token punctuation">[</span>root@localhost redis-5.0.5<span class="token punctuation">]</span><span class="token comment"># redis-cli -p 7001 -c</span>
<span class="token number">127.0</span>.0.1:700<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span> get k1
-<span class="token operator">&gt;</span> Redirected to slot <span class="token punctuation">[</span><span class="token number">12706</span><span class="token punctuation">]</span> located at <span class="token number">127.0</span>.0.1:7003
<span class="token string">&quot;v1&quot;</span>
<span class="token comment"># 我们可以看到重定向的过程</span>
<span class="token number">127.0</span>.0.1:700<span class="token operator"><span class="token file-descriptor important">3</span>&gt;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="todo" tabindex="-1"><a class="header-anchor" href="#todo" aria-hidden="true">#</a> TODO ?</h3>`,70);function A(O,$){const e=d("ExternalLinkIcon");return t(),l("div",null,[M,s("ul",null,[s("li",null,[n("安装 redis， 我从"),s("a",C,[n("Redis 官网"),r(e)]),n("下载的最新版 redis-5.0.5")]),N]),q])}const w=i(y,[["render",A],["__file","redis-cluster.html.vue"]]);export{w as default};
