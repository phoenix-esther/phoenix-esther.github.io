import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as s,e}from"./app-e53dd85b.js";const t="/assets/20230131100501-198eb117.png",i="/assets/20230131103301-3760fe14.png",p="/assets/image-20230131103504513-d393059b.png",o="/assets/image-20230131103804423-7bdbe4f1.png",l="/assets/image-20230131104349589-168f553f.png",c="/assets/image-20230131104622640-168dfdec.png",r="/assets/image-20230131110715141-688ea603.png",d="/assets/image-20230218114046403-90da354c.png",u="/assets/image-20230218114700725-45cc7018.png",k="/assets/image-20230218115545322-f8465d13.png",v="/assets/image-20230218145728470-d5229318.png",m={},b=e('<h1 id="kafka-概述" tabindex="-1"><a class="header-anchor" href="#kafka-概述" aria-hidden="true">#</a> Kafka 概述</h1><h2 id="一、kafka的简单介绍" tabindex="-1"><a class="header-anchor" href="#一、kafka的简单介绍" aria-hidden="true">#</a> 一、Kafka的简单介绍</h2><h3 id="_1-1-kakfa定义" tabindex="-1"><a class="header-anchor" href="#_1-1-kakfa定义" aria-hidden="true">#</a> 1.1 Kakfa定义</h3><p><strong>Kafka传统定义：</strong> Kafka是一个分布式的基于发布/订阅模式的消息队列（MessageQueue），主要应用于大数据实时处理领域。</p><p><strong>发布订阅：</strong> 消息的发布者不会将消息直接发送给特定的订阅者，而是将发布的消息分为不同的类别，订阅者只接收感兴趣的消息。</p><p><strong>Kafka最新定义 ：</strong> Kafka是 一个开源的 分 布式事件流平台 （Event StreamingPlatform），被数千家公司用于高性能数据管道、流分析、数据集成和关键任务应用。</p><p><img src="'+t+'" alt="20230131100501"></p><p>如上图所示的一个流程，首先通过网站首页浏览数据，页面会做一个买点，进行日志的记录，后台会通过flume来将日志发送到kafka集群，hadoop从kafka中获取数据进行消费。由于hadoop的数据处理能力有限，kafka集群在这里起到一个削峰的作用。</p><h3 id="_1-2-消息队列" tabindex="-1"><a class="header-anchor" href="#_1-2-消息队列" aria-hidden="true">#</a> 1.2 消息队列</h3><p>目前企业中比较见的消息队列产品主要有 Kafka、ActiveMQ 、RabbitMQ 、RocketMQ 等。在大数据场景主要采用 Kafka 作为消息队列。在 JavaEE 开发中主要采用 ActiveMQ、RabbitMQ、RocketMQ。</p><h4 id="_1-2-1-传统消息队列的应用场景" tabindex="-1"><a class="header-anchor" href="#_1-2-1-传统消息队列的应用场景" aria-hidden="true">#</a> 1.2.1 传统消息队列的应用场景</h4><p>传统的消息队列的主要应用场景包括：缓存/消峰、解耦和异步通信。</p><p><strong>缓冲/消峰：</strong></p><p>有助于控制和优化数据流经过系统的速度，解决生产消息和消费消息的处理速度不一致的情况。</p><p><img src="'+i+'" alt="20230131103301"></p><p><strong>解耦：</strong></p><p>允许你独立的扩展或修改两边的处理过程，只要确保它们遵守同样的接口约束。</p><p><img src="'+p+'" alt="image-20230131103504513"></p><p><strong>异步通信：</strong></p><p>允许用户把一个消息放入队列，但并不立即处理它，然后在需要的时候再去处理它们。</p><img src="'+o+'" alt="image-20230131103804423" style="zoom:80%;"><h4 id="_1-2-2-消息队列的两种模式" tabindex="-1"><a class="header-anchor" href="#_1-2-2-消息队列的两种模式" aria-hidden="true">#</a> 1.2.2 消息队列的两种模式</h4><p><strong>点对点模式：</strong></p><ul><li>消费者主动拉去数据，消息收到后清除消息</li></ul><p><img src="'+l+'" alt="image-20230131104349589"></p><p><strong>发布/订阅模式:</strong></p><ul><li><p>可以有多个topic主题（浏览、点赞、收藏、评论等）</p></li><li><p>消费者消费数据之后，不删除数据</p></li><li><p>每个消费者相互独立，都可以消费到数据</p></li></ul><p><img src="'+c+'" alt="image-20230131104622640"></p><h3 id="_1-3-kafka-的基础架构" tabindex="-1"><a class="header-anchor" href="#_1-3-kafka-的基础架构" aria-hidden="true">#</a> 1.3 Kafka 的基础架构</h3><p><strong>Kafka中的基础组件介绍：</strong></p><ol><li><strong>Producer：</strong> 消息生产者，就是向 Kafka broker 发消息的客户端。</li><li><strong>Consumer：</strong> 消息消费者，向 Kafka broker 取消息的客户端。</li><li><strong>Consumer Group（CG）：</strong> 消费者组，由多个 consumer 组成。消费者组内每个消 费者负责消费不同分区的数据，一个分区只能由一个组内消费者消费；消费者组之间互不 影响。所有的消费者都属于某个消费者组，即消费者组是逻辑上的一个订阅者。</li><li><strong>Broker：</strong> 一台 Kafka 服务器就是一个 broker。一个集群由多个 broker 组成。一个 broker 可以容纳多个 topic。</li><li><strong>Topic：</strong> 可以理解为一个队列，生产者和消费者面向的都是一个 topic。</li><li><strong>Partition：</strong> 为了实现扩展性，一个非常大的 topic 可以分布到多个 broker（即服 务器）上，一个 topic 可以分为多个 partition，每个 partition 是一个有序的队列。</li><li><strong>Replica：</strong> 副本。一个 topic 的每个分区都有若干个副本，一个 Leader 和若干个 Follower。</li><li><strong>Leader：</strong> 每个分区多个副本的“主”，生产者发送数据的对象，以及消费者消费数 据的对象都是 Leader。</li><li><strong>Follower：</strong> 每个分区多个副本中的“从”，实时从 Leader 中同步数据，保持和 Leader 数据的同步。Leader 发生故障时，某个 Follower 会成为新的 Leader。</li></ol><p><strong>Kafka集群进化论</strong></p><p>从一开始最简单的单机节点开始，一个生产者和多个消费者。但是数据量打了之后，单机节点存储不足，就需要开始扩展了。</p><img src="'+r+'" alt="image-20230131110715141" style="zoom:67%;"><p>为了方便扩展，并提高吞吐量，一个topic分为多个partition。这样就可以把存储分散到多态机器上，并且增加了生产数据的性能。配合分区的设计，提出了消费者组的概念，组内每个消费者并行消费。topic中的每个partation只能由组内的一个消费者进行消费，不能使两个消费者同时消费同一个partation的数据。</p><p><img src="'+d+'" alt="image-20230218114046403"></p><p>在这里，每个partation都只有一个副本，如果节点down了，数据岂不是就丢失了。为了提高可用性，为partition增加了若干副本。这里需要注意的一点，kafka的副本有主从之分，数据的生产和消费只针对副本中的leader生效。当leader挂掉之后，follower就会接替leader的位置。</p><p><img src="'+u+'" alt="image-20230218114700725"></p><p>Kafka中有一部分数据是存储在Zookeeper中的，例如kafka集群中存活的节点，partition中那个副本是leader，那个是flower节点。这里要注意的一点，kafka2.8版本后，可以不在配置ZK了。</p><p><img src="'+k+`" alt="image-20230218115545322"></p><h2 id="二、kafka快速入门" tabindex="-1"><a class="header-anchor" href="#二、kafka快速入门" aria-hidden="true">#</a> 二、Kafka快速入门</h2><h3 id="_2-1-安装部署" tabindex="-1"><a class="header-anchor" href="#_2-1-安装部署" aria-hidden="true">#</a> 2.1 安装部署</h3><h4 id="_2-1-1-集群规划" tabindex="-1"><a class="header-anchor" href="#_2-1-1-集群规划" aria-hidden="true">#</a> 2.1.1 集群规划</h4><table><thead><tr><th>node01</th><th>node02</th><th>node03</th></tr></thead><tbody><tr><td>ZK</td><td>ZK</td><td>ZK</td></tr><tr><td>kafka</td><td>kafka</td><td>kafka</td></tr></tbody></table><h4 id="_2-1-2-集群部署" tabindex="-1"><a class="header-anchor" href="#_2-1-2-集群部署" aria-hidden="true">#</a> 2.1.2 集群部署</h4><p>【1】官方下载地址：http://kafka.apache.org/downloads.html</p><p>【2】解压安装包</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[xuliang@node01 software]$ tar -zxvf kafka_2.12-3.0.0.tgz -C  /opt/module/ 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>【3】修改解压后的文件名称</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[xuliang@node01 module]$ mv kafka_2.12-3.0.0/ kafka 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>【4】进入到/opt/module/kafka 目录，修改配置文件</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> [xuliang@node01 kafka]$ cd config/ 
 [xuliang@node01 config]$ vim server.properties 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>输入以下内容：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment"># broker 的全局唯一编号，不能重复，只能是数字。</span>
<span class="token key attr-name">broker.id</span><span class="token punctuation">=</span><span class="token value attr-value">0</span>
<span class="token comment"># 处理网络请求的线程数量</span>
<span class="token key attr-name">num.network.threads</span><span class="token punctuation">=</span><span class="token value attr-value">3</span>
<span class="token comment"># 用来处理磁盘 IO 的线程数量</span>
<span class="token key attr-name">num.io.threads</span><span class="token punctuation">=</span><span class="token value attr-value">8</span>
<span class="token comment"># 发送套接字的缓冲区大小</span>
<span class="token key attr-name">socket.send.buffer.bytes</span><span class="token punctuation">=</span><span class="token value attr-value">102400</span>
<span class="token comment"># 接收套接字的缓冲区大小</span>
<span class="token key attr-name">socket.receive.buffer.bytes</span><span class="token punctuation">=</span><span class="token value attr-value">102400</span>
<span class="token comment"># 请求套接字的缓冲区大小</span>
<span class="token key attr-name">socket.request.max.bytes</span><span class="token punctuation">=</span><span class="token value attr-value">104857600</span>
<span class="token comment"># kafka 运行日志(数据)存放的路径，路径不需要提前创建，kafka 自动帮你创建，可以配置多个磁盘路径，路径与路径之间可以用&quot;，&quot;分隔</span>
<span class="token key attr-name">log.dirs</span><span class="token punctuation">=</span><span class="token value attr-value">/opt/module/kafka/datas</span>
<span class="token comment"># topic 在当前 broker 上的分区个数</span>
<span class="token key attr-name">num.partitions</span><span class="token punctuation">=</span><span class="token value attr-value">1</span>
<span class="token comment"># 用来恢复和清理 data 下数据的线程数量</span>
<span class="token key attr-name">num.recovery.threads.per.data.dir</span><span class="token punctuation">=</span><span class="token value attr-value">1</span>
<span class="token comment"># 每个 topic 创建时的副本数，默认时 1 个副本</span>
<span class="token key attr-name">offsets.topic.replication.factor</span><span class="token punctuation">=</span><span class="token value attr-value">1</span>
<span class="token comment"># segment 文件保留的最长时间，超时将被删除</span>
<span class="token key attr-name">log.retention.hours</span><span class="token punctuation">=</span><span class="token value attr-value">168</span>
<span class="token comment"># 每个 segment 文件的大小，默认最大 1G</span>
<span class="token key attr-name">log.segment.bytes</span><span class="token punctuation">=</span><span class="token value attr-value">1073741824</span>
<span class="token comment"># 检查过期数据的时间，默认 5 分钟检查一次是否数据过期</span>
<span class="token key attr-name">log.retention.check.interval.ms</span><span class="token punctuation">=</span><span class="token value attr-value">300000</span>
<span class="token comment"># 配置连接 Zookeeper 集群地址（在 zk 根目录下创建/kafka，方便管理）</span>
<span class="token key attr-name">zookeeper.connect</span><span class="token punctuation">=</span><span class="token value attr-value">node01:2181,node02:2181,node03:2181/kafka</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>【5】分发安装包</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[xuliang@node01 module]$ xsync kafka/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>【6】分别在 node02 和 node03 上修改配置文件/opt/module/kafka/config/server.properties 中的 broker.id=1、broker.id=2</p><p>注：broker.id 不得重复，整个集群中唯一。</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment"># [xuliang@node02 module]$ vim kafka/config/server.properties</span>
<span class="token comment"># 修改:</span>
<span class="token comment"># The id of the broker. This must be set to a unique integer for each broker.</span>
<span class="token key attr-name">broker.id</span><span class="token punctuation">=</span><span class="token value attr-value">1</span>
<span class="token comment"># [xuliang@node03 module]$ vim kafka/config/server.properties</span>
<span class="token comment"># 修改:</span>
<span class="token comment"># The id of the broker. This must be set to a unique integer for each broker.</span>
<span class="token key attr-name">broker.id</span><span class="token punctuation">=</span><span class="token value attr-value">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>【7】配置环境变量</p><p>（1）在/etc/profile.d/my_env.sh 文件中增加 kafka 环境变量配置</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> [xuliang@node01 module]$ sudo vim /etc/profile.d/my_env.sh 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>增加如下内容：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>#KAFKA_HOME 
export KAFKA_HOME=/opt/module/kafka 
export PATH=$PATH:$KAFKA_HOME/bin 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）刷新一下环境变量。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> [xuliang@node01 module]$ source /etc/profile
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>（3）分发环境变量文件到其他节点，并 source。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[xuliang@node01 module]$ sudo /home/atguigu/bin/xsync  /etc/profile.d/my_env.sh 
[xuliang@node02 module]$ source /etc/profile 
[xuliang@node03 module]$ source /etc/profile
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>【8】启动集群</p><p>（1）先启动 Zookeeper 集群，然后启动 Kafka。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> [xuliang@node01 kafka]$ zk.sh start 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>（2）依次在 node01、node02、node03 节点上启动 Kafka。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> [xuliang@node01 kafka]$ bin/kafka-server-start.sh -daemon config/server.properties 
 [xuliang@node02 kafka]$ bin/kafka-server-start.sh -daemon config/server.properties 
 [xuliang@node03 kafka]$ bin/kafka-server-start.sh -daemon config/server.propertie
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：配置文件的路径要能够到 server.properties。</p><p>【9】关闭集群</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[xuliang@node01 kafka]$ bin/kafka-server-stop.sh 
[xuliang@node02 kafka]$ bin/kafka-server-stop.sh 
[xuliang@node03 kafka]$ bin/kafka-server-stop.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-1-3-集群启停脚本" tabindex="-1"><a class="header-anchor" href="#_2-1-3-集群启停脚本" aria-hidden="true">#</a> 2.1.3 集群启停脚本</h4><p>【1】在/home/atguigu/bin 目录下创建文件 kf.sh 脚本文件</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[xuliang@node01 bin]$ vim kf.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>脚本如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#! /bin/bash</span>
<span class="token keyword">case</span> <span class="token variable">$1</span> <span class="token keyword">in</span>
<span class="token string">&quot;start&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> node01 node02 node03
    <span class="token keyword">do</span>
        <span class="token builtin class-name">echo</span> <span class="token string">&quot; --------启动 <span class="token variable">$i</span> Kafka-------&quot;</span>
        <span class="token function">ssh</span> <span class="token variable">$i</span> <span class="token string">&quot;/opt/module/kafka/bin/kafka-server-start.sh -daemon /opt/module/kafka/config/server.properties&quot;</span>
    <span class="token keyword">done</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token string">&quot;stop&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> node01 node02 node03
    <span class="token keyword">do</span>
        <span class="token builtin class-name">echo</span> <span class="token string">&quot; --------停止 <span class="token variable">$i</span> Kafka-------&quot;</span>
        <span class="token function">ssh</span> <span class="token variable">$i</span> <span class="token string">&quot;/opt/module/kafka/bin/kafka-server-stop.sh &quot;</span>
    <span class="token keyword">done</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">esac</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>【2】添加执行权限</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> [xuliang@node01 bin]$ chmod +x kf.sh 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>【3】启动集群命令</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> [xuliang@node01 ~]$ kf.sh start 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>【4】停止集群命令</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> [xuliang@node01 ~]$ kf.sh stop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意：停止 Kafka 集群时，一定要等 Kafka 所有节点进程全部停止后再停止 Zookeeper 集群。因为 Zookeeper 集群当中记录着 Kafka 集群相关信息，Zookeeper 集群一旦先停止， Kafka 集群就没有办法再获取停止进程的信息，只能手动杀死 Kafka 进程了。</p><h4 id="_2-1-4-docker-compose部署集群" tabindex="-1"><a class="header-anchor" href="#_2-1-4-docker-compose部署集群" aria-hidden="true">#</a> 2.1.4 docker compose部署集群</h4><p>通过docker的方式快速启动一个开发环境。</p><p>这里需要注意，KAFKA_CFG_ADVERTISED_LISTENERS配置需要替换为虚机的实际IP地址。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;3.1&#39;</span>

<span class="token key atrule">networks</span><span class="token punctuation">:</span>
  <span class="token key atrule">zk-net</span><span class="token punctuation">:</span>  <span class="token comment"># 网络名</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> zk<span class="token punctuation">-</span>net
    <span class="token key atrule">driver</span><span class="token punctuation">:</span> bridge

<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token comment"># zookeeper集群</span>
  <span class="token key atrule">zoo1</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> zookeeper<span class="token punctuation">:</span>3.8.0
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> zoo1   <span class="token comment"># 容器名称</span>
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always       <span class="token comment"># 开机自启</span>
    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> zoo1        <span class="token comment"># 主机名</span>
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> 2181<span class="token punctuation">:</span><span class="token number">2181</span>         <span class="token comment"># 端口号</span>
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token key atrule">ZOO_MY_ID</span><span class="token punctuation">:</span> <span class="token number">1</span>
      <span class="token key atrule">ZOO_SERVERS</span><span class="token punctuation">:</span> server.1=zoo1<span class="token punctuation">:</span>2888<span class="token punctuation">:</span>3888;2181 server.2=zoo2<span class="token punctuation">:</span>2888<span class="token punctuation">:</span>3888;2181 server.3=zoo3<span class="token punctuation">:</span>2888<span class="token punctuation">:</span>3888;2181
    <span class="token key atrule">networks</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> zk<span class="token punctuation">-</span>net
  <span class="token key atrule">zoo2</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> zookeeper<span class="token punctuation">:</span>3.8.0
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> zoo2
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> zoo2
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> 2182<span class="token punctuation">:</span><span class="token number">2181</span>
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token key atrule">ZOO_MY_ID</span><span class="token punctuation">:</span> <span class="token number">2</span>
      <span class="token key atrule">ZOO_SERVERS</span><span class="token punctuation">:</span> server.1=zoo1<span class="token punctuation">:</span>2888<span class="token punctuation">:</span>3888;2181 server.2=zoo2<span class="token punctuation">:</span>2888<span class="token punctuation">:</span>3888;2181 server.3=zoo3<span class="token punctuation">:</span>2888<span class="token punctuation">:</span>3888;2181
    <span class="token key atrule">networks</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> zk<span class="token punctuation">-</span>net
  <span class="token key atrule">zoo3</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> zookeeper<span class="token punctuation">:</span>3.8.0
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> zoo3
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> zoo3
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> 2183<span class="token punctuation">:</span><span class="token number">2181</span>
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token key atrule">ZOO_MY_ID</span><span class="token punctuation">:</span> <span class="token number">3</span>
      <span class="token key atrule">ZOO_SERVERS</span><span class="token punctuation">:</span> server.1=zoo1<span class="token punctuation">:</span>2888<span class="token punctuation">:</span>3888;2181 server.2=zoo2<span class="token punctuation">:</span>2888<span class="token punctuation">:</span>3888;2181 server.3=zoo3<span class="token punctuation">:</span>2888<span class="token punctuation">:</span>3888;2181
    <span class="token key atrule">networks</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> zk<span class="token punctuation">-</span>net
  <span class="token comment"># kafka集群</span>
  <span class="token key atrule">kafka1</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">&#39;bitnami/kafka:3.0.0&#39;</span>
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> kafka1
    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> kafka1
    <span class="token key atrule">networks</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> zk<span class="token punctuation">-</span>net
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&#39;9092:9092&#39;</span>
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> KAFKA_CFG_ZOOKEEPER_CONNECT=zoo1<span class="token punctuation">:</span><span class="token number">2181</span><span class="token punctuation">,</span>zoo2<span class="token punctuation">:</span><span class="token number">2182</span><span class="token punctuation">,</span>zoo3<span class="token punctuation">:</span>2183/kafka
      <span class="token punctuation">-</span> KAFKA_BROKER_ID=1   
      <span class="token punctuation">-</span> KAFKA_CFG_LISTENERS=PLAINTEXT<span class="token punctuation">:</span>//<span class="token punctuation">:</span><span class="token number">9092</span>
      <span class="token punctuation">-</span> KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT<span class="token punctuation">:</span>//192.168.10.105<span class="token punctuation">:</span><span class="token number">9092</span>
      <span class="token punctuation">-</span> ALLOW_PLAINTEXT_LISTENER=yes
    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> zoo1
      <span class="token punctuation">-</span> zoo2
      <span class="token punctuation">-</span> zoo3
  <span class="token key atrule">kafka2</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">&#39;bitnami/kafka:3.0.0&#39;</span>
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> kafka2
    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> kafka2
    <span class="token key atrule">networks</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> zk<span class="token punctuation">-</span>net
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&#39;9093:9093&#39;</span>
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> KAFKA_CFG_ZOOKEEPER_CONNECT=zoo1<span class="token punctuation">:</span><span class="token number">2181</span><span class="token punctuation">,</span>zoo2<span class="token punctuation">:</span><span class="token number">2182</span><span class="token punctuation">,</span>zoo3<span class="token punctuation">:</span>2183/kafka
      <span class="token punctuation">-</span> KAFKA_BROKER_ID=2
      <span class="token punctuation">-</span> KAFKA_CFG_LISTENERS=PLAINTEXT<span class="token punctuation">:</span>//<span class="token punctuation">:</span><span class="token number">9093</span>
      <span class="token punctuation">-</span> KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT<span class="token punctuation">:</span>//192.168.10.105<span class="token punctuation">:</span><span class="token number">9093</span>
      <span class="token punctuation">-</span> ALLOW_PLAINTEXT_LISTENER=yes
    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> zoo1
      <span class="token punctuation">-</span> zoo2
      <span class="token punctuation">-</span> zoo3
  <span class="token key atrule">kafka3</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">&#39;bitnami/kafka:3.0.0&#39;</span>
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> kafka3
    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> kafka3
    <span class="token key atrule">networks</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> zk<span class="token punctuation">-</span>net
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&#39;9094:9094&#39;</span>
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> KAFKA_CFG_ZOOKEEPER_CONNECT=zoo1<span class="token punctuation">:</span><span class="token number">2181</span><span class="token punctuation">,</span>zoo2<span class="token punctuation">:</span><span class="token number">2182</span><span class="token punctuation">,</span>zoo3<span class="token punctuation">:</span>2183/kafka
      <span class="token punctuation">-</span> KAFKA_BROKER_ID=3  
      <span class="token punctuation">-</span> KAFKA_CFG_LISTENERS=PLAINTEXT<span class="token punctuation">:</span>//<span class="token punctuation">:</span><span class="token number">9094</span>
      <span class="token punctuation">-</span> KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT<span class="token punctuation">:</span>//192.168.10.105<span class="token punctuation">:</span><span class="token number">9094</span>
      <span class="token punctuation">-</span> ALLOW_PLAINTEXT_LISTENER=yes
    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> zoo1
      <span class="token punctuation">-</span> zoo2
      <span class="token punctuation">-</span> zoo3

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动命令：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker-compose up -d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>主线：使用docker-compose部署zookeeper集群以及kafka集群</p><p>博客：</p><p>1、安装docker可见：https://changlu.blog.csdn.net/article/details/124394266</p><p>2、安装docker-compose：https://blog.csdn.net/cl939974883/article/details/126463806?spm=1001.2014.3001.5501</p><p>3、使用docker-compose快速搭建zookeeper+kafka集群：https://changlu.blog.csdn.net/article/details/126511784?spm=1001.2014.3001.5502</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 检验zookeeper集群中是否有kafka信息</span>
./zkCli.sh <span class="token parameter variable">-server</span> <span class="token number">127.0</span>.0.1:2181

<span class="token function">ls</span> /kafka/brokers/ids
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>容器内收发消息</strong>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 进入kafka1服务</span>
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> kafka1 /bin/bash

<span class="token comment"># 创建topic【first】</span>
kafka-topics.sh --bootstrap-server localhost:9092 <span class="token parameter variable">--create</span> <span class="token parameter variable">--partitions</span> <span class="token number">3</span> --replication-factor <span class="token number">3</span> <span class="token parameter variable">--topic</span> first

<span class="token comment"># 生产者发送消息到topic</span>
kafka-console-producer.sh --bootstrap-server localhost:9092 <span class="token parameter variable">--topic</span> first

<span class="token comment"># -------------------------------------</span>

<span class="token comment"># 进入kafka2服务</span>
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> kafka2 /bin/bash

<span class="token comment"># 查看主题列表</span>
kafka-topics.sh --bootstrap-server localhost:9093 <span class="token parameter variable">--list</span>

<span class="token comment"># 消费者</span>
kafka-console-consumer.sh --bootstrap-server localhost:9093 <span class="token parameter variable">--topic</span> first
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Java程序去发送消息</strong>：</p><p>kafka1服务也进入到指定topic为first的消费者模式：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># kafka1服务中</span>
kafka-console-consumer.sh --bootstrap-server localhost:9092 <span class="token parameter variable">--topic</span> first
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Java连接代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>common<span class="token punctuation">.</span>serialization<span class="token punctuation">.</span></span><span class="token class-name">StringSerializer</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Properties</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * @Description: 自定义生产者
 * @Author: changlu
 * @Date: 10:27 AM
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomProducer</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//1、创建kafka的生产者配置对象</span>
        <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//2、添加对象配置参数：bootstrap.servers、key与value序列化器</span>
        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">BOOTSTRAP_SERVERS_CONFIG</span><span class="token punctuation">,</span> <span class="token string">&quot;192.168.10.119:9094&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//key,value序列化器</span>
        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">KEY_SERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span> <span class="token class-name">StringSerializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">VALUE_SERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span> <span class="token class-name">StringSerializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//3、创建kafka生产者对象</span>
        <span class="token class-name">KafkaProducer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> kafkaProducer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KafkaProducer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//4、send方法进行发送</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            kafkaProducer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProducerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;first&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;changlu&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//5、关闭资源</span>
        kafkaProducer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-kafka-命令行操作" tabindex="-1"><a class="header-anchor" href="#_2-2-kafka-命令行操作" aria-hidden="true">#</a> 2.2 Kafka 命令行操作</h3><p><img src="`+v+`" alt="image-20230218145728470"></p><h4 id="_2-2-1-主题命令行操作" tabindex="-1"><a class="header-anchor" href="#_2-2-1-主题命令行操作" aria-hidden="true">#</a> 2.2.1 主题命令行操作</h4><p>【1】查看操作主题命令参数</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[xuliang@node01 kafka]$ bin/kafka-topics.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>--bootstrap-server &lt;String: server toconnect to&gt;</td><td>连接的 Kafka Broker 主机名称和端口号。</td></tr><tr><td>--topic &lt;String: topic&gt;</td><td>操作的 topic 名称。</td></tr><tr><td>--create</td><td>创建主题。</td></tr><tr><td>--delete</td><td>删除主题。</td></tr><tr><td>--alter</td><td>修改主题。</td></tr><tr><td>--list</td><td>查看所有主题。</td></tr><tr><td>--describe</td><td>查看主题详细描述。</td></tr><tr><td>--partitions &lt;Integer: # of partitions&gt;</td><td>设置分区数。</td></tr><tr><td>--replication-factor&lt;Integer: replication factor&gt;</td><td>设置分区副本。</td></tr><tr><td>--config &lt;String: name=value&gt;</td><td>更新系统默认的配置。</td></tr></tbody></table><p>【2】查看当前服务器中的所有 topic</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[xuliang@node01 kafka]$ bin/kafka-topics.sh --bootstrap-server node01:9092 --list
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>【3】创建 first topic</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[xuliang@node01 kafka]$ bin/kafka-topics.sh --bootstrap-server node01:9092 --create --partitions 1 --replication-factor 3 --topic first
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>选项说明：</p><ul><li>--topic 定义 topic 名</li><li>--replication-factor 定义副本数</li><li>--partitions 定义分区数</li></ul><p>【4】查看 first 主题的详情</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[xuliang@node01 kafka]$ bin/kafka-topics.sh --bootstrap-server node01:9092 --describe --topic first
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>【5】修改分区数（注意：分区数只能增加，不能减少）</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[xuliang@node01 kafka]$ bin/kafka-topics.sh --bootstrap-server  node01:9092 --alter --topic first --partitions 3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>【6】再次查看 first 主题的详情</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[xuliang@node01 kafka]$ bin/kafka-topics.sh --bootstrap-server  node01:9092 --describe --topic first
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>【7】删除 topic（学生自己演示）</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[xuliang@node01 kafka]$ bin/kafka-topics.sh --bootstrap-server  node01:9092 --delete --topic first
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-1-1-生产者命令行操作" tabindex="-1"><a class="header-anchor" href="#_2-1-1-生产者命令行操作" aria-hidden="true">#</a> <strong>2.1.1</strong> 生产者命令行操作</h4><p>【1】查看操作生产者命令参数</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[xuliang@node01 kafka]$ bin/kafka-console-producer.sh	
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>--bootstrap-server &lt;String: server toconnect to&gt;</td><td>连接的 Kafka Broker 主机名称和端口号。</td></tr><tr><td>--topic &lt;String: topic&gt;</td><td>操作的 topic 名称。</td></tr></tbody></table><p>【2】发送消息</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[xuliang@node01 kafka]$ bin/kafka-console-producer.sh --bootstrap-server node01:9092 --topic first
&gt;hello world
&gt;atguigu atguigu
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-1-2-消费者命令行操作" tabindex="-1"><a class="header-anchor" href="#_2-1-2-消费者命令行操作" aria-hidden="true">#</a> <strong>2.1.2</strong> 消费者命令行操作</h4><p>【1】查看操作消费者命令参数</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[xuliang@node01 kafka]$ bin/kafka-console-consumer.sh	
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>--bootstrap-server &lt;String: server toconnect to&gt;</td><td>连接的 Kafka Broker 主机名称和端口号。</td></tr><tr><td>--topic &lt;String: topic&gt;</td><td>操作的 topic 名称。</td></tr><tr><td>--from-beginning</td><td>从头开始消费。</td></tr><tr><td>--group &lt;String: consumer group id&gt;</td><td>指定消费者组名称。</td></tr></tbody></table><p>【2】消费消息</p><p>消费 first 主题中的数据。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[xuliang@node01 kafka]$ bin/kafka-console-consumer.sh -- bootstrap-server node01:9092 --topic first 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>把主题中所有的数据都读取出来（包括历史数据）。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[xuliang@node01 kafka]$ bin/kafka-console-consumer.sh -- bootstrap-server node01:9092 --from-beginning --topic first
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,142),g=[b];function f(h,x){return a(),s("div",null,g)}const K=n(m,[["render",f],["__file","kafka-overview.html.vue"]]);export{K as default};
