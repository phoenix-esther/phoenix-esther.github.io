const e=JSON.parse('{"key":"v-5d10c187","path":"/quality/design-mode/design-bridge.html","title":"桥接模式","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"一、概述","slug":"一、概述","link":"#一、概述","children":[]},{"level":2,"title":"二、结构","slug":"二、结构","link":"#二、结构","children":[]},{"level":2,"title":"三、案例","slug":"三、案例","link":"#三、案例","children":[]},{"level":2,"title":"四、使用场景","slug":"四、使用场景","link":"#四、使用场景","children":[]}],"git":{"createdTime":1673767263000,"updatedTime":1673767263000,"contributors":[{"name":"xuliang","email":"895252461@qq.com","commits":1}]},"readingTime":{"minutes":2.9,"words":870},"filePathRelative":"quality/design-mode/design-bridge.md","localizedDate":"2023年1月15日","excerpt":"<h1> 桥接模式</h1>\\n<h2> 一、概述</h2>\\n<p>现在有一个需求，需要创建不同的图形，并且每个图形都有可能会有不同的颜色。我们可以利用继承的方式来设计类的关系：</p>\\n<p></p>\\n<p>我们可以发现有很多的类，假如我们再增加一个形状或再增加一种颜色，就需要创建更多的类。</p>\\n<p>试想，在一个有多种可能会变化的维度的系统中，用继承方式会造成类爆炸，扩展起来不灵活。每次在一个维度上新增一个具体实现都要增加多个子类。为了更加灵活的设计系统，我们此时可以考虑使用桥接模式。</p>\\n<p><strong>定义：</strong></p>\\n<p>​\\t将抽象与实现分离，使它们可以独立变化。它是用组合关系代替继承关系来实现，从而降低了抽象和实现这两个可变维度的耦合度。</p>"}');export{e as data};
