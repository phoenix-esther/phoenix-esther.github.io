const e=JSON.parse('{"key":"v-fb52dbf4","path":"/java/java-io/java-nio-12.html","title":"NIO - HeapByteBuffer","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"HeapByteBuffer","slug":"heapbytebuffer","link":"#heapbytebuffer","children":[]},{"level":2,"title":"DirectByteBuffer VS HeapByteBuffer","slug":"directbytebuffer-vs-heapbytebuffer","link":"#directbytebuffer-vs-heapbytebuffer","children":[]}],"git":{"createdTime":1716888450000,"updatedTime":1716888450000,"contributors":[{"name":"诗人都藏在水底","email":"895252461@qq.com","commits":1}]},"readingTime":{"minutes":2.08,"words":623},"filePathRelative":"java/java-io/java-nio-12.md","localizedDate":"2024年5月28日","excerpt":"<h1> NIO - HeapByteBuffer</h1>\\n<p></p>\\n<p>上篇文章介绍了堆外内存 DirectByteBuffer，我们知道了 DirectByteBuffer 是分配在 JVM 堆外的 ByteBuffer，这篇文章来了解堆内内存 HeapByteBuffer。</p>\\n<h2> HeapByteBuffer</h2>\\n<p>HeapByteBuffer，即分配在 JVM 中的 heap 堆中的 ByteBuffer，调用 <code>ByteBuffer#allocate()</code> 即可生成一个 HeapByteBuffer 对象。</p>\\n<div class=\\"language-Java line-numbers-mode\\" data-ext=\\"Java\\"><pre class=\\"language-Java\\"><code>public static ByteBuffer allocate(int capacity) {\\n    if (capacity &lt; 0)\\n        throw new IllegalArgumentException();\\n    return new HeapByteBuffer(capacity, capacity);\\n}\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}');export{e as data};
