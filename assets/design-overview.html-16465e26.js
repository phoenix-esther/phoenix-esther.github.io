import{_ as a,V as o,W as d,X as e,Z as n,$ as i,Y as t,a0 as r,D as s}from"./framework-5dde3bca.js";const u={},h=r('<h1 id="设计模式概览" tabindex="-1"><a class="header-anchor" href="#设计模式概览" aria-hidden="true">#</a> 设计模式概览</h1><p>设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</p><h2 id="一、设计模式的六大原则" tabindex="-1"><a class="header-anchor" href="#一、设计模式的六大原则" aria-hidden="true">#</a> 一、设计模式的六大原则</h2><h3 id="_1、单一职责原则" tabindex="-1"><a class="header-anchor" href="#_1、单一职责原则" aria-hidden="true">#</a> 1、单一职责原则</h3><ul><li>一个方法尽可能做一件事情，一般来说不应该让一个方法承担多个职责。</li></ul><p>单一职责原则的英文名称是Single Responsibility Principle，简称是SRP。单一职责原则的定义是：应该有且仅有一个原因引起类的变更。</p><p>SRP的原话解释是：There should never be more than one reason for a class to change.</p><ul><li>单一职责原则提出了一个编写程序的标准，用“职责”或“变化原因”来衡量接口或设计是否优良，但是“职责”跟“变化原因”都是不好度量的，要“因地制宜”。</li><li>单一职责适用于接口、类，同时也适用于方法，也就是说，一个方法尽可能做一件事情，一般来说不应该让一个方法承担多个职责。</li></ul><h3 id="_2、里式替换原则" tabindex="-1"><a class="header-anchor" href="#_2、里式替换原则" aria-hidden="true">#</a> 2、里式替换原则</h3><p>首先来聊一聊Java中的继承，继承有哪些优点呢：</p><ol><li>代码共享，减少创建类的工作量，每个子类都拥有父类的方怯和属性；</li><li>提高代码的重用性；</li><li>提高代码的可扩展性；</li><li>提高产品或项目的开放性。</li></ol><p>但是，继承也并不完美，他也存在着如下缺点：</p><ol><li>继承是侵入性的。只要继承，就必须拥有父类的所有属性和方曲：</li><li>降低代码的灵活性。子类必须拥有父类的属性和方峰，让子类自由的世界中 多了些约束</li><li>增强了辑合性。当 父类的常 、变量和方法被修改时，需要考虑子类的修改；</li></ol><p>那么如何同时拥有继承的优点，又规避他的缺点呢？这个时候，里式替换原则就站出来了，首先来看看他的定义：</p><ul><li><p><strong>第一种定义：</strong> 如果对每一个类型为S的对象o1，都有类型为T的对象o2 ，使得以T定义的所有程序P在所有的对象o1 都代换成o2 时，P程序的行为没有发生变化，那么类型S是类型T的子类型。</p></li><li><p><strong>第二种定义：</strong> 所有引用基类的地方必须能透明地使用其子类的对象。</p></li></ul><h3 id="_3、依赖倒置原则" tabindex="-1"><a class="header-anchor" href="#_3、依赖倒置原则" aria-hidden="true">#</a> 3、依赖倒置原则</h3><ul><li><p>细节依赖抽象，低层依赖高层。</p></li><li><p>依赖倒置原则的原始定义是：High level modules should not depend upon low level modules.Both should depend upon abstractions.Abstractions should not depend upon details.Details should depend upon abstractions.</p><p>包含了三层含义：</p><p>1、高层模块不应该依赖低层模块，两者都应该依赖其抽象;</p><p>2、抽象不应该依赖细节；</p><p>3、细节应该依赖抽象。</p></li><li><p>这一原则在Java语言中的表现就是：</p><p>1、模块间的依赖通过抽象发生，实现类之间不发生直接的依赖关系，其依赖关系是通过接口或抽象类产生的；</p><p>2、接口或抽象类不依赖于实现类；</p><p>3、实现类依赖接口或抽象类。</p></li><li><p>一般抽象是不变的，而具体是易变的。每个较高层次都为它所需要的服务声明一个抽象接口，较低的层次实现这些抽象接口，每个高层类都通过该抽象接口使用下一层的服务，接口属于高层,低层要实现高层的接口,因此现在是低层依赖于高层。是依赖关系倒置和接口所有权的倒置。在周围环境发生变化的时候，如果设计可以做到不怎么发生改变，那这样的设计就是好的。</p></li></ul><h3 id="_4、接口隔离原则" tabindex="-1"><a class="header-anchor" href="#_4、接口隔离原则" aria-hidden="true">#</a> 4、接口隔离原则</h3><ul><li>应该尽量建立单一接口，不要建立臃肿的接口，接口应该尽量细化。</li><li>接口隔离原则的原始定义是：Clients should not be forced to depend upon interfaces that they don’t use.客户端不应该依赖它不需要的接口。</li><li>The dependency of one class to another one should depend on the smallest possible interface.类间的依赖关系应该建立在最小的接口上。</li><li>这两个定义概括起来就是，应该尽量建立单一接口，不要建立臃肿的接口，接口应该尽量细化。</li></ul><p>接口分离的手段主要有以下两种：</p><ol><li>委托分离，通过增加一个新的类型来委托客户的请求，隔离客户和接口的直接依赖，但会增加系统开销。</li><li>多重继承分离，通过接口多继承来实现客户需求。</li></ol><h3 id="_5、迪米特法则" tabindex="-1"><a class="header-anchor" href="#_5、迪米特法则" aria-hidden="true">#</a> 5、迪米特法则</h3><ul><li>一个类应该对自己需要耦合或调用的类知道得最少。</li><li>迪米特法则（Law of Demeter）又叫最少知道原则（Least Knowledge Principle），1987年秋天由美国Northeastern University的Ian Holland提出，被UML的创始者之一Booch等普及。后来，因为在经典著作《 The Pragmatic Programmer》中提出而广为人知。</li></ul><p><strong>迪米特法则还有一个英文解释是：Only talk to your immediate friends。</strong></p><p>一个对象应该对其他对象有最少的了解。通俗地讲，一个类应该对自己需要耦合或调用的类知道得最少。一个类公开的public属性或方法越多，修改时涉及的面也就越大，变更引起的风险扩散也就越大。在设计时需要反复衡量，是否可以减少public方法和属性，是否可以修改为private、package-private、protected等访问权限，是否可以加上final关键字等。迪米特法则要求类尽量不要对外公布太多的public方法和非静态的public变量，尽量内敛，多使用private、package-private、protected等访问权限。</p><h3 id="_6、开闭原则" tabindex="-1"><a class="header-anchor" href="#_6、开闭原则" aria-hidden="true">#</a> 6、开闭原则</h3><ul><li>开闭原则要求尽量通过扩展软件实体的行为来实现变化，而不是通过修改已有的代码来完成变化。</li></ul><p><strong>开闭原则的定义：</strong></p><p>Software entities like classes,modules and functios should be open for extemsion but closed for modifications.</p><ul><li>一个软件实体如类、模块和函数应该对扩展开放，对修改关闭。</li><li>一个软件产品只要在生命期内，都会发生变化，既然变化是一个既定的事实，我们应该在设计时尽量适应这些变化，以提高项目的稳定性和灵活性。开闭原则要求尽量通过扩展软件实体的行为来实现变化，而不是通过修改已有的代码来完成变化。如何做到开闭原则：抽象、封装。</li></ul><h2 id="设计模式分类" tabindex="-1"><a class="header-anchor" href="#设计模式分类" aria-hidden="true">#</a> 设计模式分类</h2><p>设计模式总共有 23 种设计模式。这些模式可以分为三大类：创建型模式（Creational Patterns）、结构型模式（Structural Patterns）、行为型模式（Behavioral Patterns）。</p>',32),c=e("thead",null,[e("tr",null,[e("th",null,"序号"),e("th",null,"模式&描述"),e("th",null,"包括")])],-1),_=e("td",null,"1",-1),p=e("td",null,[e("strong",null,"创建型模式"),e("br"),t("这些设计模式提供了一种在创建对象的同时"),e("br"),t("隐藏创建逻辑的方式，而不是使用 new 运算"),e("br"),t("符直接实例化对象。这使得程序在判断针对"),e("br"),t("某个给定实例需要创建哪些对象时更加灵活。")],-1),g=e("br",null,null,-1),b=e("br",null,null,-1),m=e("br",null,null,-1),f=e("br",null,null,-1),y=e("td",null,"2",-1),P=e("td",null,[e("strong",null,"结构型模式"),e("br"),t("这些设计模式关注类和对象的组合。继承的"),e("br"),t("概念被用来组合接口和定义组合对象获得新"),e("br"),t("功能的方式。")],-1),x=e("br",null,null,-1),v=e("br",null,null,-1),q=e("br",null,null,-1),S=e("br",null,null,-1),w=e("br",null,null,-1),k=e("br",null,null,-1),B=e("br",null,null,-1),C=e("td",null,"3",-1),T=e("td",null,[e("strong",null,"行为型模式"),e("br"),t("这些设计模式特别关注对象之间的通信。")],-1),N=e("br",null,null,-1),R=e("br",null,null,-1),V=e("br",null,null,-1),D=e("br",null,null,-1),F=e("br",null,null,-1),L=e("br",null,null,-1),O=e("br",null,null,-1),A=e("br",null,null,-1),I=e("br",null,null,-1),M=e("br",null,null,-1),H=e("br",null,null,-1),J=e("h2",{id:"设计模式详解",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#设计模式详解","aria-hidden":"true"},"#"),t(" 设计模式详解")],-1),U=e("h3",{id:"创建型模式",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#创建型模式","aria-hidden":"true"},"#"),t(" 创建型模式")],-1),j=e("p",null,[e("a",{href:""},"单例模式")],-1),E=e("h3",{id:"结构性模式",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#结构性模式","aria-hidden":"true"},"#"),t(" 结构性模式")],-1),K=e("h3",{id:"行为模式",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#行为模式","aria-hidden":"true"},"#"),t(" 行为模式")],-1);function W(X,Y){const l=s("RouterLink");return o(),d("div",null,[h,e("table",null,[c,e("tbody",null,[e("tr",null,[_,p,e("td",null,[n(l,{to:"/quality/design-mode/design-factory.html"},{default:i(()=>[t("工厂模式（Factory Pattern）")]),_:1}),t(),g,n(l,{to:"/quality/design-mode/design-factory.html"},{default:i(()=>[t("抽象工厂模式（Abstract Factory Pattern）")]),_:1}),t(),b,n(l,{to:"/quality/design-mode/design-singleton.html"},{default:i(()=>[t("单例模式（Singleton Pattern）")]),_:1}),t(),m,t("建造者模式（Builder Pattern） "),f,t("原型模式（Prototype Pattern）")])]),e("tr",null,[y,P,e("td",null,[n(l,{to:"/quality/design-mode/design-adapter.html"},{default:i(()=>[t("适配器模式（Adapter Pattern）")]),_:1}),t(),x,t("桥接模式（Bridge Pattern） "),v,t("过滤器模式（Filter、Criteria Pattern） "),q,n(l,{to:"/quality/design-mode/design-composite.html"},{default:i(()=>[t("组合模式（Composite Pattern）")]),_:1}),t(),S,n(l,{to:"/quality/design-mode/design-decorator.html"},{default:i(()=>[t("装饰器模式（Decorator Pattern）")]),_:1}),t(),w,t("外观模式（Facade Pattern） "),k,t("享元模式（Flyweight Pattern） "),B,n(l,{to:"/quality/design-mode/design-proxy.html"},{default:i(()=>[t("代理模式（Proxy Pattern）")]),_:1})])]),e("tr",null,[C,T,e("td",null,[n(l,{to:"/quality/design-mode/design-chain.html"},{default:i(()=>[t("责任链模式（Chain of Responsibility Pattern）")]),_:1}),N,t("命令模式（Command Pattern） "),R,t("解释器模式（Interpreter Pattern） "),V,t("迭代器模式（Iterator Pattern） "),D,t("中介者模式（Mediator Pattern）"),F,t("备忘录模式（Memento Pattern） "),L,t("观察者模式（Observer Pattern） "),O,t("状态模式（State Pattern） "),A,t("空对象模式（Null Object Pattern） "),I,n(l,{to:"/quality/design-mode/design-strategy.html"},{default:i(()=>[t("策略模式（Strategy Pattern）")]),_:1}),t(),M,t("模板模式（Template Pattern） "),H,t("访问者模式（Visitor Pattern）")])])])]),J,U,e("p",null,[n(l,{to:"/quality/design-mode/design-factory.html"},{default:i(()=>[t("工厂模式")]),_:1})]),e("p",null,[n(l,{to:"/quality/design-mode/design-factory.html"},{default:i(()=>[t("抽象工厂模式")]),_:1})]),j,E,e("p",null,[n(l,{to:"/quality/design-mode/design-adapter.html"},{default:i(()=>[t("适配器模式")]),_:1})]),e("p",null,[n(l,{to:"/quality/design-mode/design-composite.html"},{default:i(()=>[t("组合模式")]),_:1})]),e("p",null,[n(l,{to:"/quality/design-mode/design-decorator.html"},{default:i(()=>[t("装饰器模式")]),_:1})]),e("p",null,[n(l,{to:"/quality/design-mode/design-proxy.html"},{default:i(()=>[t("代理模式")]),_:1})]),K,e("p",null,[n(l,{to:"/quality/design-mode/design-chain.html"},{default:i(()=>[t("责任链模式")]),_:1})]),e("p",null,[n(l,{to:"/quality/design-mode/design-strategy.html"},{default:i(()=>[t("策略模式")]),_:1})])])}const $=a(u,[["render",W],["__file","design-overview.html.vue"]]);export{$ as default};
