const e=JSON.parse('{"key":"v-d3f40a02","path":"/java/java-io/java-io-bio.html","title":"深入分析 Java IO （二）BIO","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"最原始BIO","slug":"最原始bio","link":"#最原始bio","children":[{"level":3,"title":"存在的问题：","slug":"存在的问题","link":"#存在的问题","children":[]}]},{"level":2,"title":"一请求一线程BIO","slug":"一请求一线程bio","link":"#一请求一线程bio","children":[{"level":3,"title":"代码演示","slug":"代码演示","link":"#代码演示","children":[]},{"level":3,"title":"存在的问题：","slug":"存在的问题-1","link":"#存在的问题-1","children":[]}]},{"level":2,"title":"伪异步I/O编程","slug":"伪异步i-o编程","link":"#伪异步i-o编程","children":[]},{"level":2,"title":"代码演示","slug":"代码演示-1","link":"#代码演示-1","children":[]},{"level":2,"title":"二、服务器端的执行效果","slug":"二、服务器端的执行效果","link":"#二、服务器端的执行效果","children":[]},{"level":2,"title":"三、阻塞的问题根源","slug":"三、阻塞的问题根源","link":"#三、阻塞的问题根源","children":[]}],"git":{"createdTime":1716801999000,"updatedTime":1716801999000,"contributors":[{"name":"诗人都藏在水底","email":"895252461@qq.com","commits":1}]},"readingTime":{"minutes":8.86,"words":2659},"filePathRelative":"java/java-io/java-io-bio.md","localizedDate":"2024年5月27日","excerpt":"<h1> 深入分析 Java IO （二）BIO</h1>\\n<h2> 最原始BIO</h2>\\n<p>网络编程的基本模型是C/S模型，即两个进程间的通信。</p>\\n<p>服务端提供IP和监听端口，客户端通过连接操作想服务端监听的地址发起连接请求，通过三次握手连接，如果连接成功建立，双方就可以通过套接字进行通信。</p>\\n<p>传统的同步阻塞模型开发中，ServerSocket负责绑定IP地址，启动监听端口；Socket负责发起连接操作。连接成功后，双方通过输入和输出流进行同步阻塞式通信。\\n最原始BIO通信模型图：</p>\\n<p><img src=\\"http://image.skjava.com/article/group/common-serial/202202131612423191.png\\" alt=\\"202202131612423191.png\\"></p>"}');export{e as data};
