const e=JSON.parse('{"key":"v-723b509a","path":"/quality/design-mode/design-observer.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"观察者模式","slug":"观察者模式","link":"#观察者模式","children":[{"level":3,"title":"6.6.1 概述","slug":"_6-6-1-概述","link":"#_6-6-1-概述","children":[]},{"level":3,"title":"6.6.2 结构","slug":"_6-6-2-结构","link":"#_6-6-2-结构","children":[]},{"level":3,"title":"6.6.3 案例实现","slug":"_6-6-3-案例实现","link":"#_6-6-3-案例实现","children":[]},{"level":3,"title":"6.6.4 优缺点","slug":"_6-6-4-优缺点","link":"#_6-6-4-优缺点","children":[]},{"level":3,"title":"6.6.5 使用场景","slug":"_6-6-5-使用场景","link":"#_6-6-5-使用场景","children":[]},{"level":3,"title":"6.6.6 JDK中提供的实现","slug":"_6-6-6-jdk中提供的实现","link":"#_6-6-6-jdk中提供的实现","children":[]}]}],"git":{"createdTime":1673767263000,"updatedTime":1673767263000,"contributors":[{"name":"xuliang","email":"895252461@qq.com","commits":1}]},"readingTime":{"minutes":5.03,"words":1509},"filePathRelative":"quality/design-mode/design-observer.md","localizedDate":"2023年1月15日","excerpt":"<h2> 观察者模式</h2>\\n<h3> 6.6.1 概述</h3>\\n<p><strong>定义：</strong></p>\\n<p>又被称为发布-订阅（Publish/Subscribe）模式，它定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态变化时，会通知所有的观察者对象，使他们能够自动更新自己。</p>\\n<h3> 6.6.2 结构</h3>\\n<p>在观察者模式中有如下角色：</p>\\n<ul>\\n<li>Subject：抽象主题（抽象被观察者），抽象主题角色把所有观察者对象保存在一个集合里，每个主题都可以有任意数量的观察者，抽象主题提供一个接口，可以增加和删除观察者对象。</li>\\n<li>ConcreteSubject：具体主题（具体被观察者），该角色将有关状态存入具体观察者对象，在具体主题的内部状态发生改变时，给所有注册过的观察者发送通知。</li>\\n<li>Observer：抽象观察者，是观察者的抽象类，它定义了一个更新接口，使得在得到主题更改通知时更新自己。</li>\\n<li>ConcrereObserver：具体观察者，实现抽象观察者定义的更新接口，以便在得到主题更改通知时更新自身的状态。</li>\\n</ul>"}');export{e as data};
