import{_ as t,o as e,c as p,b as n,d as o,a as s,e as c,r as l}from"./app.02d01547.js";var i="/assets/2479735-20210912120424026-1094893993.f733aa24.png",u="/assets/image-20220411184522197.138ce694.png",r="/assets/image-20220411185342502.ef3afb32.png",k="/assets/image-20220412150105953.f810b656.png",d="/assets/image-20220813123924072.cd9063b5.png";const v={},m=s(`<h1 id="java\u4E2D\u7684\u9501" tabindex="-1"><a class="header-anchor" href="#java\u4E2D\u7684\u9501" aria-hidden="true">#</a> Java\u4E2D\u7684\u9501</h1><h2 id="lock\u63A5\u53E3" tabindex="-1"><a class="header-anchor" href="#lock\u63A5\u53E3" aria-hidden="true">#</a> Lock\u63A5\u53E3</h2><p>Lock\u662F\u5728JDK1.5\u4E2D\u6DFB\u52A0\u7684\uFF0C\u4E8Esynchronized\u76F8\u6BD4\uFF0CLock\u63A5\u53E3\u6700\u5927\u7684\u6709\u70B9\u5C31\u662F\u5BF9\u9501\u83B7\u53D6\u4E8E\u91CA\u653E\u7684\u53EF\u64CD\u4F5C\u6027\u6027\u3002</p><p>Lock\u63A5\u53E3\u63D0\u4F9B\u7684synchronized\u4E0D\u5177\u5907\u7684\u529F\u80FD\u3002</p><table><thead><tr><th>\u7279\u6027</th><th>\u63CF\u8FF0</th></tr></thead><tbody><tr><td>\u5C1D\u8BD5\u975E\u963B\u585E\u7684\u83B7\u53D6\u9501</td><td>\u5F53\u524D\u7EBF\u7A0B\u5C1D\u8BD5\u83B7\u53D6\u9501\uFF0C\u5982\u679C\u8FD9\u4E00\u65F6\u523B\u9501\u6CA1\u6709\u88AB\u5176\u4ED6\u7EBF\u7A0B\u83B7\u53D6\u5230\uFF0C\u5219\u6210\u529F\u83B7\u53D6\u5E76\u6301\u6709\u9501\u3002</td></tr><tr><td>\u80FD\u88AB\u4E2D\u65AD\u7684\u83B7\u53D6\u9501</td><td>\u4E8Esynchronized\u4E0D\u540C\uFF0C\u83B7\u53D6\u5230\u9501\u7684\u7EBF\u7A0B\u80FD\u591F\u54CD\u5E94\u4E2D\u65AD\uFF0C\u5F53\u83B7\u53D6\u5230\u9501\u7684\u7EBF\u7A0B\u88AB\u4E2D\u65AD\u65F6\uFF0C\u4E2D\u65AD\u5F02\u5E38\u5C06\u4F1A\u88AB\u629B\u51FA\uFF0C\u540C\u4E8B\u6240\u4F1A\u88AB\u91CA\u653E\u3002</td></tr><tr><td>\u8D85\u65F6\u83B7\u53D6\u9501</td><td>\u5728\u6307\u5B9A\u7684\u622A\u6B62\u65F6\u95F4\u4E4B\u524D\u83B7\u53D6\u9501\uFF0C\u5982\u679C\u622A\u6B62\u65F6\u95F4\u5230\u4E86\u4ECD\u65E7\u65E0\u6CD5\u83B7\u53D6\u9501\uFF0C\u5219\u8FD4\u56DE\u3002</td></tr></tbody></table><p>Lock\u9501\u7684\u5178\u578B\u4F7F\u7528\u65B9\u5F0F\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Lock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">try</span><span class="token punctuation">{</span>
<span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>
    lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5728finally\u4E2D\u7F16\u5199\u91CA\u653E\u9501\u7684\u4EE3\u7801\uFF0C\u6765\u4FDD\u8BC1\u9501\u7684\u6B63\u5E38\u91CA\u653E\u3002</p><p>\u4E0D\u8981\u518Dtry\u5757\u5185\u8FDB\u884C\u9501\u7684\u83B7\u53D6\uFF0C\u5F53\u83B7\u53D6\u9501\u5F02\u5E38\u65F6\uFF0C\u4E5F\u4F1A\u5BFC\u81F4\u9501\u65E0\u6545\u91CA\u653E\u3002</p><p>\u4E0B\u9762\u5148\u7B80\u5355\u4ECB\u7ECD\u4E00\u4E0BLock\u63D0\u4F9B\u7684\u63A5\u53E3\uFF1A</p><table><thead><tr><th>\u65B9\u6CD5\u540D</th><th>\u63CF\u8FF0</th></tr></thead><tbody><tr><td>void lock()</td><td>\u83B7\u53D6\u9501\u3002\u8C03\u7528\u8BE5\u65B9\u6CD5\u5F53\u524D\u7EBF\u7A0B\u5C06\u4F1A\u83B7\u53D6\u9501\uFF0C\u5F53\u9501\u83B7\u5F97\u540E\uFF0C\u4ECE\u8BE5\u65B9\u6CD5\u8FD4\u56DE\u3002</td></tr><tr><td>void lockInterruptibly()</td><td>\u53EF\u4E2D\u65AD\u5730\u83B7\u53D6\u9501\uFF0C\u548Clock\u65B9\u6CD5\u7684\u4E0D\u540C\u4E4B\u5904\u5728\u4E8E\u8BE5\u65B9\u6CD5\u4F1A\u54CD\u5E94\u4E2D\u65AD\uFF0C\u5373\u5728<br>\u9501\u7684\u83B7\u53D6\u4E2D\u53EF\u4EE5\u4E2D\u65AD\u5F53\u524D\u7EBF\u7A0B</td></tr><tr><td>boolean tryLock()</td><td>\u5C1D\u8BD5\u975E\u963B\u585E\u7684\u83B7\u53D6\u9501\uFF0C\u8C03\u7528\u8BE5\u65B9\u6CD5\u540E\u7ACB\u523B\u8FD4\u56DE\uFF0C\u5982\u679C\u80FD\u591F\u83B7\u53D6\u5219\u8FD4\u56DE<br>true,\u5426\u5219\u8FD4\u56DEfalse</td></tr><tr><td>boolean tryLock(long time, TimeUnit unit)</td><td>\u8D85\u65F6\u7684\u83B7\u53D6\u9501\uFF0C\u5F53\u524D\u7EBF\u7A0B\u5728\u4EE5\u4E0B3\u79CD\u60C5\u51B5\u4E0B\u4F1A\u8FD4\u56DE\uFF1A<br>\u2460\u5F53\u524D\u7EBF\u7A0B\u5728\u8D85\u65F6\u65F6\u95F4\u5185\u83B7\u5F97\u4E86\u9501<br>\u2461\u5F53\u524D\u7EBF\u7A0B\u5728\u8D85\u65F6\u65F6\u95F4\u5185\u88AB\u4E2D\u65AD<br>\u2462\u8D85\u65F6\u65F6\u95F4\u7ED3\u675F\uFF0C\u8FD4\u56DEfalse</td></tr><tr><td>void unlock()</td><td>\u91CA\u653E\u9501</td></tr><tr><td>Condition newCondition()</td><td>\u83B7\u53D6\u7B49\u5F85\u901A\u77E5\u7EC4\u4EF6\uFF0C\u8BE5\u7EC4\u4EF6\u548C\u5F53\u524D\u7684\u9501\u7ED1\u5B9A\uFF0C\u5F53\u524D\u7EBF\u7A0B\u53EA\u6709\u83B7\u5F97\u4E86\u9501\uFF0C<br>\u624D\u80FD\u8C03\u7528\u8BE5\u7EC4\u4EF6\u7684waitO\u65B9\u6CD5\uFF0C\u800C\u8C03\u7528\u540E\uFF0C\u5F53\u524D\u7EBF\u7A0B\u5C06\u91CA\u653E\u9501</td></tr></tbody></table><h2 id="\u961F\u5217\u540C\u6B65\u5668" tabindex="-1"><a class="header-anchor" href="#\u961F\u5217\u540C\u6B65\u5668" aria-hidden="true">#</a> \u961F\u5217\u540C\u6B65\u5668</h2><p>AbstractQueuedSynchronizer(AQS)\uFF0C\u5373\u62BD\u8C61\u961F\u5217\u540C\u6B65\u5668\uFF0C\u63D0\u4F9B\u4E86\u4E00\u5957\u53EF\u7528\u4E8E\u5B9E\u73B0\u9501\u540C\u6B65\u673A\u5236\u7684\u6846\u67B6\uFF0C\u4E0D\u5938\u5F20\u5730\u8BF4\uFF0CAQS\u662FJUC\u540C\u6B65\u6846\u67B6\u7684\u57FA\u77F3\u3002AQS\u901A\u8FC7\u4E00\u4E2AFIFO\u961F\u5217\u7EF4\u62A4\u7EBF\u7A0B\u540C\u6B65\u72B6\u6001\uFF0C\u5B9E\u73B0\u7C7B\u53EA\u9700\u8981\u7EE7\u627F\u8BE5\u7C7B\uFF0C\u5E76\u91CD\u5199\u6307\u5B9A\u65B9\u6CD5\u5373\u53EF\u5B9E\u73B0\u4E00\u5957\u7EBF\u7A0B\u540C\u6B65\u673A\u5236\u3002</p><p>AQS\u6839\u636E\u8D44\u6E90\u4E92\u65A5\u7EA7\u522B\u63D0\u4F9B\u4E86<strong>\u72EC\u5360\u548C\u5171\u4EAB</strong>\u4E24\u79CD\u8D44\u6E90\u8BBF\u95EE\u6A21\u5F0F\uFF1B\u540C\u65F6\u5176\u5B9A\u4E49Condition\u7ED3\u6784\u63D0\u4F9B\u4E86wait/signal\u7B49\u5F85\u5524\u9192\u673A\u5236\u3002\u5728JUC\u4E2D\uFF0C\u8BF8\u5982ReentrantLock\u3001CountDownLatch\u7B49\u90FD\u57FA\u4E8EAQS\u5B9E\u73B0\u3002</p><h3 id="aqs-\u6846\u67B6\u539F\u7406" tabindex="-1"><a class="header-anchor" href="#aqs-\u6846\u67B6\u539F\u7406" aria-hidden="true">#</a> AQS \u6846\u67B6\u539F\u7406</h3><p>AQS\u7684\u539F\u7406\u5E76\u4E0D\u590D\u6742\uFF0CAQS\u7EF4\u62A4\u4E86\u4E00\u4E2Avolatile int state\u53D8\u91CF\u548C\u4E00\u4E2ACLH(\u4E09\u4E2A\u4EBA\u540D\u7F29\u5199)\u53CC\u5411\u961F\u5217\uFF0C\u961F\u5217\u4E2D\u7684\u8282\u70B9\u6301\u6709\u7EBF\u7A0B\u5F15\u7528\uFF0C\u6BCF\u4E2A\u8282\u70B9\u5747\u53EF\u901A\u8FC7getState()\uFF0CsetState()\uFF0CcompareAndSetState()\u5BF9state\u8FDB\u884C\u4FEE\u6539\u548C\u8BBF\u95EE\u3002</p><p><img src="`+i+`" alt="img"></p><p>\u5F53\u7EBF\u7A0B\u83B7\u53D6\u9501\u65F6\uFF0C\u5373\u8BD5\u56FE\u5BF9<code>state</code>\u53D8\u91CF\u505A\u4FEE\u6539\uFF0C\u5982\u4FEE\u6539\u6210\u529F\u5219\u83B7\u53D6\u9501\uFF1B\u5982\u4FEE\u6539\u5931\u8D25\u5219\u5305\u88C5\u4E3A\u8282\u70B9\u6302\u8F7D\u5230\u961F\u5217\u4E2D\uFF0C\u7B49\u5F85\u6301\u6709\u9501\u7684\u7EBF\u7A0B\u91CA\u653E\u9501\u5E76\u5524\u9192\u961F\u5217\u4E2D\u7684\u8282\u70B9\u3002</p><p><strong>AQS\u6A21\u677F\u65B9\u6CD5</strong></p><p><code>AQS</code>\u5185\u90E8\u5C01\u88C5\u4E86\u961F\u5217\u7EF4\u62A4\u903B\u8F91\uFF0C\u91C7\u7528\u6A21\u7248\u65B9\u6CD5\u7684\u6A21\u5F0F\u63D0\u4F9B\u5B9E\u73B0\u4E86\u4EE5\u4E0B\u65B9\u6CD5\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// \u5C1D\u8BD5\u83B7\u53D6\u72EC\u5360\u9501\uFF0C\u53EF\u83B7\u53D6\u8FD4\u56DEtrue\uFF0C\u5426\u5219false</span>
<span class="token function">tryRelease</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// \u5C1D\u8BD5\u91CA\u653E\u72EC\u5360\u9501\uFF0C\u53EF\u91CA\u653E\u8FD4\u56DEtrue\uFF0C\u5426\u5219false</span>
<span class="token function">tryAcquireShared</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// \u5C1D\u8BD5\u4EE5\u5171\u4EAB\u65B9\u5F0F\u83B7\u53D6\u9501\uFF0C\u5931\u8D25\u8FD4\u56DE\u8D1F\u6570\uFF0C\u53EA\u80FD\u83B7\u53D6\u4E00\u6B21\u8FD4\u56DE0\uFF0C\u5426\u5219\u8FD4\u56DE\u4E2A\u6570</span>
<span class="token function">tryReleaseShared</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// \u5C1D\u8BD5\u91CA\u653E\u5171\u4EAB\u9501\uFF0C\u53EF\u83B7\u53D6\u8FD4\u56DEtrue\uFF0C\u5426\u5219false</span>
<span class="token function">isHeldExclusively</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// \u5224\u65AD\u7EBF\u7A0B\u662F\u5426\u72EC\u5360\u8D44\u6E90</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5982\u5B9E\u73B0\u7C7B\u53EA\u9700\u5B9E\u73B0\u72EC\u5360\u9501/\u5171\u4EAB\u9501\u529F\u80FD\uFF0C\u53EF\u53EA\u5B9E\u73B0<code>tryAcquire/tryRelease</code>\u6216<code>tryAcquireShared/tryReleaseShared</code>\u3002\u867D\u7136\u5B9E\u73B0<code>tryAcquire/tryRelease</code>\u53EF\u81EA\u884C\u8BBE\u5B9A\u903B\u8F91\uFF0C\u4F46\u5EFA\u8BAE\u4F7F\u7528<code>state</code>\u65B9\u6CD5\u5BF9<code>state</code>\u53D8\u91CF\u8FDB\u884C\u64CD\u4F5C\u4EE5\u5B9E\u73B0\u540C\u6B65\u7C7B\u3002</p><h3 id="aqs\u5B9E\u73B0\u5206\u6790" tabindex="-1"><a class="header-anchor" href="#aqs\u5B9E\u73B0\u5206\u6790" aria-hidden="true">#</a> AQS\u5B9E\u73B0\u5206\u6790</h3><h4 id="\u540C\u6B65\u961F\u5217" tabindex="-1"><a class="header-anchor" href="#\u540C\u6B65\u961F\u5217" aria-hidden="true">#</a> \u540C\u6B65\u961F\u5217</h4><p>\u540C\u6B65\u5668\u4F9D\u8D56\u5185\u90E8\u7684\u540C\u6B65\u961F\u5217\uFF08\u4E00\u4E2AFIFO\u53CC\u5411\u961F\u5217\uFF09\u6765\u5B8C\u6210\u540C\u6B65\u72B6\u6001\u7BA1\u7406\u3002\u5F53\u524D\u7EBF\u7A0B\u83B7\u53D6\u540C\u6B65\u72B6\u6001\u662F\u5931\u8D25\u65F6\uFF0C\u540C\u6B65\u5668\u4F1A\u5C06\u5F53\u524D\u7EBF\u7A0B\u4EE5\u53CA\u7B49\u5F85\u72B6\u6001\u7B49\u4FE1\u606F\u6784\u5EFA\u4E3A\u4E00\u4E2A\u8282\u70B9\uFF08Node\uFF09\u5E76\u5C06\u5176\u52A0\u5165\u5230\u540C\u6B65\u961F\u5217\u4E2D\u3002\u540C\u65F6\u4F1A\u963B\u585E\u5F53\u524D\u7EBF\u7A0B\u3002\u5F53\u540C\u6B65\u72B6\u6001\u91CA\u653E\u65F6\uFF0C\u4F1A\u5427\u9996\u8282\u70B9\u7684\u7EBF\u7A0B\u5524\u9192\uFF0C\u4F7F\u5176\u518D\u6B21\u5C1D\u8BD5\u83B7\u53D6\u540C\u6B65\u72B6\u6001\u3002</p><p>\u540C\u6B65\u961F\u5217\u4E2D\u7684\u8282\u70B9\uFF08Node\uFF09\u7528\u6765\u4FDD\u5B58\u83B7\u53D6\u540C\u6B65\u72B6\u6001\u5931\u8D25\u7684\u7684\u7EBF\u7A0B\u5F15\u7528\uFF0C\u7B49\u5F85\u72B6\u6001\u4EE5\u53CA\u524D\u9A71\u540E\u96C6\u7ED3\u70B9\uFF0C\u8282\u70B9\u5C5E\u6027\u5982\u4E0B\uFF1A</p><table><thead><tr><th>\u5C5E\u6027\u7C7B\u578B\u4E0E\u540D\u79F0</th><th>\u63CF\u8FF0</th></tr></thead><tbody><tr><td>int waitStatus</td><td>\u7B49\u5F85\u72B6\u6001<br>\u5305\u542B\u5982\u4E0B\u72B6\u6001<br>1. CANCELLED\uFF1A \u503C\u4E3A1\uFF0C\u7531\u4E8E\u5728\u540C\u6B65\u961F\u5217\u4E2D\u7B49\u5F85\u7684\u7EBF\u7A0B\u7B49\u5F85\u8D85\u65F6\u6216\u8005\u88AB\u4E2D\u65AD\uFF0C\u9700\u8981<br>\u4ECE\u540C\u6B65\u961F\u5217\u4E2D\u53D6\u6D88\u7B49\u5F85\uFF0C\u8282\u70B9\u8FDB\u5165\u7B49\u5F85\u72B6\u6001\u4E0D\u4F1A\u53D8\u5316<br>2. SIGNAL \uFF1A\u503C\u4E3A-1\uFF0C\u540E\u7EE7\u8282\u70B9\u7684\u7EBF\u7A0B\u5904\u4E8E\u7B49\u5F85\u72B6\u6001\uFF0C\u800C\u5F53\u524D\u8282\u70B9\u7684\u7EBF\u7A0B\u5982\u679C\u91CA\u653E\u4E86<br>\u540C\u6B65\u72B6\u6001\u6216\u8005\u88AB\u53D6\u6D88\uFF0C\u5C06\u4F1A\u901A\u77E5\u540E\u7EE7\u8282\u70B9\uFF0C\u662F\u540E\u7EE7\u8282\u70B9\u7684\u7EBF\u7A0B\u5F97\u4EE5\u8FD0\u884C<br>3. CONDITION\uFF1A\u503C\u4E3A-2\uFF0C\u8282\u70B9\u5728\u7B49\u5F85\u961F\u5217\u4E2D\uFF0C\u8282\u70B9\u7684\u7EBF\u7A0B\u7B49\u5F85\u5728Condition\u4E0A\uFF0C\u5F53\u5176<br>\u4ED6\u7EBF\u7A0BCondition\u8C03\u7528\u4E86signal()\u65B9\u6CD5\u540E\uFF0C\u8BE5\u8282\u70B9\u5C06\u4F1A\u4ECE\u7B49\u5F85\u961F\u5217\u4E2D\u8F6C\u79FB\u5230\u540C\u6B65\u961F\u5217\u4E2D<br>\u53BB\u3002\u52A0\u5165\u5230\u540C\u6B65\u961F\u5217\u72B6\u6001\u7684\u83B7\u53D6\u4E2D<br>4. PROPAGATE\uFF1A\u503C\u4E3A-3\uFF0C\u8868\u793A\u4E0B\u4E00\u6B21\u5171\u4EAB\u65F6\u540C\u6B65\u72B6\u6001\u83B7\u53D6\u5C06\u4F1A\u65E0\u6761\u4EF6\u7684\u4F20\u64AD\u4E0B\u53BB<br>5. INITIAL\uFF1A\u503C\u4E3A0\uFF0C\u521D\u59CB\u5316\u72B6\u6001<br></td></tr><tr><td>Node prev</td><td>\u524D\u9A71\u8282\u70B9\uFF0C\u5F53\u8282\u70B9\u52A0\u5165\u540C\u6B65\u961F\u5217\u65F6\u88AB\u8BBE\u7F6E</td></tr><tr><td>Node next</td><td>\u540E\u7EE7\u8282\u70B9</td></tr><tr><td>Node nextWaiter</td><td>\u7B49\u5F85\u961F\u5217\u4E2D\u7684\u540E\u7EE7\u8282\u70B9\uFF0C\u5982\u679C\u5F53\u524D\u8282\u70B9\u662F\u5171\u4EAB\u7684\uFF0Cname\u8FD9\u4E2A\u5B57\u6BB5\u662F\u4E00\u4E2ASHARED\u5E38\u91CF\uFF0C<br>\u4E5F\u5C31\u662F\u8BF4\u8282\u70B9\u7C7B\u578B(\u72EC\u5360\u548C\u5171\u4EAB)\u548C\u7B49\u5F85\u961F\u5217\u4E2D\u7684\u540E\u7EE7\u8282\u70B9\u5171\u7528\u540C\u4E00\u4E2A\u5B57\u6BB5</td></tr><tr><td>Thread thread</td><td>\u83B7\u53D6\u540C\u6B65\u72B6\u6001\u7684\u7EBF\u7A0B</td></tr></tbody></table><p><strong>waitStatus\u72B6\u6001\u8BE6\u8FF0\uFF1A</strong></p><p><strong>CANCELLED</strong>\uFF1A\u7531\u4E8E\u8D85\u65F6\u6216\u4E2D\u65AD\uFF0C\u6B64\u8282\u70B9\u88AB\u53D6\u6D88\u3002\u8282\u70B9\u4E00\u65E6\u88AB\u53D6\u6D88\u4E86\u5C31\u4E0D\u4F1A\u518D\u6539\u53D8\u72B6\u6001\u3002\u7279\u522B\u662F\uFF0C\u53D6\u6D88\u8282\u70B9\u7684\u7EBF\u7A0B\u4E0D\u4F1A\u518D\u963B\u585E\u3002</p><p><strong>SIGNAL</strong>\uFF1A\u6B64\u8282\u70B9\u540E\u9762\u7684\u8282\u70B9\u5DF2\uFF08\u6216\u5373\u5C06\uFF09\u88AB\u963B\u6B62\uFF08\u901A\u8FC7park\uFF09\uFF0C\u56E0\u6B64\u5F53\u524D\u8282\u70B9\u5728\u91CA\u653E\u6216\u53D6\u6D88\u65F6\u5FC5\u987B\u65AD\u5F00\u540E\u9762\u7684\u8282\u70B9\u4E3A\u4E86\u907F\u514D\u7ADE\u4E89\uFF0Cacquire\u65B9\u6CD5\u65F6\u524D\u9762\u7684\u8282\u70B9\u5FC5\u987B\u662FSIGNAL\u72B6\u6001\uFF0C\u7136\u540E\u91CD\u8BD5\u539F\u5B50acquire\uFF0C\u7136\u540E\u5728\u5931\u8D25\u65F6\u963B\u585E\u3002</p><p>**CONDITION\uFF1A**\u6B64\u8282\u70B9\u5F53\u524D\u5728\u6761\u4EF6\u961F\u5217\u4E2D\u3002\u6807\u8BB0\u4E3ACONDITION\u7684\u8282\u70B9\u4F1A\u88AB\u79FB\u52A8\u5230\u4E00\u4E2A\u7279\u6B8A\u7684\u6761\u4EF6\u7B49\u5F85\u961F\u5217\uFF08\u6B64\u65F6\u72B6\u6001\u5C06\u8BBE\u7F6E\u4E3A0\uFF09\uFF0C\u76F4\u5230\u6761\u4EF6\u65F6\u624D\u4F1A\u88AB\u91CD\u65B0\u79FB\u52A8\u5230\u540C\u6B65\u7B49\u5F85\u961F\u5217 \u3002\uFF08\u6B64\u5904\u4F7F\u7528\u6B64\u503C\u4E0E\u5B57\u6BB5\u7684\u5176\u4ED6\u7528\u9014\u65E0\u5173\uFF0C\u4F46\u7B80\u5316\u4E86\u673A\u5236\u3002\uFF09</p><p>**PROPAGATE\uFF1A**\u4F20\u64AD\uFF1A\u5E94\u5C06releaseShared\u4F20\u64AD\u5230\u5176\u4ED6\u8282\u70B9\u3002\u8FD9\u662F\u5728doReleaseShared\u4E2D\u8BBE\u7F6E\u7684\uFF08\u4EC5\u9002\u7528\u4E8E\u5934\u90E8\u8282\u70B9\uFF09\uFF0C\u4EE5\u786E\u4FDD\u4F20\u64AD\u7EE7\u7EED\uFF0C\u5373\u4F7F\u6B64\u540E\u6709\u5176\u4ED6\u64CD\u4F5C\u4ECB\u5165\u3002</p><p>0:\u4EE5\u4E0A\u6570\u503C\u5747\u672A\u6309\u6570\u5B57\u6392\u5217\u4EE5\u7B80\u5316\u4F7F\u7528\u3002\u975E\u8D1F\u503C\u8868\u793A\u8282\u70B9\u4E0D\u9700\u8981\u53D1\u51FA\u4FE1\u53F7\u3002\u6240\u4EE5\uFF0C\u5927\u591A\u6570\u4EE3\u7801\u4E0D\u9700\u8981\u68C0\u67E5\u7279\u5B9A\u7684\u503C\uFF0C\u53EA\u9700\u8981\u68C0\u67E5\u7B26\u53F7\u3002\u5BF9\u4E8E\u6B63\u5E38\u540C\u6B65\u8282\u70B9\uFF0C\u8BE5\u5B57\u6BB5\u521D\u59CB\u5316\u4E3A0\uFF1B\u5BF9\u4E8E\u6761\u4EF6\u8282\u70B9\uFF0C\u8BE5\u5B57\u6BB5\u521D\u59CB\u5316\u4E3A\u6761\u4EF6\u3002\u5B83\u662F\u4F7F\u7528CAS\u4FEE\u6539\u7684\uFF08\u6216\u8005\u5728\u53EF\u80FD\u7684\u60C5\u51B5\u4E0B\uFF0C\u4F7F\u7528\u65E0\u6761\u4EF6\u7684volatile\u5199\u5165\uFF09\u3002</p>`,33),b={href:"https://www.cnblogs.com/lqlqlq/p/12991275.html?ivk_sa=1024320u",target:"_blank",rel:"noopener noreferrer"},w=c("AQS : waitStatus = Propagate \u7684\u4F5C\u7528\u89E3\u6790 \u4EE5\u53CA\u8BFB\u9501\u65E0\u6CD5\u5168\u83B7\u53D6\u95EE\u9898 - \u6267\u751F - \u535A\u5BA2\u56ED (cnblogs.com)"),y=s('<p>\u770B\u56FE\u8BF4\u8BDD\uFF0C\u961F\u5217\u540C\u6B65\u5668\u7684\u57FA\u672C\u6570\u636E\u7ED3\u6784\u5982\u4E0B\uFF1A</p><p><img src="'+u+'" alt="image-20220411184522197"></p><p>\u540C\u6B65\u961F\u5217\u5305\u542B\u4E24\u4E2A\u8282\u70B9\u7C7B\u578B\u7684\u5F15\u7528\uFF0C\u4E00\u4E2A\u6307\u5411\u5934\u7ED3\u70B9\uFF0C\u4E00\u4E2A\u6307\u5411\u5C3E\u8282\u70B9\u3002\u8FFD\u52A0\u8282\u70B9\u7684\u8FC7\u7A0B\u901A\u8FC7<code>compareAndSetTail(Node expect, Node update)</code>\u65B9\u6CD5\u6765\u5B9E\u73B0\uFF0C\u4ECE\u800C\u4FDD\u8BC1\u4E86\u8FFD\u52A0\u8282\u70B9\u8FC7\u7A0B\u7684\u7EBF\u7A0B\u5B89\u5168\u3002</p><p>\u540C\u6B65\u961F\u5217\u9075\u5FAAFIFO\u539F\u5219\uFF0C\u9996\u8282\u70B9\u662F\u83B7\u53D6\u540C\u6B65\u72B6\u6001\u6210\u529F\u7684\u8282\u70B9\uFF0C\u9996\u8282\u70B9\u7684\u540C\u6B65\u7EBF\u7A0B\u5728\u91CA\u653E\u540C\u6B65\u72B6\u6001\u65F6\uFF0C\u6216\u5524\u9192\u540E\u7EE7\u8282\u70B9\uFF0C\u800C\u540E\u7EE7\u8282\u70B9\u5728\u83B7\u53D6\u540C\u6B65\u72B6\u6001\u6210\u529F\u65F6\uFF0C\u4F1A\u5C06\u81EA\u5DF1\u8BBE\u7F6E\u4E3A\u9996\u8282\u70B9\u3002\u8FD9\u91CC\u9700\u8981\u6CE8\u610F\uFF0C\u8BBE\u7F6E\u9996\u8282\u70B9\u7684\u8FC7\u7A0B\uFF0C\u4E0D\u9700\u8981\u540C\u6B65\u64CD\u4F5C\uFF0C\u56E0\u4E3A\u6BCF\u4E00\u65F6\u523B\uFF0C\u53EA\u6709\u4E00\u4E2A\u7EBF\u7A0B\u80FD\u591F\u83B7\u53D6\u5230\u540C\u6B65\u72B6\u6001\u3002</p><p><img src="'+r+`" alt="image-20220411185342502"></p><h4 id="\u72EC\u5360\u9501\u5206\u6790" tabindex="-1"><a class="header-anchor" href="#\u72EC\u5360\u9501\u5206\u6790" aria-hidden="true">#</a> \u72EC\u5360\u9501\u5206\u6790</h4><p>\u901A\u8FC7\u8C03\u7528\u540C\u6B65\u5668\u7684acquire(int arg)\u65B9\u6CD5\u53EF\u4EE5\u83B7\u53D6\u540C\u6B65\u72B6\u6001\uFF0C\u8BE5\u65B9\u6CD5\u5BF9\u4E2D\u65AD\u4E0D\u654F\u611F\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// tryAcquire\u9700\u5B9E\u73B0\u7C7B\u5904\u7406\uFF0C\u5982\u83B7\u53D6\u8D44\u6E90\u6210\u529F\uFF0C\u76F4\u63A5\u8FD4\u56DE</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> 
        <span class="token comment">// \u5982\u83B7\u53D6\u8D44\u6E90\u5931\u8D25\uFF0C\u5C06\u7EBF\u7A0B\u5305\u88C5\u4E3ANode\u6DFB\u52A0\u5230\u961F\u5217\u4E2D\u963B\u585E\u7B49\u5F85</span>
        <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token function">addWaiter</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token punctuation">.</span>EXCLUSIVE<span class="token punctuation">)</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token comment">// \u5982\u679C\u5728\u7A0B\u5E8F\u6267\u884C\u671F\u95F4\uFF0C\u7A0B\u5E8F\u88AB\u4E2D\u65AD\uFF0C\u8FD9\u91CC\u8981\u505A\u4E2D\u65AD\u8865\u507F\u3002</span>
        <span class="token function">selfInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">selfInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u8BE5\u65B9\u6CD5\u4E3B\u8981\u5B8C\u6210\u540C\u6B65\u72B6\u6001\u83B7\u53D6\uFF0C\u8282\u70B9\u6784\u9020\uFF0C\u52A0\u5165\u540C\u6B65\u961F\u5217\u4EE5\u53CA\u5728\u540C\u6B65\u961F\u5217\u4E2D\u81EA\u65CB\u7B49\u64CD\u4F5C\u3002</p><p>\u9996\u5148\u901A\u8FC7tryAcquire()\u65B9\u6CD5\u7EBF\u7A0B\u5B89\u5168\u7684\u83B7\u53D6\u540C\u6B65\u72B6\u6001\uFF0C\u5982\u679C\u83B7\u53D6\u540C\u6B65\u72B6\u6001\u5931\u8D25\uFF0C\u5219\u6784\u9020\u540C\u6B65\u8282\u70B9\uFF0C\u901A\u8FC7addWaiter(Node node)\u65B9\u6CD5\u52A0\u5165\u5230\u540C\u6B65\u961F\u5217\u7684\u5C3E\u90E8\u3002Node.EXCLUSIVE\u8868\u793A\u7EBF\u7A0B\u4EE5\u72EC\u5360\u7684\u65B9\u5F0F\u7B49\u5F85\u9501\u3002\u6700\u540E\u8C03\u7528acquireQueued(Node node, int arg)\u65B9\u6CD5\u6765\u5FAA\u73AF\u83B7\u53D6\u540C\u6B65\u72B6\u6001\u3002</p><blockquote><p>\u6CE8\uFF1A\u8FD9\u91CC\u7684tryAcquire\u662F\u4E00\u4E2A\u62BD\u8C61\u65B9\u6CD5\uFF0C\u9700\u8981\u5B50\u7C7B\u5B9E\u73B0\u3002</p></blockquote><p>\u4E0B\u9762\u770B\u4E00\u4E0B\u8282\u70B9\u7684\u521B\u5EFA\u53CA\u6DFB\u52A0\u8FC7\u7A0B\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// \u6784\u9020\u8282\u70B9\u7684\u8FC7\u7A0B</span>
<span class="token keyword">private</span> <span class="token class-name">Node</span> <span class="token function">addWaiter</span><span class="token punctuation">(</span><span class="token class-name">Node</span> mode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u521B\u5EFA\u4E00\u4E2A\u8282\u70B9</span>
    <span class="token class-name">Node</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Try the fast path of enq; backup to full enq on failure</span>
    <span class="token class-name">Node</span> pred <span class="token operator">=</span> tail<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pred <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        node<span class="token punctuation">.</span>prev <span class="token operator">=</span> pred<span class="token punctuation">;</span>
        <span class="token comment">// \u4EE5cas\u7684\u65B9\u5F0F\u4FEE\u6539tail</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetTail</span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u8BBE\u7F6E\u94FE\u8868\u989D\u6307\u9488</span>
            pred<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>
            <span class="token keyword">return</span> node<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u5982\u679Ctail\u4E3Anull\uFF0C\u9700\u8981\u521D\u59CB\u5316</span>
    <span class="token function">enq</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> node<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token doc-comment comment">/**
 * \u7B2C\u4E00\u6B21\u5411\u94FE\u8868\u6DFB\u52A0\u8282\u70B9\u65F6\uFF0Ctail\u548Chead\u90FD\u662Fnull\uFF0C
 * \u8FD9\u91CC\u901A\u8FC7\u6B7B\u5FAA\u73AF\u52A0CAS\u6765\u4FDD\u8BC1\u4EFB\u52A1\u4E00\u5B9A\u5B8C\u6210\u5E76\u4E14\u591A\u7EBF\u7A0B\u5B89\u5168\uFF0C\u597D\u597D\u4F53\u4F1A\u4E00\u4E0B\u65E0\u9501\u5E76\u53D1\u3002
 */</span>
<span class="token keyword">private</span> <span class="token class-name">Node</span> <span class="token function">enq</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u6B7B\u5FAA\u73AF\u7684\u65B9\u5F0F\u521D\u59CB\u5316\u94FE\u8868</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Node</span> t <span class="token operator">=</span> tail<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// Must initialize</span>
            <span class="token comment">// \u94FE\u8868\u7684\u5F00\u5934\u662F\u4E2A\u7A7A\u8282\u70B9</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetHead</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment">// \u8FD9\u91CC\u521D\u59CB\u5316\u5B8C\u540E\uFF0C\u4F1A\u518D\u6B21\u8FDB\u5165\u5FAA\u73AF</span>
                tail <span class="token operator">=</span> head<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u5C06node\u52A0\u5165\u94FE\u8868</span>
            node<span class="token punctuation">.</span>prev <span class="token operator">=</span> t<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetTail</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                t<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>
                <span class="token keyword">return</span> t<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u9996\u5148\u901A\u8FC7compareAndSetTail(Node expect, Node update)\u65B9\u6CD5\u6765\u4FDD\u8BC1\u7EBF\u7A0B\u7684\u5B89\u5168\u6DFB\u52A0\u3002enq\u65B9\u6CD5\u5219\u4FDD\u8BC1\u7EBF\u7A0B\u7684\u521D\u59CB\u5316\u5217\u8868\u3002</p><p>\u5F53\u8282\u70B9\u8FDB\u5165\u540C\u6B65\u961F\u5217\u4E4B\u540E\uFF0C\u5C31\u8FDB\u5165\u4E86\u4E00\u4E2A\u81EA\u65CB\u7684\u8FC7\u7A0B\u3002\u67E5\u770BacquireQueued\u65B9\u6CD5\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Node</span> node<span class="token punctuation">,</span> <span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">boolean</span> failed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">// interrupted\u662F\u4E2D\u65AD\u6807\u8BB0</span>
        <span class="token keyword">boolean</span> interrupted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token comment">// \u81EA\u65CB</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">final</span> <span class="token class-name">Node</span> p <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">predecessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// \u68C0\u67E5node\u7684\u524D\u7F6E\u8282\u70B9\u662F\u5426\u4E3A\u5934\u7ED3\u70B9 &amp;&amp; \u5C1D\u8BD5\u83B7\u53D6\u9501</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> head <span class="token operator">&amp;&amp;</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">setHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
                p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// help GC</span>
                failed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> interrupted<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldParkAfterFailedAcquire</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> node<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">parkAndCheckInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                interrupted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>failed<span class="token punctuation">)</span>
            <span class="token function">cancelAcquire</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// \u8BBE\u7F6E\u4E3A\u5934\u7ED3\u70B9</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setHead</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u8FD9\u91CC\u662F\u76F4\u63A5\u628Anode\u8BBE\u7F6E\u4E3A\u5934\u7ED3\u70B9\uFF0C\u800C\u4E0D\u662F\u4FEE\u6539\u5934\u7ED3\u70B9\u7684\u6307\u9488\u3002</span>
    head <span class="token operator">=</span> node<span class="token punctuation">;</span>
    node<span class="token punctuation">.</span>thread <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    node<span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u8FD9\u91CC\u901A\u8FC7\u6B7B\u5FAA\u73AF\u7684\u65B9\u5F0F\u5C1D\u8BD5\u83B7\u53D6\u540C\u6B65\u9501\uFF0C\u53EA\u6709\u524D\u9A71\u8282\u70B9\u662F\u5934\u7ED3\u70B9\u7684\u8282\u70B9\u624D\u80FD\u83B7\u53D6\u901A\u8FC7\u72B6\u6001\u3002\u8FD9\u79CD\u65B9\u5F0F\u53EF\u4EE5\u5F88\u597D\u7684\u7EF4\u62A4\u4E00\u4E2AFIFO\u961F\u5217\u3002</p><p>\u5728\u83B7\u53D6\u5230\u9501\u4E4B\u540E\uFF0C\u4F1A\u5427\u5F53\u524D\u8282\u70B9\u8BBE\u7F6E\u4E3A\u5934\u7ED3\u70B9\u3002</p><p>\u5982\u679C\u6CA1\u6709\u83B7\u53D6\u5230\u9501\uFF0C\u4F1A\u6267\u884CshouldParkAfterFailedAcquire\u65B9\u6CD5\u548CparkAndCheckInterrupt\u65B9\u6CD5\uFF0C\u4E0B\u9762\u5C31\u6765\u770B\u770B\u8FD9\u4E24\u4E2A\u65B9\u6CD5\u505A\u4E86\u4EC0\u4E48\u4E8B\u60C5\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// \u8FD9\u91CC\u5224\u65AD\u5728\u83B7\u53D6\u540C\u6B65\u72B6\u6001\u5931\u8D25\u540E\u662F\u5426\u9700\u8981\u88ABpark\u4F4F</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">shouldParkAfterFailedAcquire</span><span class="token punctuation">(</span><span class="token class-name">Node</span> pred<span class="token punctuation">,</span> <span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> ws <span class="token operator">=</span> pred<span class="token punctuation">.</span>waitStatus<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">==</span> <span class="token class-name">Node</span><span class="token punctuation">.</span>SIGNAL<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u5934\u7ED3\u70B9\u53D6\u6D88\u6267\u884C\u4E86\uFF0C\u8DF3\u8FC7\u5934\u7ED3\u70B9\uFF0C\u91CD\u65B0\u5C1D\u8BD5</span>
        <span class="token keyword">do</span> <span class="token punctuation">{</span>
            node<span class="token punctuation">.</span>prev <span class="token operator">=</span> pred <span class="token operator">=</span> pred<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>pred<span class="token punctuation">.</span>waitStatus <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        pred<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u5C06waitStatus\u6539\u4E3ANode.SIGNAL</span>
        <span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> ws<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token punctuation">.</span>SIGNAL<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">parkAndCheckInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// park\u4F4F\u5F53\u524D\u7EBF\u7A0B</span>
    <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// \u88AB\u5524\u9192\u65F6\u8FD4\u56DE\u4E2D\u65AD\u72B6\u6001\uFF0C\u8FD9\u91CC\u4F1A\u6E05\u9664\u4E2D\u65AD\u72B6\u6001</span>
    <span class="token keyword">return</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u72EC\u5360\u5F0F\u901A\u8FC7\u72B6\u6001\u83B7\u53D6\u6D41\u7A0B\uFF1A</p><p><img src="`+k+`" alt="image-20220412150105953"></p><p>\u4E0B\u9762\u770B\u4E00\u4E0B\u91CA\u653E\u9501\u7684\u903B\u8F91\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryRelease</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u5982\u679C\u91CA\u653E\u8D44\u6E90\u6210\u529F\uFF0C\u5C1D\u8BD5\u5524\u9192\u4E0B\u4E00\u4E2A\u8282\u70B9</span>
        <span class="token class-name">Node</span> h <span class="token operator">=</span> head<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>waitStatus <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token function">unparkSuccessor</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">unparkSuccessor</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> ws <span class="token operator">=</span> node<span class="token punctuation">.</span>waitStatus<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> ws<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Node</span> s <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> s<span class="token punctuation">.</span>waitStatus <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        s <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token comment">// \u4ECE\u5C3E\u90E8\u8282\u70B9\u5F00\u59CB\u904D\u5386\uFF0C\u627E\u5230\u6700\u9760\u524D\u7684\u4E00\u4E2A\u9700\u8981\u6267\u884C\u7684\u8282\u70B9</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span> t <span class="token operator">=</span> tail<span class="token punctuation">;</span> t <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> t <span class="token operator">!=</span> node<span class="token punctuation">;</span> t <span class="token operator">=</span> t<span class="token punctuation">.</span>prev<span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>waitStatus <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
                s <span class="token operator">=</span> t<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token comment">// \u901A\u8FC7unpark\u5524\u9192\u7EBF\u7A0B</span>
        <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u540C\u6837\uFF0CtryRelease\u662F\u4E00\u4E2A\u62BD\u8C61\u65B9\u6CD5\u3002\u91CA\u653E\u8D44\u6E90\u540E\uFF0C\u4F1A\u5224\u65ADwaitStatus\u72B6\u6001\uFF0C\u5524\u9192\u540E\u7EE7\u8282\u70B9\u3002</p><h4 id="\u5171\u4EAB\u9501\u5206\u6790" tabindex="-1"><a class="header-anchor" href="#\u5171\u4EAB\u9501\u5206\u6790" aria-hidden="true">#</a> \u5171\u4EAB\u9501\u5206\u6790</h4><p>\u5171\u4EAB\u9501\u4E0E\u72EC\u5360\u9501\u989D\u533A\u522B\u5728\u4E8E\u5728\u540C\u4E00\u65F6\u523B\u662F\u5426\u6709\u591A\u4E2A\u7EBF\u7A0B\u540C\u65F6\u83B7\u53D6\u5230\u540C\u6B65\u72B6\u6001\u3002</p><p>\u4E0B\u9762\u76F4\u63A5\u4E0A\u4EE3\u7801\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// \u5DF2\u5171\u4EAB\u65B9\u5F0F\u83B7\u53D6\u9501</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">acquireShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryAcquireShared</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token function">doAcquireShared</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// \u6784\u9020\u8282\u70B9\u653E\u5165\u961F\u5217</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doAcquireShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">Node</span> node <span class="token operator">=</span> <span class="token function">addWaiter</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token punctuation">.</span>SHARED<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">boolean</span> failed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">boolean</span> interrupted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">final</span> <span class="token class-name">Node</span> p <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">predecessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// \u5982\u4F55\u5171\u4EAB\u83B7\u53D6\u7684\u903B\u8F91\u5728tryAcquireShared\u65B9\u6CD5\u4E2D</span>
                <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">tryAcquireShared</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// \u8BBE\u7F6EHead\u8282\u70B9</span>
                    <span class="token function">setHeadAndPropagate</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// help GC</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>interrupted<span class="token punctuation">)</span>
                        <span class="token function">selfInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    failed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldParkAfterFailedAcquire</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> node<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">parkAndCheckInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                interrupted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>failed<span class="token punctuation">)</span>
            <span class="token function">cancelAcquire</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token doc-comment comment">/**
 * propagate \u4F20\u64AD
 * 
 */</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setHeadAndPropagate</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">,</span> <span class="token keyword">int</span> propagate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Node</span> h <span class="token operator">=</span> head<span class="token punctuation">;</span> <span class="token comment">// Record old head for check below</span>
    <span class="token function">setHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// setHead\u65B9\u6CD5\u4F1A\u8BBE\u7F6E\u4E00\u4E2A\u65B0\u7684head\uFF0Ch\u6307\u5411\u7684\u662F\u65E7\u7684head</span>
    <span class="token comment">// if\u5224\u65AD\u4F1A\u540C\u65F6\u5224\u65ADold head \u548Cnew head\uFF0C\uFF08h\u91CD\u65B0\u8D4B\u503C\u540E\u4F1A\u6307\u5411\u65B0\u7684head\uFF09</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>propagate <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">||</span> h <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> h<span class="token punctuation">.</span>waitStatus <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">(</span>h <span class="token operator">=</span> head<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> h<span class="token punctuation">.</span>waitStatus <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Node</span> s <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> s<span class="token punctuation">.</span><span class="token function">isShared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token comment">// \u8FD9\u91CC\u76F4\u63A5\u8FDB\u5165\u9501\u91CA\u653E\u7684\u903B\u8F91\uFF0C\u8BA9\u540E\u9762\u7684\u8282\u70B9\u4E89\u62A2\u9501\u3002</span>
            <span class="token function">doReleaseShared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u91CD\u70B9\u6765\u770BtryAcquireShared\u65B9\u6CD5\uFF0C\u8FD9\u662F\u4E00\u4E2A\u62BD\u8C61\u65B9\u6CD5\uFF0C\u5B9E\u73B0\u7531\u5B50\u7C7B\u5B8C\u6210\u3002\u8FD9\u91CC\u4E3B\u8981\u8BF4\u660E\u4E00\u4E0B\u8FD4\u56DE\u503C\uFF1A</p><ul><li>\u5982\u679C\u83B7\u53D6\u5171\u4EAB\u9501\u5931\u8D25\uFF0C\u8FD4\u56DE\u8D1F\u6570</li><li>\u5982\u679C\u83B7\u53D6\u5171\u4EAB\u9501\u6210\u529F\uFF0C\u4F46\u662F\u540E\u7EED\u8282\u70B9\u65E0\u6CD5\u83B7\u53D6\u5171\u4EAB\u9501\uFF0C\u8FD4\u56DE0</li><li>\u5982\u679C\u83B7\u53D6\u5171\u4EAB\u9501\u6210\u529F\uFF0C\u800C\u4E14\u540E\u7EED\u8282\u70B9\u4E5F\u53EF\u4EE5\u83B7\u53D6\u5171\u4EAB\u9501\uFF0C\u8FD4\u56DE\u6B63\u6570\u3002</li></ul><p>\u4E0B\u9762\u770B\u5171\u4EAB\u9501\u91CA\u653E\u7684\u903B\u8F91\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">releaseShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryReleaseShared</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">doReleaseShared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doReleaseShared</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Node</span> h <span class="token operator">=</span> head<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> h <span class="token operator">!=</span> tail<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> ws <span class="token operator">=</span> h<span class="token punctuation">.</span>waitStatus<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">==</span> <span class="token class-name">Node</span><span class="token punctuation">.</span>SIGNAL<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token punctuation">.</span>SIGNAL<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token comment">// loop to recheck cases</span>
                <span class="token function">unparkSuccessor</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token punctuation">.</span>PROPAGATE<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token comment">// loop on failed CAS</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">==</span> head<span class="token punctuation">)</span>                   <span class="token comment">// loop if head changed</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">unparkSuccessor</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> ws <span class="token operator">=</span> node<span class="token punctuation">.</span>waitStatus<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> ws<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Node</span> s <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> s<span class="token punctuation">.</span>waitStatus <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        s <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span> t <span class="token operator">=</span> tail<span class="token punctuation">;</span> t <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> t <span class="token operator">!=</span> node<span class="token punctuation">;</span> t <span class="token operator">=</span> t<span class="token punctuation">.</span>prev<span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>waitStatus <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
                s <span class="token operator">=</span> t<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="reentrantlock" tabindex="-1"><a class="header-anchor" href="#reentrantlock" aria-hidden="true">#</a> ReentrantLock</h2><p>ReentrantLock\uFF0C\u89C1\u540D\u77E5\u610F\uFF0C\u5C31\u662F\u652F\u51FA\u53EF\u51B2\u5165\u7684\u9501\u3002\u5B83\u8868\u793A\u8BE5\u9501\u80FD\u591F\u652F\u6301\u4E00\u4E2A\u7EBF\u7A0B\u5BF9 \u8D44\u6E90\u7684\u91CD\u590D\u52A0\u9501\u3002\u9664\u6B64\u4E4B\u5916\uFF0C\u8BE5\u9501\u8FD8\u652F\u6301\u83B7\u53D6\u9501\u65F6\u7684\u516C\u5E73\u548C\u975E\u516C\u5E73\u6027\u9009\u62E9\u3002</p><p>\u5173\u4E8E\u516C\u5E73\u9501\u548C\u975E\u516C\u5E73\u9501\uFF0C\u5728\u7EDD\u5BF9\u65F6\u95F4\u4E0A\u6765\u8BF4\uFF0C\u5148\u83B7\u53D6\u9501\u7684\u7EBF\u7A0B\u5148\u88AB\u6EE1\u8DB3\uFF0C\u5219\u4E3A\u516C\u5E73\u9501\uFF0C\u5426\u5219\u662F\u975E\u516C\u5E73\u9501\u3002ReentrantLock\u63D0\u4F9B\u4E86\u4E00\u4E2A\u6784\u9020\u51FD\u6570\uFF0C\u80FD\u591F\u63A7\u5236\u9501\u662F\u516C\u5E73\u9501\u8FD8\u662F\u975E\u516C\u5E73\u9501\u3002</p><p>\u7406\u8BBA\u4E0A\u6765\u8BB2\uFF0C\u975E\u516C\u5E73\u9501\u7684\u6548\u7387\u66F4\u9AD8\uFF0C\u4F46\u662F\u516C\u5E73\u9501\u80FD\u591F\u51CF\u5C11\u9965\u997F\u53D1\u751F\u7684\u6982\u7387\u3002</p><h3 id="\u5982\u4F55\u5B9E\u73B0\u9501\u7684\u91CD\u5165" tabindex="-1"><a class="header-anchor" href="#\u5982\u4F55\u5B9E\u73B0\u9501\u7684\u91CD\u5165" aria-hidden="true">#</a> \u5982\u4F55\u5B9E\u73B0\u9501\u7684\u91CD\u5165</h3><p>\u9501\u7684\u51B2\u91CD\u5165\u8981\u89E3\u51B3\u4E00\u4E0B\u4E24\u4E2A\u95EE\u9898\uFF1A</p><ul><li><p><strong>\u7EBF\u7A0B\u518D\u6B21\u83B7\u53D6\u9501</strong>\uFF1A\u9501\u9700\u8981\u53BB\u8BC6\u522B\u83B7\u53D6\u9501\u7684\u7EBF\u7A0B\u662F\u5426\u4E3A\u5F53\u524D\u5360\u636E\u9501\u7684\u7EBF\u7A0B\uFF0C\u5982\u679C\u662F\uFF0C\u5219\u518D\u6B21\u6210\u529F\u83B7\u53D6\u3002</p></li><li><p><strong>\u9501\u7684\u6700\u7EC8\u91CA\u653E</strong>\uFF1A\u7EBF\u7A0B\u91CD\u590Dn\u6B21\u83B7\u53D6\u4E86\u9501\uFF0C\u968F\u540E\u5728\u7B2Cn\u6B21\u91CA\u653E\u8BE5\u9501\u540E\uFF0C\u5176\u4ED6\u7EBF\u7A0B\u80FD\u591F\u83B7\u53D6\u5230 \u8BE5\u9501\u3002\u9501\u7684\u6700\u7EC8\u91CA\u653E\u8981\u6C42\u9501\u5BF9\u4E8E\u83B7\u53D6\u8FDB\u884C\u8BA1\u6570\u81EA\u589E\uFF0C\u8BA1\u6570\u8868\u793A\u5F53\u524D\u9501\u88AB\u91CD\u590D\u83B7\u53D6\u7684\u6B21\u6570\uFF0C\u800C\u9501 \u88AB\u91CA\u653E\u65F6\uFF0C\u8BA1\u6570\u81EA\u51CF\uFF0C\u5F53\u8BA1\u6570\u7B49\u4E8E0\u65F6\u8868\u793A\u9501\u5DF2\u7ECF\u6210\u529F\u91CA\u653E\u3002</p></li></ul><h3 id="reentrantlock\u7684\u5B9E\u73B0" tabindex="-1"><a class="header-anchor" href="#reentrantlock\u7684\u5B9E\u73B0" aria-hidden="true">#</a> ReentrantLock\u7684\u5B9E\u73B0</h3><p>\u5728ReentrantLock\u4E2D\u5B58\u5728\u4E00\u4E2ASync\u7684\u5185\u90E8\u7C7B\uFF0C\u6709\u5173\u4E8EReentrantLock\u6240\u6709\u529F\u80FD\u7684\u5177\u4F53\u5B9E\u73B0\uFF0C\u90FD\u662F\u5728Sync\u53CA\u5176\u5B50\u7C7B\u4E2D\u5B8C\u6210\u7684\uFF0CReentrantLock\u53EA\u662F\u5BF9Sync\u7684\u4E00\u4E2A\u5C01\u88C5\u3002</p><p>\u4E0B\u9762\u5148\u6765\u770B\u770BReentrantLock\u7684\u4EE3\u7801\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReentrantLock</span> <span class="token keyword">implements</span> <span class="token class-name">Lock</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">7373984872572414699L</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/** \u63D0\u4F9B\u6240\u6709\u5B9E\u73B0\u903B\u8F91\u7684 \u5B9E\u73B0\u7C7B \u5185\u90E8\u7C7B */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Sync</span> sync<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/** \u65E0\u53C2\u6784\u9020\uFF0C\u9ED8\u8BA4\u4F7F\u7528\u7684\u662F\u975E\u516C\u5E73\u9501  */</span>
    <span class="token keyword">public</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sync <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NonfairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/** \u6709\u53C2\u6570\u6784\u9020\uFF0C\u7528\u6765\u63A7\u5236\u516C\u5E73\u9501\u6216 */</span>
    <span class="token keyword">public</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> fair<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sync <span class="token operator">=</span> fair <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">FairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">NonfairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/** \u52A0\u9501 */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sync<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/** \u53EF\u4E2D\u65AD\u52A0\u9501 */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        sync<span class="token punctuation">.</span><span class="token function">acquireInterruptibly</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/** \u5C1D\u8BD5\u52A0\u9501\uFF0C\u8BE5\u65B9\u6CD5\u4E0D\u4F1A\u963B\u585E\uFF0C\u7ACB\u5373\u8FD4\u56DE */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> sync<span class="token punctuation">.</span><span class="token function">nonfairTryAcquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/** \u5C1D\u8BD5\u52A0\u9501\uFF0C\u7B49\u5F85\u6307\u5B9A\u65F6\u95F4 */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span>
            <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> sync<span class="token punctuation">.</span><span class="token function">tryAcquireNanos</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> unit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**  \u91CA\u653E\u9501 */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sync<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/** \u662F\u5426\u4E3A\u516C\u5E73\u9501 */</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">isFair</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> sync <span class="token keyword">instanceof</span> <span class="token class-name">FairSync</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ReentrantLock\u76F4\u63A5\u5B9E\u73B0Lock\u63A5\u53E3\uFF0C\u5E76\u6CA1\u6709\u7EE7\u627FAQS\uFF0C\u7531\u6B64\u4E5F\u53EF\u4EE5\u770B\u51FA\uFF0C\u8D77\u9762\u5411\u7684\u662F\u4F7F\u7528\u8005\u3002</p><p>\u5728\u5206\u6790\u6E90\u7801\u4E4B\u524D\uFF0C\u5148\u8BF4\u4E00\u4E0Bstate\u53D8\u91CF\uFF0C\u8FD9\u4E2A\u53D8\u91CF\u5728AbstractQueuedSynchronizer\u91CC\u5B9A\u4E49\uFF0C\u8868\u793A\u5F53\u524D\u83B7\u53D6\u9501\u7684\u7EBF\u7A0B\u6301\u6709\u7684\u8D44\u6E90\u6570\u91CF\u3002\u6700\u5F00\u59CB\u7684\u65F6\u5019\uFF0Cstate\u9ED8\u8BA4\u4E3A0\uFF0C\u5728\u4E89\u62A2\u9501\u7684\u8FC7\u7A0B\u4E2D\uFF0C\u5B9E\u9645\u5C31\u662F\u4FEE\u6539state\u7684\u8FC7\u7A0B\uFF0C\u4FEE\u6539\u6210\u529F\u7684\u7EBF\u7A0B\u5C31\u8868\u793A\u6210\u529F\u4E89\u62A2\u5230\u4E86\u9501\u3002\u518D\u7136\u540E\u5C31\u662F\u9501\u91CD\u5165\uFF0C\u5728\u52A0\u9501\u7684\u65F6\u5019\u4F1A\u5224\u65AD\u6301\u6709\u9501\u7684\u7EBF\u7A0B\u548C\u5F53\u524D\u7EBF\u7A0B\u662F\u5426\u76F8\u540C\uFF0C\u5982\u679C\u76F8\u540C\u7684\u8BDD\uFF0C\u4F1A\u5BF9state\u8FDB\u884C\u7D2F\u52A0\u64CD\u4F5C\u3002\u91CA\u653E\u9501\u7684\u7EBF\u7A0B\u5C31\u662F\u5BF9state\u7684\u51CF\u51CF\u64CD\u4F5C\uFF0C\u76F4\u5230state\u51CF\u52300\u65F6\uFF0C\u5524\u9192\u961F\u5217\u4E2D\u540E\u7EED\u7B49\u5F85\u7684\u7EBF\u7A0B\u3002</p><p>\u4E0B\u9762\u6765\u770B\u770BSync\u7684\u5B9E\u73B0(\u8FD9\u91CC\u53EA\u6709\u6838\u5FC3\u6E90\u7801)\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * Sync\u7C7B\u76F4\u63A5\u7EE7\u627F\u81EAAbstractQueuedSynchronizer
 */</span>
<span class="token keyword">abstract</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Sync</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractQueuedSynchronizer</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/** \u5B9A\u4E49\u7684\u4E00\u4E2A\u62BD\u8C61\u7C7B\uFF0C\u6709\u5B50\u7C7B\u5B9E\u73B0\u3002\u516C\u5E73\u9501\u548C\u975E\u516C\u5E73\u7684\u5DEE\u5F02\u4E5F\u662F\u5728\u8FD9\u4E2A\u65B9\u6CD5\u7684\u5B9E\u73B0\u4E2D\u4F53\u73B0\u7684*/</span>
    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token doc-comment comment">/** \u975E\u516C\u5E73\u7684\u83B7\u53D6\u9501 */</span>
    <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">nonfairTryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">Thread</span> current <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       	<span class="token doc-comment comment">/** \u5148\u83B7\u53D6state\u7684\u72B6\u6001\uFF0C\u5982\u679Cstate==0\uFF0C\u8BF4\u660E\u6CA1\u6709\u88AB\u52A0\u9501\uFF0C\u8FD9\u91CC\u4F1A\u76F4\u63A5\u8FDB\u884C\u9501\u7684\u4E89\u62A2\uFF0C
       	\u6CE8\u610F\u8FD9\u91CC\u4E5F\u662F\u516C\u5E73\u9501\u548C\u975E\u516C\u5E73\u9501\u4E0D\u4E00\u6837\u7684\u5730\u65B9*/</span>
        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u4EE5CAS\u7684\u65B9\u5F0F\u4FEE\u6539\u9501\uFF0C\u5165\u80A1\u4FEE\u6539\u6210\u529F\uFF0C\u8BF4\u660E\u4E89\u62A2\u5230\u4E86\u9501\u3002</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> acquires<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// \u5982\u679Cstate\u4E0D\u4E3A0\uFF0C\u5219\u5224\u65AD\u662F\u4E0D\u662F\u91CD\u5165\u9501\u3002</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u5728\u4E89\u62A2\u5230\u9501\u540E\uFF0C\u9700\u8981\u7684state\u52A0\u4E0A\u9700\u8981\u7684acquires\u8D44\u6E90\u3002</span>
            <span class="token keyword">int</span> nextc <span class="token operator">=</span> c <span class="token operator">+</span> acquires<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>nextc <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// overflow</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;Maximum lock count exceeded&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">setState</span><span class="token punctuation">(</span>nextc<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// \u5230\u8FD9\u91CC\uFF0C\u8BF4\u660E\u62A2\u9501\u5931\u8D25\u4E86\uFF0C\u563F\u563F\u3002</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
	<span class="token doc-comment comment">/** \u9501\u91CA\u653E\u7684\u6D41\u7A0B */</span>
    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryRelease</span><span class="token punctuation">(</span><span class="token keyword">int</span> releases<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> releases<span class="token punctuation">;</span>
        <span class="token comment">// \u5224\u65AD\u7EBF\u7A0B\u662F\u5426\u4E3A\u5F53\u524D\u7EBF\u7A0B</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalMonitorStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">boolean</span> free <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            free <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// \u540C\u4E00\u4E2A\u7EBF\u7A0B\u4E0D\u5B58\u5728\u5E76\u53D1\u7684\u95EE\u9898\uFF0C\u6240\u4EE5\u8FD9\u91CC\u4E0D\u9700\u8981\u52A0\u9501</span>
        <span class="token function">setState</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> free<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5728Sync\u91CC\u9762\u6709\u4E24\u4E2A\u91CD\u8981\u7684\u65B9\u6CD5\u5B9E\u73B0\uFF0CtryRelease\u5B9E\u73B0\u4E86\u9501\u7684\u91CA\u653E\u903B\u8F91\u3002\u5E76\u4E14\u8FD9\u91CC\u8003\u8651\u5230\u4E86\u91CD\u5165\u9501\u7684\u60C5\u51B5\u3002\u53E6\u4E00\u4E2A\u5C31\u662FnonfairTryAcquire\u65B9\u6CD5\uFF0C\u8FD9\u91CC\u4E3B\u8981\u5B9E\u73B0\u4E86\u60B2\u89C2\u9501\u7684\u52A0\u9501\u6D41\u7A0B\u3002</p><p>\u8FD8\u6709\u4E00\u4E2A\u5C31\u662F\u62BD\u8C61\u65B9\u6CD5lock()\uFF0C\u8FD9\u4E2A\u65B9\u6CD5\u5C31\u662F\u52A0\u9501\u7684\u5177\u4F53\u6D41\u7A0B\uFF0C\u4F46\u56E0\u4E3A\u516C\u5E73\u9501\u548C\u975E\u516C\u5E73\u9501\u7684\u5DEE\u5F02\uFF0C\u9700\u8981\u5728\u5177\u4F53\u7684\u5B50\u7C7B\u4E2D\u8FDB\u884C\u5B9E\u73B0\u3002\u4E0B\u9762\u5C31\u6765\u770B\u770B\u516C\u5E73\u9501\u548C\u975E\u516C\u5E73\u9501\u7684\u5B9E\u73B0\u7C7B\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**\u975E\u516C\u5E73\u9501\u7684\u5B9E\u73B0
 */</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">NonfairSync</span> <span class="token keyword">extends</span> <span class="token class-name">Sync</span> <span class="token punctuation">{</span>
	<span class="token comment">// \u52A0\u9501\u65B9\u6CD5\uFF0C \u8FD9\u4E2A\u65B9\u6CD5\u4F1A\u963B\u585E</span>
    <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
	<span class="token comment">// \u52A0\u9501\u65B9\u6CD5\uFF0C\u8FD9\u4E2A\u4E0D\u4F1A\u963B\u585E</span>
    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">nonfairTryAcquire</span><span class="token punctuation">(</span>acquires<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**\u516C\u5E73\u9501\u7684\u52A0\u9501\u5B9E\u73B0\u7C7B */</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">FairSync</span> <span class="token keyword">extends</span> <span class="token class-name">Sync</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u52A0\u9501 \u963B\u585E</span>
    <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* \u52A0\u9501\uFF0C\u975E\u963B\u585E*/</span>
    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">Thread</span> current <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u5224\u65AD\u961F\u5217\u4E2D\u662F\u5426\u6709\u7B49\u5F85\u7684\u7EBF\u7A0B &amp;&amp; \u66F4\u6539state\u53D8\u91CF</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasQueuedPredecessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> acquires<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// \u5224\u65AD\u662F\u5426\u4E3A\u91CD\u5165\u7EBF\u7A0B</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> nextc <span class="token operator">=</span> c <span class="token operator">+</span> acquires<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>nextc <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;Maximum lock count exceeded&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">setState</span><span class="token punctuation">(</span>nextc<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u6CE8\u610F\u516C\u5E73\u9501\u548C\u975E\u516C\u5E73\u9501\u7684\u52A0\u9501\u6D41\u7A0B\uFF0C\u533A\u522B\u5C31\u5728\u4E8E\u975E\u516C\u5E73\u9501\u4E00\u4E0A\u6765\u5C31\u5BF9state\u8FDB\u884C\u4FEE\u6539\uFF08\u63D2\u961F\uFF09\uFF0C\u800C\u516C\u5E73\u9501\u5219\u4E56\u4E56\u7684\u53BB\u6392\u961F\u3002</p><p>\u91CD\u5165\u9501\u7684\u4ECB\u7ECD\u5C31\u5230\u6B64\u4E3A\u6B62\u4E86\u3002</p><h2 id="reentrantreadwritelock" tabindex="-1"><a class="header-anchor" href="#reentrantreadwritelock" aria-hidden="true">#</a> ReentrantReadWriteLock</h2><p>\u8BFB\u5199\u9501\uFF0C\u5728\u540C\u4E00\u65F6\u523B\u5141\u8BB8\u591A\u4E2A\u8BFB\u7EBF\u7A0B\u8FDB\u884C\u8BBF\u95EE\uFF0C\u4F46\u662F\u5728\u5199\u7EBF\u7A0B\u8FDB\u884C\u8BBF\u95EE\u65F6\uFF0C\u6240\u6709\u7684\u8BFB\u7EBF\u7A0B\u548C\u5176\u4ED6\u7684\u5199\u7EBF\u7A0B\u5747\u88AB\u963B\u585E\u3002\u8BFB\u5199\u9501\u7EF4\u62A4\u4E86\u4E00\u5BF9\u9501\uFF0C\u4E00\u4E2A\u8BFB\u9501\u548C\u4E00\u4E2A\u5199\u9501\uFF0C\u901A\u8FC7\u5206\u79BB\u8BFB\u9501\u548C\u5199\u9501\uFF0C\u4F7F\u5F97\u5E76\u53D1\u6027\u76F8\u6BD4\u4E8E\u4E00\u822C\u7684\u5199\u9501\u6709\u4E86\u5F88\u5927\u7684\u63D0\u5347\u3002</p><p>\u8BFB\u5199\u9501\u7684\u4E00\u4E9B\u7279\u6027\uFF1A</p><table><thead><tr><th>\u7279\u6027</th><th>\u8BF4\u660E</th></tr></thead><tbody><tr><td>\u516C\u5E73\u6027\u9009\u62E9</td><td>\u652F\u6301\u975E\u516C\u5E73\uFF08\u9ED8\u8BA4\uFF09\u548C\u516C\u5E73\u7684\u9501\u83B7\u53D6\u65B9\u5F0F\uFF0C\u541E\u5410\u91CF\u8FD8\u662F\u975E\u516C\u5E73\u4F18\u4E8E\u516C\u5E73\u3002</td></tr><tr><td>\u53EF\u91CD\u5165</td><td>\u8BFB\u9501\u548C\u5199\u9501\u90FD\u53EF\u4EE5\u91CD\u8FDB\u5165</td></tr><tr><td>\u9501\u964D\u7EA7</td><td>\u9075\u5FAA\u83B7\u53D6\u5199\u9501\u3001\u83B7\u53D6\u8BFB\u9501\u5728\u91CA\u653E\u5199\u9501\u7684\u6B21\u5E8F\uFF0C\u5199\u9501\u80FD\u591F\u964D\u7EA7\u4E3A\u8BFB\u9501\u3002</td></tr></tbody></table><h3 id="\u5982\u4F55\u5B9E\u73B0\u8BFB\u5199\u9501" tabindex="-1"><a class="header-anchor" href="#\u5982\u4F55\u5B9E\u73B0\u8BFB\u5199\u9501" aria-hidden="true">#</a> \u5982\u4F55\u5B9E\u73B0\u8BFB\u5199\u9501</h3><h4 id="\u8BFB\u5199\u72B6\u6001\u7684\u8BBE\u8BA1" tabindex="-1"><a class="header-anchor" href="#\u8BFB\u5199\u72B6\u6001\u7684\u8BBE\u8BA1" aria-hidden="true">#</a> \u8BFB\u5199\u72B6\u6001\u7684\u8BBE\u8BA1</h4><p>\u8BFB\u5199\u9501\u540C\u6837\u4F9D\u8D56\u81EA\u5B9A\u4E49\u540C\u6B65\u5668\u6765\u5B9E\u73B0\u540C\u6B65\u529F\u80FD\uFF0C\u800C\u8BFB\u5199\u72B6\u6001\u5C31\u662F\u5176\u540C\u6B65\u5668\u7684\u540C\u6B65\u72B6\u6001\u3002\u4E0D\u540C\u4E8EReentrantLock\uFF0C\u8BFB\u5199\u9501\u7684\u81EA\u5B9A\u4E49\u540C\u6B65\u5668\u9700\u8981\u5728\u540C\u6B65\u72B6\u6001\uFF08\u4E00\u4E2A\u6574\u578B\u53D8\u91CF\uFF09\u4E0A\u7EF4\u62A4\u591A\u4E2A\u8BFB\u7EBF\u7A0B\u548C\u4E00\u4E2A\u5199\u7EBF\u7A0B\u7684\u72B6 \u6001\uFF0C\u4F7F\u5F97\u8BE5\u72B6\u6001\u7684\u8BBE\u8BA1\u6210\u4E3A\u8BFB\u5199\u9501\u5B9E\u73B0\u7684\u5173\u952E\u3002\u8BFB\u5199\u9501\u5C06\u4E00\u4E2Aint\u578B\u7684\u53D8\u91CF\u5207\u5206\u6210\u4E86\u4E24\u4E2A\u90E8\u5206\uFF0C\u9AD816\u4F4D\u8868\u793A\u8BFB\uFF0C\u4F4E16\u4F4D\u8868\u793A\u5199\uFF0C\u5212\u5206\u65B9\u5F0F\u5982\u56FE\u6240\u793A\u3002</p><p><img src="`+d+`" alt="image-20220813123924072"></p><p>\u5F53\u524D\u540C\u6B65\u72B6\u6001\u8868\u793A\u4E00\u4E2A\u7EBF\u7A0B\u5DF2\u7ECF\u83B7\u53D6\u4E86\u5199\u9501\uFF0C\u4E14\u91CD\u8FDB\u5165\u4E86\u4E24\u6B21\uFF0C\u540C\u65F6\u4E5F\u8FDE\u7EED\u83B7\u53D6\u4E86\u4E24\u6B21\u8BFB\u9501\u3002\u8BFB\u5199\u9501\u662F\u5982\u4F55\u8FC5\u901F\u786E\u5B9A\u8BFB\u548C\u5199\u5404\u81EA\u7684\u72B6\u6001\u5462\uFF1F\u7B54\u6848\u662F\u901A\u8FC7\u4F4D\u8FD0\u7B97\u3002\u5047\u8BBE\u5F53\u524D\u540C\u6B65\u72B6\u6001 \u503C\u4E3AS\uFF0C\u5199\u72B6\u6001\u7B49\u4E8ES&amp;0x0000FFFF\uFF08\u5C06\u9AD816\u4F4D\u5168\u90E8\u62B9\u53BB\uFF09\uFF0C\u8BFB\u72B6\u6001\u7B49\u4E8ES&gt;&gt;&gt;16\uFF08\u65E0\u7B26\u53F7\u88650\u53F3\u79FB 16\u4F4D\uFF09\u3002\u5F53\u5199\u72B6\u6001\u589E\u52A01\u65F6\uFF0C\u7B49\u4E8ES+1\uFF0C\u5F53\u8BFB\u72B6\u6001\u589E\u52A01\u65F6\uFF0C\u7B49\u4E8ES+(1&lt;&lt;16)\uFF0C\u4E5F\u5C31\u662F S+0x00010000\u3002</p><p>\u6839\u636E\u72B6\u6001\u7684\u5212\u5206\u80FD\u5F97\u51FA\u4E00\u4E2A\u63A8\u8BBA\uFF1AS\u4E0D\u7B49\u4E8E0\u65F6\uFF0C\u5F53\u5199\u72B6\u6001\uFF08S&amp;0x0000FFFF\uFF09\u7B49\u4E8E0\u65F6\uFF0C\u5219\u8BFB\u72B6\u6001\uFF08S&gt;&gt;&gt;16\uFF09\u5927\u4E8E0\uFF0C\u5373\u8BFB\u9501\u5DF2\u88AB\u83B7\u53D6\u3002</p><h4 id="\u5199\u9501\u7684\u83B7\u53D6\u4E0E\u91CA\u653E" tabindex="-1"><a class="header-anchor" href="#\u5199\u9501\u7684\u83B7\u53D6\u4E0E\u91CA\u653E" aria-hidden="true">#</a> \u5199\u9501\u7684\u83B7\u53D6\u4E0E\u91CA\u653E</h4><p>\u5199\u9501\u662F\u4E00\u4E2A\u652F\u6301\u91CD\u8FDB\u5165\u7684\u6392\u5B83\u9501\u3002\u5982\u679C\u5F53\u524D\u7EBF\u7A0B\u5DF2\u7ECF\u83B7\u53D6\u4E86\u5199\u9501\uFF0C\u5219\u589E\u52A0\u5199\u72B6\u6001\u3002\u5982\u679C\u5F53\u524D\u7EBF\u7A0B\u5728\u83B7\u53D6\u5199\u9501\u65F6\uFF0C\u8BFB\u9501\u5DF2\u7ECF\u88AB\u83B7\u53D6\uFF08\u8BFB\u72B6\u6001\u4E0D\u4E3A0\uFF09\u6216\u8005\u8BE5\u7EBF\u7A0B\u4E0D\u662F\u5DF2\u7ECF\u83B7\u53D6\u5199\u9501\u7684\u7EBF\u7A0B\uFF0C\u5219\u5F53\u524D\u7EBF\u7A0B\u8FDB\u5165\u7B49\u5F85\u72B6\u6001\uFF0C\u83B7\u53D6\u5199\u9501\u7684\u4EE3\u7801\u5B9E\u73B0\u5982\u4E0B\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Thread</span> current <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// \u8BA1\u7B97\u5199\u72B6\u6001</span>
    <span class="token keyword">int</span> w <span class="token operator">=</span> <span class="token function">exclusiveCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u5982\u679Cc!= 0 \u5E76\u4E14 \u5199\u72B6\u6001\u4E3A0\uFF0C\u8BF4\u660E\u6709\u7EBF\u7A0B\u6301\u6709\u8BFB\u9501\uFF0C\u8FD4\u56DEfalse(\u8BFB\u9501\u548C\u5199\u9501\u4E92\u65A5)</span>
        <span class="token comment">// \u5982\u679Cc!= 0 \u5E76\u4E14 \u5199\u72B6\u6001\u4E0D\u4E3A0\uFF0C \u4F46\u662F\u6301\u6709\u9501\u7684\u7EBF\u7A0B\u4E0D\u662F\u5F53\u524D\u7EBF\u7A0B\uFF0C\u8FD4\u56DEfasle(\u5199\u9501\u548C\u5199\u9501\u4E92\u65A5)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>w <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> current <span class="token operator">!=</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token comment">// \u5224\u65AD\u52A0\u9501\u6B21\u6570\u662F\u5426\u8D85\u8FC7\u4E0A\u9650</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>w <span class="token operator">+</span> <span class="token function">exclusiveCount</span><span class="token punctuation">(</span>acquires<span class="token punctuation">)</span> <span class="token operator">&gt;</span> MAX_COUNT<span class="token punctuation">)</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;Maximum lock count exceeded&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// \u8BBE\u7F6Estate</span>
        <span class="token function">setState</span><span class="token punctuation">(</span>c <span class="token operator">+</span> acquires<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">writerShouldBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> c <span class="token operator">+</span> acquires<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u8BE5\u65B9\u6CD5\u9664\u4E86\u91CD\u5165\u6761\u4EF6\uFF08\u5F53\u524D\u7EBF\u7A0B\u4E3A\u83B7\u53D6\u4E86\u5199\u9501\u7684\u7EBF\u7A0B\uFF09\u4E4B\u5916\uFF0C\u589E\u52A0\u4E86\u4E00\u4E2A\u8BFB\u9501\u662F\u5426\u5B58\u5728\u7684\u5224\u65AD\u3002\u5982\u679C\u5B58\u5728\u8BFB\u9501\uFF0C\u5219\u5199\u9501\u4E0D\u80FD\u88AB\u83B7\u53D6\uFF0C\u539F\u56E0\u5728\u4E8E\uFF1A\u8BFB\u5199\u9501\u8981\u786E\u4FDD\u5199\u9501\u7684\u64CD\u4F5C\u5BF9\u8BFB\u9501\u53EF\u89C1\uFF0C\u5982\u679C\u5141\u8BB8\u8BFB\u9501\u5728\u5DF2\u88AB\u83B7\u53D6\u7684\u60C5\u51B5\u4E0B\u5BF9\u5199\u9501\u7684\u83B7\u53D6\uFF0C\u90A3\u4E48\u6B63\u5728\u8FD0\u884C\u7684\u5176\u4ED6\u8BFB\u7EBF\u7A0B\u5C31\u65E0\u6CD5\u611F\u77E5\u5230\u5F53\u524D\u5199\u7EBF\u7A0B\u7684\u64CD\u4F5C\u3002\u56E0\u6B64\uFF0C\u53EA\u6709\u7B49\u5F85\u5176\u4ED6\u8BFB\u7EBF\u7A0B\u90FD\u91CA\u653E\u4E86\u8BFB\u9501\uFF0C\u5199\u9501\u624D\u80FD\u88AB\u5F53\u524D\u7EBF\u7A0B\u83B7\u53D6\uFF0C\u800C\u5199\u9501\u4E00\u65E6\u88AB\u83B7\u53D6\uFF0C\u5219\u5176\u4ED6\u8BFB\u5199\u7EBF\u7A0B\u7684\u540E\u7EED\u8BBF\u95EE\u5747\u88AB\u963B\u585E\u3002</p><p>\u5199\u9501\u7684\u91CA\u653E\u4E0EReentrantLock\u7684\u91CA\u653E\u8FC7\u7A0B\u57FA\u672C\u7C7B\u4F3C\uFF0C\u6BCF\u6B21\u91CA\u653E\u5747\u51CF\u5C11\u5199\u72B6\u6001\uFF0C\u5F53\u5199\u72B6\u6001\u4E3A0\u65F6\u8868\u793A\u5199\u9501\u5DF2\u88AB\u91CA\u653E\uFF0C\u4ECE\u800C\u7B49\u5F85\u7684\u8BFB\u5199\u7EBF\u7A0B\u80FD\u591F\u7EE7\u7EED\u8BBF\u95EE\u8BFB\u5199\u9501\uFF0C\u540C\u65F6\u524D\u6B21\u5199\u7EBF\u7A0B\u7684\u4FEE\u6539\u5BF9\u540E\u7EED\u8BFB\u5199\u7EBF\u7A0B\u53EF\u89C1\u3002</p><h4 id="\u8BFB\u9501\u7684\u83B7\u53D6\u4E0E\u91CA\u653E" tabindex="-1"><a class="header-anchor" href="#\u8BFB\u9501\u7684\u83B7\u53D6\u4E0E\u91CA\u653E" aria-hidden="true">#</a> \u8BFB\u9501\u7684\u83B7\u53D6\u4E0E\u91CA\u653E</h4><p>\u8BFB\u9501\u662F\u4E00\u4E2A\u652F\u6301\u91CD\u8FDB\u5165\u7684\u5171\u4EAB\u9501\uFF0C\u5B83\u80FD\u591F\u88AB\u591A\u4E2A\u7EBF\u7A0B\u540C\u65F6\u83B7\u53D6\uFF0C\u5728\u6CA1\u6709\u5176\u4ED6\u5199\u7EBF\u7A0B\u8BBF\u95EE\uFF08\u6216\u8005\u5199\u72B6\u6001\u4E3A0\uFF09\u65F6\uFF0C\u8BFB\u9501\u603B\u4F1A\u88AB\u6210\u529F\u5730\u83B7\u53D6\uFF0C\u800C\u6240\u505A\u7684\u4E5F\u53EA\u662F\uFF08\u7EBF\u7A0B\u5B89\u5168\u7684\uFF09\u589E\u52A0\u8BFB\u72B6\u6001\u3002\u5982\u679C\u5F53\u524D\u7EBF\u7A0B\u5DF2\u7ECF\u83B7\u53D6\u4E86\u8BFB\u9501\uFF0C\u5219\u589E\u52A0\u8BFB\u72B6\u6001\u3002\u5982\u679C\u5F53\u524D\u7EBF\u7A0B\u5728\u83B7\u53D6\u8BFB\u9501\u65F6\uFF0C\u5199\u9501\u5DF2\u88AB\u5176\u4ED6\u7EBF\u7A0B\u83B7\u53D6\uFF0C\u5219\u8FDB\u5165\u7B49\u5F85\u72B6\u6001\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * \u8FD9\u91CC\u5728\u56DE\u987E\u4E00\u4E0B\u8FD4\u56DE\u503C\uFF1A
 * \u8D1F\u6570\uFF1A \u5171\u4EAB\u9501\u83B7\u53D6\u5931\u8D25
 */</span>
<span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">tryAcquireShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> unused<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Thread</span> current <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// \u5199\u72B6\u6001\u4E0D\u4E3A0 &amp;&amp; \u6301\u6709\u5199\u72B6\u6001\u7684\u7EBF\u7A0B\u4E0D\u662F\u5F53\u524D\u7EBF\u7A0B(\u8BFB\u9501\u548C\u5199\u9501\u4E92\u65A5)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">exclusiveCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> current<span class="token punctuation">)</span>
        <span class="token comment">// \u83B7\u53D6\u8BFB\u9501\u5931\u8D25</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">// \u83B7\u53D6\u8BFB\u72B6\u6001</span>
    <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">sharedCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">readerShouldBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> r <span class="token operator">&lt;</span> MAX_COUNT <span class="token operator">&amp;&amp;</span> <span class="token function">compareAndSetState</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> c <span class="token operator">+</span> SHARED_UNIT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            firstReader <span class="token operator">=</span> current<span class="token punctuation">;</span>
            firstReaderHoldCount <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>firstReader <span class="token operator">==</span> current<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            firstReaderHoldCount<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">HoldCounter</span> rh <span class="token operator">=</span> cachedHoldCounter<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>rh <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> rh<span class="token punctuation">.</span>tid <span class="token operator">!=</span> <span class="token function">getThreadId</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">)</span>
                cachedHoldCounter <span class="token operator">=</span> rh <span class="token operator">=</span> readHolds<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>rh<span class="token punctuation">.</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
                readHolds<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>rh<span class="token punctuation">)</span><span class="token punctuation">;</span>
            rh<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">fullTryAcquireShared</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">fullTryAcquireShared</span><span class="token punctuation">(</span><span class="token class-name">Thread</span> current<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/*
             * This code is in part redundant with that in
             * tryAcquireShared but is simpler overall by not
             * complicating tryAcquireShared with interactions between
             * retries and lazily reading hold counts.
             */</span>
    <span class="token class-name">HoldCounter</span> rh <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">exclusiveCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> current<span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token comment">// else we hold the exclusive lock; blocking here</span>
            <span class="token comment">// would cause deadlock.</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">readerShouldBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// Make sure we&#39;re not acquiring read lock reentrantly</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>firstReader <span class="token operator">==</span> current<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// assert firstReaderHoldCount &gt; 0;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>rh <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    rh <span class="token operator">=</span> cachedHoldCounter<span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>rh <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> rh<span class="token punctuation">.</span>tid <span class="token operator">!=</span> <span class="token function">getThreadId</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        rh <span class="token operator">=</span> readHolds<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>rh<span class="token punctuation">.</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
                            readHolds<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>rh<span class="token punctuation">.</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
                    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sharedCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">==</span> MAX_COUNT<span class="token punctuation">)</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;Maximum lock count exceeded&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> c <span class="token operator">+</span> SHARED_UNIT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sharedCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                firstReader <span class="token operator">=</span> current<span class="token punctuation">;</span>
                firstReaderHoldCount <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>firstReader <span class="token operator">==</span> current<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                firstReaderHoldCount<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>rh <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                    rh <span class="token operator">=</span> cachedHoldCounter<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>rh <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> rh<span class="token punctuation">.</span>tid <span class="token operator">!=</span> <span class="token function">getThreadId</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">)</span>
                    rh <span class="token operator">=</span> readHolds<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>rh<span class="token punctuation">.</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
                    readHolds<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>rh<span class="token punctuation">)</span><span class="token punctuation">;</span>
                rh<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>
                cachedHoldCounter <span class="token operator">=</span> rh<span class="token punctuation">;</span> <span class="token comment">// cache for release</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="\u9501\u964D\u7EA7" tabindex="-1"><a class="header-anchor" href="#\u9501\u964D\u7EA7" aria-hidden="true">#</a> \u9501\u964D\u7EA7</h4><p>\u9501\u964D\u7EA7\u6307\u7684\u662F\u5199\u9501\u964D\u7EA7\u6210\u4E3A\u8BFB\u9501\u3002\u9501\u964D\u7EA7\u662F\u6307\u628A\u6301\u4F4F\uFF08\u5F53\u524D\u62E5\u6709\u7684\uFF09\u5199\u9501\uFF0C\u518D\u83B7\u53D6\u5230\u8BFB\u9501\uFF0C\u968F\u540E\u91CA\u653E\uFF08\u5148\u524D\u62E5\u6709\u7684\uFF09\u5199\u9501\u7684\u8FC7\u7A0B\u3002</p><h3 id="\u5B8C\u6574\u7684\u5B9E\u73B0\u6E90\u7801" tabindex="-1"><a class="header-anchor" href="#\u5B8C\u6574\u7684\u5B9E\u73B0\u6E90\u7801" aria-hidden="true">#</a> \u5B8C\u6574\u7684\u5B9E\u73B0\u6E90\u7801</h3><p>\u540CReentrantLock\u7684\u5B9E\u73B0\u7C7B\u4F3C\uFF0CReentrantReadWriteLock\u4E2D\u6240\u6709\u83B7\u53D6\u9501\u53CA\u91CA\u653E\u9501\u7684\u903B\u8F91\u90FD\u662F\u7531\u7C7B\u5185\u90E8Sync\u53CA\u5176\u5B50\u7C7B\u5B9E\u73B0\u7684\uFF0C\u8BE5\u7C7B\u53EA\u662F\u5BF9\u529F\u80FD\u505A\u4E86\u4E00\u4E2A\u5C01\u88C5\u3002\u4E0B\u9762\u54B1\u4EEC\u76F4\u63A5\u770BSync\u7684\u5B9E\u73B0</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">abstract</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Sync</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractQueuedSynchronizer</span> <span class="token punctuation">{</span>
    
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SHARED_SHIFT   <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SHARED_UNIT    <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> SHARED_SHIFT<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAX_COUNT      <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> SHARED_SHIFT<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> EXCLUSIVE_MASK <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> SHARED_SHIFT<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/** Returns the number of shared holds represented in count  */</span>
    <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sharedCount</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span>    <span class="token punctuation">{</span> <span class="token keyword">return</span> c <span class="token operator">&gt;&gt;&gt;</span> SHARED_SHIFT<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token doc-comment comment">/** Returns the number of exclusive holds represented in count  */</span>
    <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">exclusiveCount</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> c <span class="token operator">&amp;</span> EXCLUSIVE_MASK<span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
         * A counter for per-thread read hold counts.
         * Maintained as a ThreadLocal; cached in cachedHoldCounter
         */</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">HoldCounter</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token comment">// Use id, not reference, to avoid garbage retention</span>
        <span class="token keyword">final</span> <span class="token keyword">long</span> tid <span class="token operator">=</span> <span class="token function">getThreadId</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
         * ThreadLocal subclass. Easiest to explicitly define for sake
         * of deserialization mechanics.
         */</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">ThreadLocalHoldCounter</span>
        <span class="token keyword">extends</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HoldCounter</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token class-name">HoldCounter</span> <span class="token function">initialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HoldCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
         * The number of reentrant read locks held by current thread.
         * Initialized only in constructor and readObject.
         * Removed whenever a thread&#39;s read hold count drops to 0.
         */</span>
    <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token class-name">ThreadLocalHoldCounter</span> readHolds<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
         * The hold count of the last thread to successfully acquire
         * readLock. This saves ThreadLocal lookup in the common case
         * where the next thread to release is the last one to
         * acquire. This is non-volatile since it is just used
         * as a heuristic, and would be great for threads to cache.
         *
         * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Can outlive the Thread for which it is caching the read
         * hold count, but avoids garbage retention by not retaining a
         * reference to the Thread.
         *
         * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Accessed via a benign data race; relies on the memory
         * model&#39;s final field and out-of-thin-air guarantees.
         */</span>
    <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token class-name">HoldCounter</span> cachedHoldCounter<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
         * firstReader is the first thread to have acquired the read lock.
         * firstReaderHoldCount is firstReader&#39;s hold count.
         *
         * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>More precisely, firstReader is the unique thread that last
         * changed the shared count from 0 to 1, and has not released the
         * read lock since then; null if there is no such thread.
         *
         * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Cannot cause garbage retention unless the thread terminated
         * without relinquishing its read locks, since tryReleaseShared
         * sets it to null.
         *
         * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Accessed via a benign data race; relies on the memory
         * model&#39;s out-of-thin-air guarantees for references.
         *
         * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>This allows tracking of read holds for uncontended read
         * locks to be very cheap.
         */</span>
    <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token class-name">Thread</span> firstReader <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">int</span> firstReaderHoldCount<span class="token punctuation">;</span>

    <span class="token class-name">Sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        readHolds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocalHoldCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setState</span><span class="token punctuation">(</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ensures visibility of readHolds</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/*
         * Acquires and releases use the same code for fair and
         * nonfair locks, but differ in whether/how they allow barging
         * when queues are non-empty.
         */</span>

    <span class="token doc-comment comment">/**
         * Returns true if the current thread, when trying to acquire
         * the read lock, and otherwise eligible to do so, should block
         * because of policy for overtaking other waiting threads.
         */</span>
    <span class="token keyword">abstract</span> <span class="token keyword">boolean</span> <span class="token function">readerShouldBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
         * Returns true if the current thread, when trying to acquire
         * the write lock, and otherwise eligible to do so, should block
         * because of policy for overtaking other waiting threads.
         */</span>
    <span class="token keyword">abstract</span> <span class="token keyword">boolean</span> <span class="token function">writerShouldBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/*
         * Note that tryRelease and tryAcquire can be called by
         * Conditions. So it is possible that their arguments contain
         * both read and write holds that are all released during a
         * condition wait and re-established in tryAcquire.
         */</span>

    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryRelease</span><span class="token punctuation">(</span><span class="token keyword">int</span> releases<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isHeldExclusively</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalMonitorStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> nextc <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> releases<span class="token punctuation">;</span>
        <span class="token keyword">boolean</span> free <span class="token operator">=</span> <span class="token function">exclusiveCount</span><span class="token punctuation">(</span>nextc<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>free<span class="token punctuation">)</span>
            <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setState</span><span class="token punctuation">(</span>nextc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> free<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">/*
             * Walkthrough:
             * 1. If read count nonzero or write count nonzero
             *    and owner is a different thread, fail.
             * 2. If count would saturate, fail. (This can only
             *    happen if count is already nonzero.)
             * 3. Otherwise, this thread is eligible for lock if
             *    it is either a reentrant acquire or
             *    queue policy allows it. If so, update state
             *    and set owner.
             */</span>
        <span class="token class-name">Thread</span> current <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> w <span class="token operator">=</span> <span class="token function">exclusiveCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// (Note: if c != 0 and w == 0 then shared count != 0)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>w <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> current <span class="token operator">!=</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>w <span class="token operator">+</span> <span class="token function">exclusiveCount</span><span class="token punctuation">(</span>acquires<span class="token punctuation">)</span> <span class="token operator">&gt;</span> MAX_COUNT<span class="token punctuation">)</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;Maximum lock count exceeded&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// Reentrant acquire</span>
            <span class="token function">setState</span><span class="token punctuation">(</span>c <span class="token operator">+</span> acquires<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">writerShouldBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span>
            <span class="token operator">!</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> c <span class="token operator">+</span> acquires<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryReleaseShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> unused<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Thread</span> current <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>firstReader <span class="token operator">==</span> current<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// assert firstReaderHoldCount &gt; 0;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>firstReaderHoldCount <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
                firstReader <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span>
                firstReaderHoldCount<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">HoldCounter</span> rh <span class="token operator">=</span> cachedHoldCounter<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>rh <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> rh<span class="token punctuation">.</span>tid <span class="token operator">!=</span> <span class="token function">getThreadId</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">)</span>
                rh <span class="token operator">=</span> readHolds<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> count <span class="token operator">=</span> rh<span class="token punctuation">.</span>count<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                readHolds<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
                    <span class="token keyword">throw</span> <span class="token function">unmatchedUnlockException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token operator">--</span>rh<span class="token punctuation">.</span>count<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> nextc <span class="token operator">=</span> c <span class="token operator">-</span> SHARED_UNIT<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> nextc<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment">// Releasing the read lock has no effect on readers,</span>
                <span class="token comment">// but it may allow waiting writers to proceed if</span>
                <span class="token comment">// both read and write locks are now free.</span>
                <span class="token keyword">return</span> nextc <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">IllegalMonitorStateException</span> <span class="token function">unmatchedUnlockException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">IllegalMonitorStateException</span><span class="token punctuation">(</span>
            <span class="token string">&quot;attempt to unlock read lock, not locked by current thread&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">tryAcquireShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> unused<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">/*
             * Walkthrough:
             * 1. If write lock held by another thread, fail.
             * 2. Otherwise, this thread is eligible for
             *    lock wrt state, so ask if it should block
             *    because of queue policy. If not, try
             *    to grant by CASing state and updating count.
             *    Note that step does not check for reentrant
             *    acquires, which is postponed to full version
             *    to avoid having to check hold count in
             *    the more typical non-reentrant case.
             * 3. If step 2 fails either because thread
             *    apparently not eligible or CAS fails or count
             *    saturated, chain to version with full retry loop.
             */</span>
        <span class="token class-name">Thread</span> current <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">exclusiveCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>
            <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> current<span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">sharedCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">readerShouldBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
            r <span class="token operator">&lt;</span> MAX_COUNT <span class="token operator">&amp;&amp;</span>
            <span class="token function">compareAndSetState</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> c <span class="token operator">+</span> SHARED_UNIT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                firstReader <span class="token operator">=</span> current<span class="token punctuation">;</span>
                firstReaderHoldCount <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>firstReader <span class="token operator">==</span> current<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                firstReaderHoldCount<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token class-name">HoldCounter</span> rh <span class="token operator">=</span> cachedHoldCounter<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>rh <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> rh<span class="token punctuation">.</span>tid <span class="token operator">!=</span> <span class="token function">getThreadId</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">)</span>
                    cachedHoldCounter <span class="token operator">=</span> rh <span class="token operator">=</span> readHolds<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>rh<span class="token punctuation">.</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
                    readHolds<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>rh<span class="token punctuation">)</span><span class="token punctuation">;</span>
                rh<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token function">fullTryAcquireShared</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
         * Full version of acquire for reads, that handles CAS misses
         * and reentrant reads not dealt with in tryAcquireShared.
         */</span>
    <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">fullTryAcquireShared</span><span class="token punctuation">(</span><span class="token class-name">Thread</span> current<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">/*
             * This code is in part redundant with that in
             * tryAcquireShared but is simpler overall by not
             * complicating tryAcquireShared with interactions between
             * retries and lazily reading hold counts.
             */</span>
        <span class="token class-name">HoldCounter</span> rh <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">exclusiveCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> current<span class="token punctuation">)</span>
                    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token comment">// else we hold the exclusive lock; blocking here</span>
                <span class="token comment">// would cause deadlock.</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">readerShouldBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// Make sure we&#39;re not acquiring read lock reentrantly</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>firstReader <span class="token operator">==</span> current<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// assert firstReaderHoldCount &gt; 0;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>rh <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        rh <span class="token operator">=</span> cachedHoldCounter<span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>rh <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> rh<span class="token punctuation">.</span>tid <span class="token operator">!=</span> <span class="token function">getThreadId</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            rh <span class="token operator">=</span> readHolds<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span>rh<span class="token punctuation">.</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
                                readHolds<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>rh<span class="token punctuation">.</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
                        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sharedCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">==</span> MAX_COUNT<span class="token punctuation">)</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;Maximum lock count exceeded&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> c <span class="token operator">+</span> SHARED_UNIT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sharedCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    firstReader <span class="token operator">=</span> current<span class="token punctuation">;</span>
                    firstReaderHoldCount <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>firstReader <span class="token operator">==</span> current<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    firstReaderHoldCount<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>rh <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                        rh <span class="token operator">=</span> cachedHoldCounter<span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>rh <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> rh<span class="token punctuation">.</span>tid <span class="token operator">!=</span> <span class="token function">getThreadId</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">)</span>
                        rh <span class="token operator">=</span> readHolds<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>rh<span class="token punctuation">.</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
                        readHolds<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>rh<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    rh<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>
                    cachedHoldCounter <span class="token operator">=</span> rh<span class="token punctuation">;</span> <span class="token comment">// cache for release</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
         * Performs tryLock for write, enabling barging in both modes.
         * This is identical in effect to tryAcquire except for lack
         * of calls to writerShouldBlock.
         */</span>
    <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Thread</span> current <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> w <span class="token operator">=</span> <span class="token function">exclusiveCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>w <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> current <span class="token operator">!=</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>w <span class="token operator">==</span> MAX_COUNT<span class="token punctuation">)</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;Maximum lock count exceeded&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> c <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
         * Performs tryLock for read, enabling barging in both modes.
         * This is identical in effect to tryAcquireShared except for
         * lack of calls to readerShouldBlock.
         */</span>
    <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryReadLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Thread</span> current <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">exclusiveCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>
                <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> current<span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">sharedCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> MAX_COUNT<span class="token punctuation">)</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;Maximum lock count exceeded&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> c <span class="token operator">+</span> SHARED_UNIT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    firstReader <span class="token operator">=</span> current<span class="token punctuation">;</span>
                    firstReaderHoldCount <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>firstReader <span class="token operator">==</span> current<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    firstReaderHoldCount<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token class-name">HoldCounter</span> rh <span class="token operator">=</span> cachedHoldCounter<span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>rh <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> rh<span class="token punctuation">.</span>tid <span class="token operator">!=</span> <span class="token function">getThreadId</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">)</span>
                        cachedHoldCounter <span class="token operator">=</span> rh <span class="token operator">=</span> readHolds<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>rh<span class="token punctuation">.</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
                        readHolds<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>rh<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    rh<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">isHeldExclusively</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// While we must in general read state before owner,</span>
        <span class="token comment">// we don&#39;t need to do so to check if current thread is owner</span>
        <span class="token keyword">return</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Methods relayed to outer class</span>

    <span class="token keyword">final</span> <span class="token class-name">ConditionObject</span> <span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConditionObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">final</span> <span class="token class-name">Thread</span> <span class="token function">getOwner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Must read state before owner to ensure memory consistency</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">exclusiveCount</span><span class="token punctuation">(</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span>
                <span class="token keyword">null</span> <span class="token operator">:</span>
                <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getReadLockCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">sharedCount</span><span class="token punctuation">(</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">isWriteLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">exclusiveCount</span><span class="token punctuation">(</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getWriteHoldCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">isHeldExclusively</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">exclusiveCount</span><span class="token punctuation">(</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getReadHoldCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getReadLockCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

        <span class="token class-name">Thread</span> current <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>firstReader <span class="token operator">==</span> current<span class="token punctuation">)</span>
            <span class="token keyword">return</span> firstReaderHoldCount<span class="token punctuation">;</span>

        <span class="token class-name">HoldCounter</span> rh <span class="token operator">=</span> cachedHoldCounter<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>rh <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> rh<span class="token punctuation">.</span>tid <span class="token operator">==</span> <span class="token function">getThreadId</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> rh<span class="token punctuation">.</span>count<span class="token punctuation">;</span>

        <span class="token keyword">int</span> count <span class="token operator">=</span> readHolds<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> readHolds<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> count<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
         * Reconstitutes the instance from a stream (that is, deserializes it).
         */</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">readObject</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>ObjectInputStream</span> s<span class="token punctuation">)</span>
        <span class="token keyword">throws</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>
        s<span class="token punctuation">.</span><span class="token function">defaultReadObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        readHolds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocalHoldCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// reset to unlocked state</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="locksupport\u5DE5\u5177" tabindex="-1"><a class="header-anchor" href="#locksupport\u5DE5\u5177" aria-hidden="true">#</a> LockSupport\u5DE5\u5177</h2><h2 id="condition\u63A5\u53E3" tabindex="-1"><a class="header-anchor" href="#condition\u63A5\u53E3" aria-hidden="true">#</a> Condition\u63A5\u53E3</h2>`,78);function f(h,g){const a=l("ExternalLinkIcon");return e(),p("div",null,[m,n("p",null,[n("a",b,[w,o(a)])]),y])}var A=t(v,[["render",f],["__file","java-concurrent-lock.html.vue"]]);export{A as default};
