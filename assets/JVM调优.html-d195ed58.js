import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as i,e as n}from"./app-e53dd85b.js";const d={},s=n(`<h1 id="jvm-调优" tabindex="-1"><a class="header-anchor" href="#jvm-调优" aria-hidden="true">#</a> JVM 调优</h1><h2 id="jvm参数总结" tabindex="-1"><a class="header-anchor" href="#jvm参数总结" aria-hidden="true">#</a> JVM参数总结</h2><h3 id="xmn" tabindex="-1"><a class="header-anchor" href="#xmn" aria-hidden="true">#</a> -Xmn</h3><p>设置年轻代堆的大小，单位为K、M、G，年轻代堆大小建议在总堆大小的25%~50%之间。如果太小，执行GC的频率会变高，如果太大，执行Full GC的时间会变长</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>-Xmn256m
-Xmn262144k
-Xmn268435456
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以使用 <code>-XX:NewSize</code> 设置初试大小 <code>-XX:MaxNewSize</code>设置最大大小。来代替-Xmn</p><h3 id="xms" tabindex="-1"><a class="header-anchor" href="#xms" aria-hidden="true">#</a> -Xms</h3><p>设置堆的初试大小，这个数值必须为1024的整数倍，且大于1M，单位为K、M、G</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>-Xms6291456
-Xms6144k
-Xms6m
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果没有设置，默认为年轻代和老年代大小之和。</p><p>堆的初始大小也可以使用<code>-XX:InitalHeapSize</code>参数设置</p><h3 id="xmx" tabindex="-1"><a class="header-anchor" href="#xmx" aria-hidden="true">#</a> -Xmx</h3><p>设置堆内存的最大值。该参数必须是1024的整数倍，并且大小超过2M，单位为K、M、G。-Xms和-Xmx通常为相同值</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>-Xmx83886080
-Xmx81920k
-Xmx80m
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="xss" tabindex="-1"><a class="header-anchor" href="#xss" aria-hidden="true">#</a> -Xss</h3><p>设置线程栈的大小，单位为K、M、G。</p><p>不同系统的默认值：</p><ul><li>Linux/x64 (64-bit): 1024 KB</li><li>macOS (64-bit): 1024 KB</li><li>Oracle Solaris/x64 (64-bit): 1024 KB</li><li>Windows: The default value depends on virtual memory</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>-Xss1m
-Xss1024k
-Xss1048576
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="xx-activeprocessorcount-x" tabindex="-1"><a class="header-anchor" href="#xx-activeprocessorcount-x" aria-hidden="true">#</a> -XX:ActiveProcessorCount=x</h3><p>覆盖VM用于计算其用于各种操作 (例如GC和ForkJoinPool) 的线程池大小的CPU数量</p><p>VM通常从操作系统确定可用处理器的数量。在docker容器中运行多个Java进程时, 此标志对于分区CPU资源很有用。即使未启用UseContainerSupport, 也会保留此标志。</p><p>有关启用和禁用容器支持的说明, 请参见 <em>-XX:-UseContainerSupport</em></p><h3 id="xx-compactstrings" tabindex="-1"><a class="header-anchor" href="#xx-compactstrings" aria-hidden="true">#</a> -XX:-CompactStrings</h3><p>禁用紧凑字符串功能，默认启用。</p>`,25),r=[s];function t(l,c){return a(),i("div",null,r)}const h=e(d,[["render",t],["__file","JVM调优.html.vue"]]);export{h as default};
