const l=JSON.parse('{"key":"v-45c37b14","path":"/java/java-jvm/JVM%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8.html","title":"虚拟机类加载机制","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"类的加载时机","slug":"类的加载时机","link":"#类的加载时机","children":[]},{"level":2,"title":"类的加载流程","slug":"类的加载流程","link":"#类的加载流程","children":[{"level":3,"title":"加载","slug":"加载","link":"#加载","children":[]},{"level":3,"title":"验证","slug":"验证","link":"#验证","children":[]},{"level":3,"title":"准备","slug":"准备","link":"#准备","children":[]},{"level":3,"title":"解析","slug":"解析","link":"#解析","children":[]},{"level":3,"title":"初始化","slug":"初始化","link":"#初始化","children":[]},{"level":3,"title":"使用","slug":"使用","link":"#使用","children":[]},{"level":3,"title":"卸载","slug":"卸载","link":"#卸载","children":[]}]},{"level":2,"title":"类加载器","slug":"类加载器","link":"#类加载器","children":[{"level":3,"title":"双亲委派模型","slug":"双亲委派模型","link":"#双亲委派模型","children":[]},{"level":3,"title":"破坏双亲委派模型","slug":"破坏双亲委派模型","link":"#破坏双亲委派模型","children":[]}]}],"git":{"createdTime":1652462343000,"updatedTime":1653110166000,"contributors":[{"name":"xuliang","email":"895252461@qq.com","commits":3}]},"readingTime":{"minutes":3.37,"words":1012},"filePathRelative":"java/java-jvm/JVM类加载器.md","localizedDate":"2022年5月14日","excerpt":"<h1> 虚拟机类加载机制</h1>\\n<h2> 类的加载时机</h2>\\n<p>略</p>\\n<h2> 类的加载流程</h2>\\n<h3> 加载</h3>\\n<p>在加载阶段，Java虚拟机需要完成以下三件事情：</p>\\n<ol>\\n<li>\\n<p>通过一个类的全限定名来获取定义此类的二进制字节流。</p>\\n</li>\\n<li>\\n<p>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。</p>\\n</li>\\n<li>\\n<p>在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口。</p>\\n</li>\\n</ol>\\n<p>通俗点讲，就是JVM把class文件的信息读取到了内存的方法区中。</p>"}');export{l as data};
