const a=JSON.parse('{"key":"v-e9bdf36e","path":"/spring/spring-framework/spring-starting/spring-bean-create.html","title":"Spring 单例Bean的创建","lang":"zh-CN","frontmatter":{},"headers":[],"git":{"createdTime":1697974777000,"updatedTime":1697974777000,"contributors":[{"name":"xuliang","email":"895252461@qq.com","commits":1}]},"readingTime":{"minutes":17.18,"words":5154},"filePathRelative":"spring/spring-framework/spring-starting/spring-bean-create.md","localizedDate":"2023年10月22日","excerpt":"<h1> Spring 单例Bean的创建</h1>\\n<p></p>\\n<p>接上文，本文依旧是分析 <code>finishBeanFactoryInitialization(beanFactory)</code>，本文将重点分析单例 bean 的创建流程。</p>\\n<p>在上一篇文章中，我们介绍了 <code>AbstractApplicationContext#finishBeanFactoryInitialization</code> 的执行过程，本文将深入细节，分析 spring bean 的创建过程。</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token operator\\">|</span><span class=\\"token operator\\">-</span><span class=\\"token class-name\\">AnnotationConfigApplicationContext</span>#<span class=\\"token class-name\\">AnnotationConfigApplicationContext</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">)</span>\\n <span class=\\"token operator\\">|</span><span class=\\"token operator\\">-</span><span class=\\"token class-name\\">AbstractApplicationContext</span>#refresh\\n  <span class=\\"token operator\\">|</span><span class=\\"token operator\\">-</span><span class=\\"token class-name\\">AbstractApplicationContext</span>#finishBeanFactoryInitialization\\n   <span class=\\"token operator\\">|</span><span class=\\"token operator\\">-</span><span class=\\"token class-name\\">DefaultListableBeanFactory</span>#preInstantiateSingletons\\n    <span class=\\"token operator\\">|</span><span class=\\"token operator\\">-</span><span class=\\"token class-name\\">AbstractBeanFactory</span>#<span class=\\"token function\\">getBean</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>lang<span class=\\"token punctuation\\">.</span></span>String</span><span class=\\"token punctuation\\">)</span>\\n     <span class=\\"token operator\\">|</span><span class=\\"token operator\\">-</span><span class=\\"token class-name\\">AbstractBeanFactory</span>#doGetBean\\n      <span class=\\"token operator\\">|</span><span class=\\"token operator\\">-</span><span class=\\"token class-name\\">AbstractAutowireCapableBeanFactory</span>#<span class=\\"token function\\">createBean</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">RootBeanDefinition</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Object</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}');export{a as data};
