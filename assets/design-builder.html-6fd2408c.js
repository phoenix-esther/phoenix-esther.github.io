const e=JSON.parse('{"key":"v-41ef5332","path":"/quality/design-mode/design-builder.html","title":"建造者模式","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"1、概述","slug":"_1、概述","link":"#_1、概述","children":[]},{"level":2,"title":"2、结构","slug":"_2、结构","link":"#_2、结构","children":[]},{"level":2,"title":"3、实例","slug":"_3、实例","link":"#_3、实例","children":[]},{"level":2,"title":"4、优缺点","slug":"_4、优缺点","link":"#_4、优缺点","children":[]},{"level":2,"title":"5、使用场景","slug":"_5、使用场景","link":"#_5、使用场景","children":[]},{"level":2,"title":"6、模式扩展","slug":"_6、模式扩展","link":"#_6、模式扩展","children":[]}],"git":{"createdTime":1673767263000,"updatedTime":1673767263000,"contributors":[{"name":"xuliang","email":"895252461@qq.com","commits":1}]},"readingTime":{"minutes":6.53,"words":1960},"filePathRelative":"quality/design-mode/design-builder.md","localizedDate":"2023年1月15日","excerpt":"<h1> 建造者模式</h1>\\n<h2> 1、概述</h2>\\n<p>将一个复杂对象的构建与表示分离，使得同样的构建过程可以创建不同的表示。</p>\\n\\n<ul>\\n<li>分离了部件的构造(由Builder来负责)和装配(由Director负责)。 从而可以构造出复杂的对象。这个模式适用于：某个对象的构建过程复杂的情况。</li>\\n<li>由于实现了构建和装配的解耦。不同的构建器，相同的装配，也可以做出不同的对象；相同的构建器，不同的装配顺序也可以做出不同的对象。也就是实现了构建算法、装配算法的解耦，实现了更好的复用。</li>\\n<li>建造者模式可以将部件和其组装过程分开，一步一步创建一个复杂的对象。用户只需要指定复杂对象的类型就可以得到该对象，而无须知道其内部的具体构造细节。</li>\\n</ul>"}');export{e as data};
