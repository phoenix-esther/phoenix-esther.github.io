import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{r as n,o as r,c as h,a as e,b as c,d as o,e as t}from"./app-9aa256ea.js";const i="/assets/CPUCache提纲-ba749712.png",p="/assets/查看CPU高速缓存大小-9ca59c3a.png",d="/assets/CPU-Cache-d0d1ad7d.png",_="/assets/访问速度表格-130e0aa5.png",P="/assets/Cache的数据结构-fdb49a94.png",C="/assets/查看CPULine大小-c71de2c2.png",U="/assets/缓存逻辑-ae222631.png",l="/assets/求模映射策略-3953f72c.png",g="/assets/直接Cache映射-38c94a37.png",m="/assets/遍历数组-d3b3ff69.png",E="/assets/数组内存布局顺序-17f3e1e1.png",u="/assets/形式二访问顺序-6fb03d1a.png",L="/assets/随机数数组-886ea586.png",f="/assets/排序and数组遍历-b6acbed6.png",B="/assets/likely-cff33b47.png",A="/assets/sched_setaffinity-34ce1ac1.png",y={},k=e("h1",{id:"如何写出让-cpu-跑得更快的代码",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#如何写出让-cpu-跑得更快的代码","aria-hidden":"true"},"#"),c(" 如何写出让 CPU 跑得更快的代码？")],-1),x=e("p",null,"代码都是由 CPU 跑起来的，我们代码写的好与坏就决定了 CPU 的执行效率，特别是在编写计算密集型的程序，更要注重 CPU 的执行效率，否则将会大大影响系统性能。",-1),b=e("p",null,"CPU 内部嵌入了 CPU Cache（高速缓存），它的存储容量很小，但是离 CPU 核心很近，所以缓存的读写速度是极快的，那么如果 CPU 运算时，直接从 CPU Cache 读取数据，而不是从内存的话，运算速度就会很快。",-1),D=e("p",null,"但是，大多数人不知道 CPU Cache 的运行机制，以至于不知道如何才能够写出能够配合 CPU Cache 工作机制的代码，一旦你掌握了它，你写代码的时候，就有新的优化思路了。",-1),w=e("p",null,"那么，接下来我们就来看看，CPU Cache 到底是什么样的，是如何工作的呢，又该如何写出让 CPU 执行更快的代码呢？",-1),F=e("p",null,[e("img",{src:i,alt:"img"})],-1),j=e("hr",null,null,-1),M={id:"cpu-cache-有多快",tabindex:"-1"},N=e("a",{class:"header-anchor",href:"#cpu-cache-有多快","aria-hidden":"true"},"#",-1),v={href:"https://xiaolincoding.com/os/1_hardware/how_to_make_cpu_run_faster.html#cpu-cache-%E6%9C%89%E5%A4%9A%E5%BF%AB",target:"_blank",rel:"noopener noreferrer"},V=t('<p>你可能会好奇为什么有了内存，还需要 CPU Cache？根据摩尔定律，CPU 的访问速度每 18 个月就会翻倍，相当于每年增长 60% 左右，内存的速度当然也会不断增长，但是增长的速度远小于 CPU，平均每年只增长 7% 左右。于是，CPU 与内存的访问性能的差距不断拉大。</p><p>到现在，一次内存访问所需时间是 <code>200~300</code> 多个时钟周期，这意味着 CPU 和内存的访问速度已经相差 <code>200~300</code> 多倍了。</p><p>为了弥补 CPU 与内存两者之间的性能差异，就在 CPU 内部引入了 CPU Cache，也称高速缓存。</p><p>CPU Cache 通常分为大小不等的三级缓存，分别是 <strong>L1 Cache、L2 Cache 和 L3 Cache</strong>。</p><p>由于 CPU Cache 所使用的材料是 SRAM，价格比内存使用的 DRAM 高出很多，在当今每生产 1 MB 大小的 CPU Cache 需要 7 美金的成本，而内存只需要 0.015 美金的成本，成本方面相差了 466 倍，所以 CPU Cache 不像内存那样动辄以 GB 计算，它的大小是以 KB 或 MB 来计算的。</p><p>在 Linux 系统中，我们可以使用下图的方式来查看各级 CPU Cache 的大小，比如我这手上这台服务器，离 CPU 核心最近的 L1 Cache 是 32KB，其次是 L2 Cache 是 256KB，最大的 L3 Cache 则是 3MB。</p><p><img src="'+p+'" alt="img"></p><p>其中，<strong>L1 Cache 通常会分为「数据缓存」和「指令缓存」</strong>，这意味着数据和指令在 L1 Cache 这一层是分开缓存的，上图中的 <code>index0</code> 也就是数据缓存，而 <code>index1</code> 则是指令缓存，它两的大小通常是一样的。</p><p>另外，你也会注意到，L3 Cache 比 L1 Cache 和 L2 Cache 大很多，这是因为 <strong>L1 Cache 和 L2 Cache 都是每个 CPU 核心独有的，而 L3 Cache 是多个 CPU 核心共享的。</strong></p><p>程序执行时，会先将内存中的数据加载到共享的 L3 Cache 中，再加载到每个核心独有的 L2 Cache，最后进入到最快的 L1 Cache，之后才会被 CPU 读取。它们之间的层级关系，如下图：</p><p><img src="'+d+'" alt="img"></p><p>越靠近 CPU 核心的缓存其访问速度越快，CPU 访问 L1 Cache 只需要 <code>2~4</code> 个时钟周期，访问 L2 Cache 大约 <code>10~20</code> 个时钟周期，访问 L3 Cache 大约 <code>20~60</code> 个时钟周期，而访问内存速度大概在 <code>200~300</code> 个 时钟周期之间。如下表格：</p><p><img src="'+_+'" alt="img"></p><p><strong>所以，CPU 从 L1 Cache 读取数据的速度，相比从内存读取的速度，会快 <code>100</code> 多倍。</strong></p><hr>',15),K={id:"cpu-cache-的数据结构和读取过程是什么样的",tabindex:"-1"},R=e("a",{class:"header-anchor",href:"#cpu-cache-的数据结构和读取过程是什么样的","aria-hidden":"true"},"#",-1),S={href:"https://xiaolincoding.com/os/1_hardware/how_to_make_cpu_run_faster.html#cpu-cache-%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E8%AF%BB%E5%8F%96%E8%BF%87%E7%A8%8B%E6%98%AF%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84",target:"_blank",rel:"noopener noreferrer"},T=t('<p>我们先简单了解下 CPU Cache 的结构，CPU Cache 是由很多个 Cache Line 组成的，Cache Line 是 CPU 从内存读取数据的基本单位，而 Cache Line 是由各种标志（Tag）+ 数据块（Data Block）组成，你可以在下图清晰的看到：</p><p><img src="'+P+'" alt="img"></p><p>CPU Cache 的数据是从内存中读取过来的，它是以一小块一小块读取数据的，而不是按照单个数组元素来读取数据的，在 CPU Cache 中的，这样一小块一小块的数据，称为 <strong>Cache Line（缓存块）</strong>。</p><p>你可以在你的 Linux 系统，用下面这种方式来查看 CPU 的 Cache Line，你可以看我服务器的 L1 Cache Line 大小是 64 字节，也就意味着 <strong>L1 Cache 一次载入数据的大小是 64 字节</strong>。</p><p><img src="'+C+'" alt="img"></p><p>比如，有一个 <code>int array[100]</code> 的数组，当载入 <code>array[0]</code> 时，由于这个数组元素的大小在内存只占 4 字节，不足 64 字节，CPU 就会<strong>顺序加载</strong>数组元素到 <code>array[15]</code>，意味着 <code>array[0]~array[15]</code> 数组元素都会被缓存在 CPU Cache 中了，因此当下次访问这些数组元素时，会直接从 CPU Cache 读取，而不用再从内存中读取，大大提高了 CPU 读取数据的性能。</p><p>事实上，CPU 读取数据的时候，无论数据是否存放到 Cache 中，CPU 都是先访问 Cache，只有当 Cache 中找不到数据时，才会去访问内存，并把内存中的数据读入到 Cache 中，CPU 再从 CPU Cache 读取数据。</p><p><img src="'+U+'" alt="img"></p><p>这样的访问机制，跟我们使用「内存作为硬盘的缓存」的逻辑是一样的，如果内存有缓存的数据，则直接返回，否则要访问龟速一般的硬盘。</p><p>那 CPU 怎么知道要访问的内存数据，是否在 Cache 里？如果在的话，如何找到 Cache 对应的数据呢？我们从最简单、基础的<strong>直接映射 Cache（*Direct Mapped Cache*）</strong> 说起，来看看整个 CPU Cache 的数据结构和访问逻辑。</p><p>前面，我们提到 CPU 访问内存数据时，是一小块一小块数据读取的，具体这一小块数据的大小，取决于 <code>coherency_line_size</code> 的值，一般 64 字节。在内存中，这一块的数据我们称为<strong>内存块（*Block*）</strong>，读取的时候我们要拿到数据所在内存块的地址。</p><p>对于直接映射 Cache 采用的策略，就是把内存块的地址始终「映射」在一个 CPU Cache Line（缓存块） 的地址，至于映射关系实现方式，则是使用「取模运算」，取模运算的结果就是内存块地址对应的 CPU Cache Line（缓存块） 的地址。</p><p>举个例子，内存共被划分为 32 个内存块，CPU Cache 共有 8 个 CPU Cache Line，假设 CPU 想要访问第 15 号内存块，如果 15 号内存块中的数据已经缓存在 CPU Cache Line 中的话，则是一定映射在 7 号 CPU Cache Line 中，因为 <code>15 % 8</code> 的值是 7。</p><p>机智的你肯定发现了，使用取模方式映射的话，就会出现多个内存块对应同一个 CPU Cache Line，比如上面的例子，除了 15 号内存块是映射在 7 号 CPU Cache Line 中，还有 7 号、23 号、31 号内存块都是映射到 7 号 CPU Cache Line 中。</p><p><img src="'+l+'" alt="img"></p><p>因此，为了区别不同的内存块，在对应的 CPU Cache Line 中我们还会存储一个<strong>组标记（Tag）</strong>。这个组标记会记录当前 CPU Cache Line 中存储的数据对应的内存块，我们可以用这个组标记来区分不同的内存块。</p><p>除了组标记信息外，CPU Cache Line 还有两个信息：</p><ul><li>一个是，从内存加载过来的实际存放<strong>数据（*Data*）</strong>。</li><li>另一个是，<strong>有效位（*Valid bit*）</strong>，它是用来标记对应的 CPU Cache Line 中的数据是否是有效的，如果有效位是 0，无论 CPU Cache Line 中是否有数据，CPU 都会直接访问内存，重新加载数据。</li></ul><p>CPU 在从 CPU Cache 读取数据的时候，并不是读取 CPU Cache Line 中的整个数据块，而是读取 CPU 所需要的一个数据片段，这样的数据统称为一个<strong>字（*Word*）</strong>。那怎么在对应的 CPU Cache Line 中数据块中找到所需的字呢？答案是，需要一个<strong>偏移量（Offset）</strong>。</p><p>因此，一个内存的访问地址，包括<strong>组标记、CPU Cache Line 索引、偏移量</strong>这三种信息，于是 CPU 就能通过这些信息，在 CPU Cache 中找到缓存的数据。而对于 CPU Cache 里的数据结构，则是由<strong>索引 + 有效位 + 组标记 + 数据块</strong>组成。</p><p><img src="'+g+'" alt="img"></p><p>如果内存中的数据已经在 CPU Cache 中了，那 CPU 访问一个内存地址的时候，会经历这 4 个步骤：</p><ol><li>根据内存地址中索引信息，计算在 CPU Cache 中的索引，也就是找出对应的 CPU Cache Line 的地址；</li><li>找到对应 CPU Cache Line 后，判断 CPU Cache Line 中的有效位，确认 CPU Cache Line 中数据是否是有效的，如果是无效的，CPU 就会直接访问内存，并重新加载数据，如果数据有效，则往下执行；</li><li>对比内存地址中组标记和 CPU Cache Line 中的组标记，确认 CPU Cache Line 中的数据是我们要访问的内存数据，如果不是的话，CPU 就会直接访问内存，并重新加载数据，如果是的话，则往下执行；</li><li>根据内存地址中偏移量信息，从 CPU Cache Line 的数据块中，读取对应的字。</li></ol><p>到这里，相信你对直接映射 Cache 有了一定认识，但其实除了直接映射 Cache 之外，还有其他通过内存地址找到 CPU Cache 中的数据的策略，比如全相连 Cache （<em>Fully Associative Cache</em>）、组相连 Cache （<em>Set Associative Cache</em>）等，这几种策策略的数据结构都比较相似，我们理解了直接映射 Cache 的工作方式，其他的策略如果你有兴趣去看，相信很快就能理解的了。</p><hr>',25),z={id:"如何写出让-cpu-跑得更快的代码-1",tabindex:"-1"},G=e("a",{class:"header-anchor",href:"#如何写出让-cpu-跑得更快的代码-1","aria-hidden":"true"},"#",-1),I={href:"https://xiaolincoding.com/os/1_hardware/how_to_make_cpu_run_faster.html#%E5%A6%82%E4%BD%95%E5%86%99%E5%87%BA%E8%AE%A9-cpu-%E8%B7%91%E5%BE%97%E6%9B%B4%E5%BF%AB%E7%9A%84%E4%BB%A3%E7%A0%81",target:"_blank",rel:"noopener noreferrer"},O=t("<p>我们知道 CPU 访问内存的速度，比访问 CPU Cache 的速度慢了 100 多倍，所以如果 CPU 所要操作的数据在 CPU Cache 中的话，这样将会带来很大的性能提升。访问的数据在 CPU Cache 中的话，意味着<strong>缓存命中</strong>，缓存命中率越高的话，代码的性能就会越好，CPU 也就跑的越快。</p><p>于是，「如何写出让 CPU 跑得更快的代码？」这个问题，可以改成「如何写出 CPU 缓存命中率高的代码？」。</p><p>在前面我也提到， L1 Cache 通常分为「数据缓存」和「指令缓存」，这是因为 CPU 会分别处理数据和指令，比如 <code>1+1=2</code> 这个运算，<code>+</code> 就是指令，会被放在「指令缓存」中，而输入数字 <code>1</code> 则会被放在「数据缓存」里。</p><p>因此，<strong>我们要分开来看「数据缓存」和「指令缓存」的缓存命中率</strong>。</p>",4),W={id:"如何提升数据缓存的命中率",tabindex:"-1"},q=e("a",{class:"header-anchor",href:"#如何提升数据缓存的命中率","aria-hidden":"true"},"#",-1),H={href:"https://xiaolincoding.com/os/1_hardware/how_to_make_cpu_run_faster.html#%E5%A6%82%E4%BD%95%E6%8F%90%E5%8D%87%E6%95%B0%E6%8D%AE%E7%BC%93%E5%AD%98%E7%9A%84%E5%91%BD%E4%B8%AD%E7%8E%87",target:"_blank",rel:"noopener noreferrer"},J=t('<p>假设要遍历二维数组，有以下两种形式，虽然代码执行结果是一样，但你觉得哪种形式效率最高呢？为什么高呢？</p><p><img src="'+m+'" alt="img"></p><p>经过测试，形式一 <code>array[i][j]</code> 执行时间比形式二 <code>array[j][i]</code> 快好几倍。</p><p>之所以有这么大的差距，是因为二维数组 <code>array</code> 所占用的内存是连续的，比如长度 <code>N</code> 的值是 <code>2</code> 的话，那么内存中的数组元素的布局顺序是这样的：</p><p><img src="'+E+'" alt="img"></p><p>形式一用 <code>array[i][j]</code> 访问数组元素的顺序，正是和内存中数组元素存放的顺序一致。当 CPU 访问 <code>array[0][0]</code> 时，由于该数据不在 Cache 中，于是会「顺序」把跟随其后的 3 个元素从内存中加载到 CPU Cache，这样当 CPU 访问后面的 3 个数组元素时，就能在 CPU Cache 中成功地找到数据，这意味着缓存命中率很高，缓存命中的数据不需要访问内存，这便大大提高了代码的性能。</p><p>而如果用形式二的 <code>array[j][i]</code> 来访问，则访问的顺序就是：</p><p><img src="'+u+'" alt="img"></p><p>你可以看到，访问的方式跳跃式的，而不是顺序的，那么如果 N 的数值很大，那么操作 <code>array[j][i]</code> 时，是没办法把 <code>array[j+1][i]</code> 也读入到 CPU Cache 中的，既然 <code>array[j+1][i]</code> 没有读取到 CPU Cache，那么就需要从内存读取该数据元素了。很明显，这种不连续性、跳跃式访问数据元素的方式，可能不能充分利用到了 CPU Cache 的特性，从而代码的性能不高。</p><p>那访问 <code>array[0][0]</code> 元素时，CPU 具体会一次从内存中加载多少元素到 CPU Cache 呢？这个问题，在前面我们也提到过，这跟 CPU Cache Line 有关，它表示 <strong>CPU Cache 一次性能加载数据的大小</strong>，可以在 Linux 里通过 <code>coherency_line_size</code> 配置查看 它的大小，通常是 64 个字节。</p><p><img src="'+C+'" alt="img"></p><p>也就是说，当 CPU 访问内存数据时，如果数据不在 CPU Cache 中，则会一次性会连续加载 64 字节大小的数据到 CPU Cache，那么当访问 <code>array[0][0]</code> 时，由于该元素不足 64 字节，于是就会往后<strong>顺序</strong>读取 <code>array[0][0]~array[0][15]</code> 到 CPU Cache 中。顺序访问的 <code>array[i][j]</code> 因为利用了这一特点，所以就会比跳跃式访问的 <code>array[j][i]</code> 要快。</p><p><strong>因此，遇到这种遍历数组的情况时，按照内存布局顺序访问，将可以有效的利用 CPU Cache 带来的好处，这样我们代码的性能就会得到很大的提升，</strong></p>',13),Q={id:"如何提升指令缓存的命中率",tabindex:"-1"},X=e("a",{class:"header-anchor",href:"#如何提升指令缓存的命中率","aria-hidden":"true"},"#",-1),Y={href:"https://xiaolincoding.com/os/1_hardware/how_to_make_cpu_run_faster.html#%E5%A6%82%E4%BD%95%E6%8F%90%E5%8D%87%E6%8C%87%E4%BB%A4%E7%BC%93%E5%AD%98%E7%9A%84%E5%91%BD%E4%B8%AD%E7%8E%87",target:"_blank",rel:"noopener noreferrer"},Z=t('<p>提升数据的缓存命中率的方式，是按照内存布局顺序访问，那针对指令的缓存该如何提升呢？</p><p>我们以一个例子来看看，有一个元素为 0 到 100 之间随机数字组成的一维数组：</p><p><img src="'+L+'" alt="img"></p><p>接下来，对这个数组做两个操作：</p><p><img src="'+f+'" alt="img"></p><ul><li>第一个操作，循环遍历数组，把小于 50 的数组元素置为 0；</li><li>第二个操作，将数组排序；</li></ul><p>那么问题来了，你觉得先遍历再排序速度快，还是先排序再遍历速度快呢？</p><p>在回答这个问题之前，我们先了解 CPU 的<strong>分支预测器</strong>。对于 if 条件语句，意味着此时至少可以选择跳转到两段不同的指令执行，也就是 if 还是 else 中的指令。那么，<strong>如果分支预测可以预测到接下来要执行 if 里的指令，还是 else 指令的话，就可以「提前」把这些指令放在指令缓存中，这样 CPU 可以直接从 Cache 读取到指令，于是执行速度就会很快</strong>。</p><p>当数组中的元素是随机的，分支预测就无法有效工作，而当数组元素都是是顺序的，分支预测器会动态地根据历史命中数据对未来进行预测，这样命中率就会很高。</p><p>因此，先排序再遍历速度会更快，这是因为排序之后，数字是从小到大的，那么前几次循环命中 <code>if &lt; 50</code> 的次数会比较多，于是分支预测就会缓存 <code>if</code> 里的 <code>array[i] = 0</code> 指令到 Cache 中，后续 CPU 执行该指令就只需要从 Cache 读取就好了。</p><p>如果你肯定代码中的 <code>if</code> 中的表达式判断为 <code>true</code> 的概率比较高，我们可以使用显示分支预测工具，比如在 C/C++ 语言中编译器提供了 <code>likely</code> 和 <code>unlikely</code> 这两种宏，如果 <code>if</code> 条件为 <code>ture</code> 的概率大，则可以用 <code>likely</code> 宏把 <code>if</code> 里的表达式包裹起来，反之用 <code>unlikely</code> 宏。</p><p><img src="'+B+'" alt="img"></p><p>实际上，CPU 自身的动态分支预测已经是比较准的了，所以只有当非常确信 CPU 预测的不准，且能够知道实际的概率情况时，才建议使用这两种宏。</p>',13),$={id:"如何提升多核-cpu-的缓存命中率",tabindex:"-1"},ee=e("a",{class:"header-anchor",href:"#如何提升多核-cpu-的缓存命中率","aria-hidden":"true"},"#",-1),ce={href:"https://xiaolincoding.com/os/1_hardware/how_to_make_cpu_run_faster.html#%E5%A6%82%E4%BD%95%E6%8F%90%E5%8D%87%E5%A4%9A%E6%A0%B8-cpu-%E7%9A%84%E7%BC%93%E5%AD%98%E5%91%BD%E4%B8%AD%E7%8E%87",target:"_blank",rel:"noopener noreferrer"},ae=t('<p>在单核 CPU，虽然只能执行一个线程，但是操作系统给每个线程分配了一个时间片，时间片用完了，就调度下一个线程，于是各个线程就按时间片交替地占用 CPU，从宏观上看起来各个线程同时在执行。</p><p>而现代 CPU 都是多核心的，线程可能在不同 CPU 核心来回切换执行，这对 CPU Cache 不是有利的，虽然 L3 Cache 是多核心之间共享的，但是 L1 和 L2 Cache 都是每个核心独有的，<strong>如果一个线程在不同核心来回切换，各个核心的缓存命中率就会受到影响</strong>，相反如果线程都在同一个核心上执行，那么其数据的 L1 和 L2 Cache 的缓存命中率可以得到有效提高，缓存命中率高就意味着 CPU 可以减少访问 内存的频率。</p><p>当有多个同时执行「计算密集型」的线程，为了防止因为切换到不同的核心，而导致缓存命中率下降的问题，我们可以把<strong>线程绑定在某一个 CPU 核心上</strong>，这样性能可以得到非常可观的提升。</p><p>在 Linux 上提供了 <code>sched_setaffinity</code> 方法，来实现将线程绑定到某个 CPU 核心这一功能。</p><p><img src="'+A+'" alt="img"></p><hr>',6),oe={id:"总结",tabindex:"-1"},te=e("a",{class:"header-anchor",href:"#总结","aria-hidden":"true"},"#",-1),Ce={href:"https://xiaolincoding.com/os/1_hardware/how_to_make_cpu_run_faster.html#%E6%80%BB%E7%BB%93",target:"_blank",rel:"noopener noreferrer"},se=e("p",null,"由于随着计算机技术的发展，CPU 与 内存的访问速度相差越来越多，如今差距已经高达好几百倍了，所以 CPU 内部嵌入了 CPU Cache 组件，作为内存与 CPU 之间的缓存层，CPU Cache 由于离 CPU 核心很近，所以访问速度也是非常快的，但由于所需材料成本比较高，它不像内存动辄几个 GB 大小，而是仅有几十 KB 到 MB 大小。",-1),ne=e("p",null,"当 CPU 访问数据的时候，先是访问 CPU Cache，如果缓存命中的话，则直接返回数据，就不用每次都从内存读取数据了。因此，缓存命中率越高，代码的性能越好。",-1),re=e("p",null,"但需要注意的是，当 CPU 访问数据时，如果 CPU Cache 没有缓存该数据，则会从内存读取数据，但是并不是只读一个数据，而是一次性读取一块一块的数据存放到 CPU Cache 中，之后才会被 CPU 读取。",-1),he=e("p",null,"内存地址映射到 CPU Cache 地址里的策略有很多种，其中比较简单是直接映射 Cache，它巧妙的把内存地址拆分成「索引 + 组标记 + 偏移量」的方式，使得我们可以将很大的内存地址，映射到很小的 CPU Cache 地址里。",-1),ie=e("p",null,"要想写出让 CPU 跑得更快的代码，就需要写出缓存命中率高的代码，CPU L1 Cache 分为数据缓存和指令缓存，因而需要分别提高它们的缓存命中率：",-1),pe=e("ul",null,[e("li",null,"对于数据缓存，我们在遍历数据的时候，应该按照内存布局的顺序操作，这是因为 CPU Cache 是根据 CPU Cache Line 批量操作数据的，所以顺序地操作连续内存数据时，性能能得到有效的提升；"),e("li",null,"对于指令缓存，有规律的条件分支语句能够让 CPU 的分支预测器发挥作用，进一步提高执行的效率；")],-1),de=e("p",null,"另外，对于多核 CPU 系统，线程可能在不同 CPU 核心来回切换，这样各个核心的缓存命中率就会受到影响，于是要想提高线程的缓存命中率，可以考虑把线程绑定 CPU 到某一个 CPU 核心。",-1);function _e(Pe,Ue){const a=n("ExternalLinkIcon");return r(),h("div",null,[k,x,b,D,w,F,j,e("h2",M,[N,c(),e("a",v,[c("#"),o(a)]),c("CPU Cache 有多快？")]),V,e("h2",K,[R,c(),e("a",S,[c("#"),o(a)]),c("CPU Cache 的数据结构和读取过程是什么样的？")]),T,e("h2",z,[G,c(),e("a",I,[c("#"),o(a)]),c("如何写出让 CPU 跑得更快的代码？")]),O,e("h3",W,[q,c(),e("a",H,[c("#"),o(a)]),c("如何提升数据缓存的命中率？")]),J,e("h3",Q,[X,c(),e("a",Y,[c("#"),o(a)]),c("如何提升指令缓存的命中率？")]),Z,e("h3",$,[ee,c(),e("a",ce,[c("#"),o(a)]),c("如何提升多核 CPU 的缓存命中率？")]),ae,e("h2",oe,[te,c(),e("a",Ce,[c("#"),o(a)]),c("总结")]),se,ne,re,he,ie,pe,de])}const me=s(y,[["render",_e],["__file","3.how-make-cpu-run-faster.html.vue"]]);export{me as default};
