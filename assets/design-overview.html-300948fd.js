import{_ as t,V as r,W as e,X as a}from"./framework-4ec38622.js";const n={},d=a('<h1 id="设计模式" tabindex="-1"><a class="header-anchor" href="#设计模式" aria-hidden="true">#</a> 设计模式</h1><p>设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</p><h2 id="设计模式的六大原则" tabindex="-1"><a class="header-anchor" href="#设计模式的六大原则" aria-hidden="true">#</a> 设计模式的六大原则</h2><p>略</p><h2 id="设计模式分类" tabindex="-1"><a class="header-anchor" href="#设计模式分类" aria-hidden="true">#</a> 设计模式分类</h2><p>设计模式总共有 23 种设计模式。这些模式可以分为三大类：创建型模式（Creational Patterns）、结构型模式（Structural Patterns）、行为型模式（Behavioral Patterns）。</p><table><thead><tr><th>序号</th><th>模式&amp;描述</th><th>包括</th></tr></thead><tbody><tr><td>1</td><td><strong>创建型模式</strong><br>这些设计模式提供了一种在创建对象的同时<br>隐藏创建逻辑的方式，而不是使用 new 运算<br>符直接实例化对象。这使得程序在判断针对<br>某个给定实例需要创建哪些对象时更加灵活。</td><td>工厂模式（Factory Pattern） <br>抽象工厂模式（Abstract Factory Pattern） <br>单例模式（Singleton Pattern） <br>建造者模式（Builder Pattern） <br>原型模式（Prototype Pattern）</td></tr><tr><td>2</td><td><strong>结构型模式</strong><br>这些设计模式关注类和对象的组合。继承的<br>概念被用来组合接口和定义组合对象获得新<br>功能的方式。</td><td>适配器模式（Adapter Pattern） <br>桥接模式（Bridge Pattern） <br>过滤器模式（Filter、Criteria Pattern） <br>组合模式（Composite Pattern） <br>装饰器模式（Decorator Pattern） <br>外观模式（Facade Pattern） <br>享元模式（Flyweight Pattern） <br>代理模式（Proxy Pattern）</td></tr><tr><td>3</td><td><strong>行为型模式</strong><br>这些设计模式特别关注对象之间的通信。</td><td>责任链模式（Chain of Responsibility Pattern）<br>命令模式（Command Pattern） <br>解释器模式（Interpreter Pattern） <br>迭代器模式（Iterator Pattern） <br>中介者模式（Mediator Pattern）<br>备忘录模式（Memento Pattern） <br>观察者模式（Observer Pattern） <br>状态模式（State Pattern） <br>空对象模式（Null Object Pattern） <br>策略模式（Strategy Pattern） <br>模板模式（Template Pattern） <br>访问者模式（Visitor Pattern）</td></tr></tbody></table>',7),o=[d];function i(b,s){return r(),e("div",null,o)}const P=t(n,[["render",i],["__file","design-overview.html.vue"]]);export{P as default};
