import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o,c as p,a as s,b as n,d as i,e as a}from"./app-e53dd85b.js";const l="/assets/up-9992ce29130579e6f8ad9306fd111808d4b-da228433.png",u={},r=a('<h1 id="spring-启动完成处理" tabindex="-1"><a class="header-anchor" href="#spring-启动完成处理" aria-hidden="true">#</a> Spring 启动完成处理</h1><p><img src="'+l+`" alt="img"></p><p>接上文，继续分析 spring 的启动流程。</p><h3 id="_12-完成启动操作-finishrefresh" tabindex="-1"><a class="header-anchor" href="#_12-完成启动操作-finishrefresh" aria-hidden="true">#</a> 12. 完成启动操作: <code>finishRefresh()</code></h3><p><code>AbstractApplicationContext#finishRefresh</code> 方法如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finishRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 看名字就知道了，清理初始化过程中一系列操作使用到的资源缓存</span>
    <span class="token function">clearResourceCaches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 初始化LifecycleProcessor</span>
    <span class="token function">initLifecycleProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 这个方法的内部实现是启动所有实现了Lifecycle接口的bean</span>
    <span class="token function">getLifecycleProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 发布ContextRefreshedEvent事件</span>
    <span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ContextRefreshedEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 检查spring.liveBeansView.mbeanDomain是否存在，有就会创建一个MBeanServer</span>
    <span class="token class-name">LiveBeansView</span><span class="token punctuation">.</span><span class="token function">registerApplicationContext</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个方法代码不多，就几个方法，我们分别来看看。</p><h4 id="_1-清理资源缓存-clearresourcecaches" tabindex="-1"><a class="header-anchor" href="#_1-清理资源缓存-clearresourcecaches" aria-hidden="true">#</a> 1. 清理资源缓存：<code>clearResourceCaches()</code></h4><p><code>clearResourceCaches()</code> 方法内容如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultResourceLoader</span> <span class="token keyword">implements</span> <span class="token class-name">ResourceLoader</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">Resource</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> resourceCaches
        <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clearResourceCaches</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>resourceCaches<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 省略了这个类的好多代码</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个方法就是用来清理 <code>resourceCaches</code> 的，这是个 <code>Map</code>，里面存入的内容是 <code>Resource</code>。</p><p>那什么是 <code>Resource</code> 呢？在前面介绍扫描包的过程中，我们会先把 class 文件读取出来，转换成 <code>Resource</code> 后再进一步处理，常见的 <code>Resource</code> 类型有 <code>FileSystemResource</code>、<code>UrlResource</code> 等，<code>resourceCaches</code> 就是存放这些 <code>Resource</code> 的。</p><h4 id="_2-处理-lifecycleprocessor" tabindex="-1"><a class="header-anchor" href="#_2-处理-lifecycleprocessor" aria-hidden="true">#</a> 2. 处理 <code>LifecycleProcessor</code></h4><p>我们先来看看什么是 <code>LifecycleProcessor</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 处理容器的启动与关闭操作
 */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">LifecycleProcessor</span> <span class="token keyword">extends</span> <span class="token class-name">Lifecycle</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 容器启动完成时调用
     */</span>
    <span class="token keyword">void</span> <span class="token function">onRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 容器关闭时调用
     */</span>
    <span class="token keyword">void</span> <span class="token function">onClose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个接口用来处理容器处理容器的启动与关闭操作，比如我们自己实现该接口，然后重写 <code>onRefresh()</code> 与 <code>onClose()</code>，以便在容器启动与关闭时做一些操作，像这样：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyLifecycleProcessor</span> <span class="token keyword">implements</span> <span class="token class-name">LifecycleProcessor</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;容器启动&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClose</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;容器关闭&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与 <code>LifecycleProcessor</code> 相关的方法有两个：<code>initLifecycleProcessor()</code>、<code>getLifecycleProcessor()</code>，我们一起一为看看这两个方法：</p><blockquote><p>AbstractApplicationContext</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">LifecycleProcessor</span> lifecycleProcessor<span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 初始化 LifecycleProcessor
 */</span>
<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initLifecycleProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory <span class="token operator">=</span> <span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 存在，直接使用</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">containsLocalBean</span><span class="token punctuation">(</span><span class="token constant">LIFECYCLE_PROCESSOR_BEAN_NAME</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>lifecycleProcessor <span class="token operator">=</span>
                beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token constant">LIFECYCLE_PROCESSOR_BEAN_NAME</span><span class="token punctuation">,</span> <span class="token class-name">LifecycleProcessor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 不存在则创建，默认使用DefaultLifecycleProcessor</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token class-name">DefaultLifecycleProcessor</span> defaultProcessor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultLifecycleProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        defaultProcessor<span class="token punctuation">.</span><span class="token function">setBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>lifecycleProcessor <span class="token operator">=</span> defaultProcessor<span class="token punctuation">;</span>
        beanFactory<span class="token punctuation">.</span><span class="token function">registerSingleton</span><span class="token punctuation">(</span><span class="token constant">LIFECYCLE_PROCESSOR_BEAN_NAME</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lifecycleProcessor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 返回 lifecycleProcessor
 */</span>
<span class="token class-name">LifecycleProcessor</span> <span class="token function">getLifecycleProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IllegalStateException</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>lifecycleProcessor <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lifecycleProcessor<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>initLifecycleProcessor</code> 所做的就是设置 <code>AbstractApplicationContext#lifecycleProcessor</code> 属性，如果 <code>beanFactory</code> 中存在 <code>initLifecycleProcessor</code> 则直接使用，否则就创建一个。</p><p><code>getLifecycleProcessor()</code> 仅仅只是返回了 <code>AbstractApplicationContext#lifecycleProcessor</code> 属性。</p><p>在 <code>getLifecycleProcessor().onRefresh()</code> 中，还调用了 <code>onRefresh()</code> 方法，我们一起来看看 <code>DefaultLifecycleProcessor#onRefresh</code> 做了什么：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">startBeans</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>running <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从变量来看，这个方法仅仅只是改了一个运行状态。</p><h4 id="_3-发布-contextrefreshedevent-事件" tabindex="-1"><a class="header-anchor" href="#_3-发布-contextrefreshedevent-事件" aria-hidden="true">#</a> 3. 发布 <code>ContextRefreshedEvent</code> 事件</h4>`,26),d=s("code",null,"publishEvent(new ContextRefreshedEvent(this))",-1),k=s("code",null,"ContextRefreshedEvent",-1),v={href:"https://my.oschina.net/funcy/blog/4713339",target:"_blank",rel:"noopener noreferrer"},m=a(`<h3 id="_13-清除缓存-resetcommoncaches" tabindex="-1"><a class="header-anchor" href="#_13-清除缓存-resetcommoncaches" aria-hidden="true">#</a> 13. 清除缓存: <code>resetCommonCaches()</code></h3><p>该方法代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">resetCommonCaches</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ReflectionUtils</span><span class="token punctuation">.</span><span class="token function">clearCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">AnnotationUtils</span><span class="token punctuation">.</span><span class="token function">clearCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ResolvableType</span><span class="token punctuation">.</span><span class="token function">clearCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">CachedIntrospectionResults</span><span class="token punctuation">.</span><span class="token function">clearClassLoader</span><span class="token punctuation">(</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从方法来看，就是执行各种缓存，执行比较简单，就不深究了。</p>`,4);function b(f,h){const e=t("ExternalLinkIcon");return o(),p("div",null,[r,s("p",null,[n("代码 "),d,n(" 发布了 "),k,n("，我们自己也可以来监听该事件。关于事件，本文并不打算深入，关于 spring 事件的详细分析，可以参考 "),s("a",v,[n("spring 探秘之 spring 事件机制"),i(e)]),n("。")]),m])}const w=c(u,[["render",b],["__file","starting-finished.html.vue"]]);export{w as default};
